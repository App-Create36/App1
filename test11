proof-of-coverage.component.ts
import { Component, Input, OnChanges, OnInit, ViewEncapsulation } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';

import { DialogTypes, ID_CARD_CONST } from '~/core/constants/id-cards.constants';
import { ProofOfCoverageDialogComponent } from './proof-of-coverage-dialog/proof-of-coverage-dialog.component';
import { IdCardService } from '~services/id-cards/id-card.service';
import { eventNames, entrySources, eventParams } from '~/core/constants/mixpanel-events.constant';
import { StateEligibilityService } from '~/services/state-eligibility/state-eligibility.service';
import { ScreenSizeDetectionService } from '~/services/screen-size-detection/screen-size-detection.service';
import {
    SubjectOfInsuranceConfigurationModel,
    FutureIdCardsDisplayModel,
    IdCardsConfigurationModel,
    RenewalIDCardModel,
} from '~/data/repository/id-cards/id-cards.model';
import { CSS_CONST, DEFAULT_APP_VALUES } from '~/core/constants/css.constant';
import { SpinnerService } from '~/services/spinner/spinner.service';
import { finalize } from 'rxjs/operators';
import { WindowService } from '~/services/window/window.service';
import { FeatureFlagService } from '~services/feature-flag/feature-flag.service';
import { featureConstants } from '~/services/feature-flag/feature-flag.constants';
import { EXPANSION_STATES } from '../../../../../../src/app/services/expansion/expansion.constants';
import { POLICY_CONST } from '~/core/constants/policy.constants';
import { MaintenanceFlagService } from '~/services/maintenance-flag/maintenance-flag.service';
import { maintenanceFlagConstants } from '~/services/maintenance-flag/maintenance-flag.constants';
import { PolicySummaryService } from '../../../../services/policy-summary/policy-summary.service';
import { Subscription } from 'rxjs';
import { PolicyChangeService } from '~/services/policy-change/policy-change.service';
import { TuiTrackerService } from 'ng-tractor-ui';
import { ISegmentTrackingModel } from 'ng-tractor-ui/tracker/tracker';
import { ImpersonationService } from '~/services/impersonation/impersonate.service';
import { STORAGE_CONST } from '~/core/constants/storage.constants';
import { SessionStorageService } from '~/services/session-storage/session-storage.service';
import { APP_SOURCE } from '~/core/constants/policy-change-request.constant';
import { environment } from '~environments/environment';
@Component({
    selector: 'app-proof-of-coverage',
    templateUrl: './proof-of-coverage.component.html',
    styleUrls: ['./proof-of-coverage.component.scss'],
    encapsulation: ViewEncapsulation.None,
})
export class ProofOfCoverageComponent implements OnInit, OnChanges {
    @Input() data: IdCardsConfigurationModel;
    @Input() renewal: boolean;
    @Input() isFutureIdCard: boolean;
    @Input() futureIdCard: FutureIdCardsDisplayModel;
    private readonly FL = 'FL';
    private readonly APPLE_DEVICES = ['iPhone', 'iPad', 'iPod'];
    private readonly iosFirefox = 'FxiOS';
    private readonly YES = 'Y';
    private readonly NO = 'N';
    private readonly EXPANSION_STATES = EXPANSION_STATES;
    subtitle: string;
    effectiveDate: string;
    expirationDate: string;
    shouldRenderEvidenceOfInsurance: boolean;
    smallCardLink: string;
    largeCardLink: string;
    showButtons: boolean;
    showFaxIdCard: boolean;
    showMailIdCard: boolean;
    showEmailIdCard: boolean;
    showAgentMessage: boolean;
    isFloridaPolicy: boolean;
    isImpersonatedUser: boolean;
    phone: string;
    isMobileView: boolean;
    isExpansionState = false;
    isIdCardAvailable: boolean;
    shouldDisplayAppleWallet = false;
    shouldDisplayAppleWalletForEaFWSAuto = false;
    shouldDisplayAppleWalletForIaFWSAuto = false;
    shouldDisplayGoogleWallet = false;
    shouldDisplayGoogleWalletForEaFWSAuto = false;
    shouldDisplayGoogleWalletForIaFWSAuto = false;
    isFWSAuto = false;
    isEnableFwsAndFmIdCardsForMobileWalletsEa = false;
    isEnableFwsAndFmIdCardsForMobileWalletsIa = false;
    isIosFirefox = false;
    isIosDevice = false;
    enableIdCardFormsBannerFlag = false;
    isShowExpirationDate = false;
    hasActiveARSOrA360Auto = false;
    hasNoActiveARSAndA360Auto = false;
    isA360FedPolicy = false;
    disableDownloadIdCardsButton: boolean;
    viewOrDownloadIdCardAriaLabel: string;
    GOOGLE_WALLET = ID_CARD_CONST.wallets.googleWallet;
    APPLE_WALLET = ID_CARD_CONST.wallets.appleWallet;
    isIAEnabled = false;
    isAccountIA = false;
    flagsReady: boolean;
    isFeatureFlagReadySubscription$: Subscription;
    getArsStateSubscription$: Subscription;
    allowArsCSSRedirect: boolean;
    displayNonFeatureFlagIdCard: boolean;
    isShowMailIDCard: boolean;
    FAX = DialogTypes.FAX;
    MAIL = DialogTypes.MAIL;
    EMAIL = DialogTypes.EMAIL;
    NJDIALOG = DialogTypes.NJDIALOG;
    fmBwIdCardDocumentText: string;
    idCardTitle: string;
    displayA360IdCardAvailabilities: boolean;
    enableMobileWalletsForRenewalIdCards: boolean;
    shouldDisplayAppleWalletForFM: boolean;
    shouldDisplayGoogleWalletForFM: boolean;
    subjectOfInsurance: Array<SubjectOfInsuranceConfigurationModel> = [];
    isBW = environment.isBWLogin;

    readonly RENEWAL = 'Renewal';
    readonly CURRENT = 'Current';
    readonly SMALLTEXT = 'Small';
    readonly LARGETEXT = 'Large';
    readonly DISABLED = 'Disabled';
    readonly NEW_TAB = 'Opens in new tab';
    readonly ANDROID_DEVICE = 'android';
    private readonly SEND_EMAIL = 'Send Email';
    private readonly OUTPUT_EMAIL = 'Email';
    private readonly ID_CARDS = 'ID Cards';
    private readonly ID_CARD_TITLE = 'ID card';
    private readonly ID_CARD_MULTI = 'ID cards';
    private readonly PAPER_SIZE = 'PAPER SIZE';
    private readonly DOWNLOAD_VIEW = 'DOWNLOAD/VIEW';
    private readonly RENEWAL_PROOF_OF_COVERAGE = 'renewal proof of coverage';
    private readonly CURRENT_PROOF_OF_COVERAGE = 'current proof of coverage';
    private readonly PAPER_SIZE_TEXT = 'paper size';
    private readonly DOWNLOAD_VIEW_TEXT = 'download or view';
    coverageTypeAriaLabel: string = '';
    fmBwIdCardDocumentTextAriaLabel: string = '';
    cardType: string = '';

    constructor(
        public dialogService: MatDialog,
        public idCardService: IdCardService,
        public screenSizeDetectionService: ScreenSizeDetectionService,
        private stateEligibilityService: StateEligibilityService,
        private spinner: SpinnerService,
        private windowService: WindowService,
        private featureFlagService: FeatureFlagService,
        private maintenanceFlagService: MaintenanceFlagService,
        private policySummaryService: PolicySummaryService,
        private policyChangeService: PolicyChangeService,
        private tuiTrackerService: TuiTrackerService,
        private impersonationService: ImpersonationService,
        private readonly sessionStorageService: SessionStorageService,
    ) {}

    ngOnInit() {
        this.checkFeatureFlags();
        this.isImpersonatedUser = !this.impersonationService.isUserCustomer();
        this.isFloridaPolicy = this.stateEligibilityService.getState(this.data.agentOfRecordId) === this.FL;
        this.updateDisplayData();

        this.phone = CSS_CONST.customerServiceNumber;
        this.checkIfCurrentPolicyIsExpansion();
        this.isMobileView = this.screenSizeDetectionService.isMobileView();
        this.isIosFirefox = this.windowService.nativeWindow.navigator.userAgent.indexOf(this.iosFirefox) > -1;

        if (this.data.isForemostPolicy) {
            this.setFmUnits();
        }

        this.shouldDisplayAppleWallet = this.displayAppleWallet();

        this.shouldDisplayGoogleWallet = this.displayGoogleWallet();

        this.isFWSAuto = this.data.isActiveARSAuto || this.data.isActiveA360Auto;
        this.isEnableFwsAndFmIdCardsForMobileWalletsEa = !this.isAccountIA;
        this.isEnableFwsAndFmIdCardsForMobileWalletsIa =
            this.isAccountIA &&
            this.featureFlagService.isEnabled(featureConstants.enableFwsAndFmIdCardsForMobileWalletsIa);

        // Display EA/IA FWS Auto
        this.shouldDisplayGoogleWalletForEaFWSAuto = this.isDisplayGoogleWalletForEaFWSAuto();
        this.shouldDisplayGoogleWalletForIaFWSAuto = this.isDisplayGoogleWalletForIaFWSAuto();
        this.shouldDisplayAppleWalletForEaFWSAuto = this.isDisplayAppleWalletForEaFWSAuto();
        this.shouldDisplayAppleWalletForIaFWSAuto = this.isDisplayAppleWalletForIaFWSAuto();

        // Display Apple/Google Wallet for FM
        if (this.data.isForemostPolicy) {
            this.shouldDisplayAppleWalletForFM = this.isDisplayAppleWalletForFM();
            this.shouldDisplayGoogleWalletForFM = this.isDisplayGoogleWalletForFM();
        }
    }

    isDisplayGoogleWalletForEaFWSAuto(): boolean {
        return this.shouldDisplayGoogleWallet && this.isFWSAuto && this.isEnableFwsAndFmIdCardsForMobileWalletsEa;
    }

    isDisplayGoogleWalletForIaFWSAuto(): boolean {
        return this.shouldDisplayGoogleWallet && this.isFWSAuto && this.isEnableFwsAndFmIdCardsForMobileWalletsIa;
    }

    isDisplayAppleWalletForEaFWSAuto(): boolean {
        return this.shouldDisplayAppleWallet && this.isFWSAuto && this.isEnableFwsAndFmIdCardsForMobileWalletsEa;
    }

    isDisplayAppleWalletForIaFWSAuto(): boolean {
        return this.shouldDisplayAppleWallet && this.isFWSAuto && this.isEnableFwsAndFmIdCardsForMobileWalletsIa;
    }

    isDisplayAppleWalletForFM(): boolean {
        return (
            this.shouldDisplayAppleWallet && this.featureFlagService.isEnabled(featureConstants.enableFmPolicyDetails)
        );
    }

    isDisplayGoogleWalletForFM(): boolean {
        return (
            this.shouldDisplayGoogleWallet && this.featureFlagService.isEnabled(featureConstants.enableFmPolicyDetails)
        );
    }

    ngOnChanges() {
        this.checkFeatureFlags();
        this.tuiTrackerService.addToState({
            policy_number: this.data?.policyContractNumber.replace(/-/g, ''),
            policy_source: this.getPolicySource(this.data),
            description: this.data?.policyType,
        });
        this.updateDisplayData();
        this.checkIfCurrentPolicyIsExpansion();
    }

    checkFeatureFlags() {
        this.enableIdCardFormsBannerFlag = this.maintenanceFlagService.isEnabled(maintenanceFlagConstants.idCardForms);
        this.isFeatureFlagReadySubscription$ = this.featureFlagService.isFeatureFlagReady().subscribe((flagsReady) => {
            if (flagsReady) {
                this.flagsReady = flagsReady;
                this.isIAEnabled = this.featureFlagService.isIA();
                this.isAccountIA = this.featureFlagService.isIA();
                const isA360IdCardEmailEnabled = this.featureFlagService.isEnabled(
                    featureConstants.isA360IdCardEmailEnabled,
                );
                const isA360IdCardFaxEnabled = this.featureFlagService.isEnabled(
                    featureConstants.isA360IdCardFaxEnabled,
                );
                this.enableMobileWalletsForRenewalIdCards = this.featureFlagService.isEnabled(
                    featureConstants.enableMobileWalletsForRenewalIdCards,
                );
                const isA360IdCardMailEnabled = this.featureFlagService.isEnabled(
                    featureConstants.isA360IdCardMailEnabled,
                );
                this.displayA360IdCardAvailabilities =
                    isA360IdCardEmailEnabled || isA360IdCardFaxEnabled || isA360IdCardMailEnabled;
                if (this.data.isActiveARSAuto) {
                    this.checkArsIdStateEligibility();
                }
                const featureFlagArsID = this.allowArsCSSRedirect && !this.enableIdCardFormsBannerFlag;
                const ars360AutoIdCard = this.data.isActiveA360Auto && !this.enableIdCardFormsBannerFlag;
                this.displayNonFeatureFlagIdCard = !featureFlagArsID || ars360AutoIdCard;
                this.isShowMailIDCard =
                    this.data.isActiveARSAuto && !this.data.isForemostPolicy && !this.data.isBWPolicy;
            }
        });
    }

    setFmUnits() {
        const fmUnits = this.data.units?.map((unit) => {
            const link = this.renewal ? unit.renewlink : unit.link;
            const encryptedDocumentId = this.renewal ? unit.renewalEncryptedDocumentId : unit.encryptedDocumentId;
            return { ...unit, ...{ link, encryptedDocumentId } };
        });
        this.data = { ...this.data, units: fmUnits };
    }

    updateDisplayData() {
        if (this.isFutureIdCard && this.futureIdCard) {
            this.updateFutureIdCardDisplayData();
            return;
        }
        const isRenewalAutoPolicy = this.renewal && this.data.isAutoPolicy;
        this.subjectOfInsurance =
            isRenewalAutoPolicy && this.data.renewalSubjectOfInsurance?.length
                ? this.data.renewalSubjectOfInsurance
                : this.data.subjectOfInsurance;
        this.isIdCardAvailable = this.isFloridaPolicy || this.isExpansionState;
        this.showButtons = this.data.cardLink && Object.values(this.data.cardLink).some((link) => link);
        this.subtitle = this.renewal
            ? ID_CARD_CONST.proofOfCoverageSubtitle.renewal
            : ID_CARD_CONST.proofOfCoverageSubtitle.current;
        this.effectiveDate = this.renewal ? this.data.renewalEffectiveDate : this.data.effectiveDate;
        this.expirationDate = this.renewal ? this.data.renewalExpiryDate : this.data.expirationDate;
        this.shouldRenderEvidenceOfInsurance = !this.isFloridaPolicy;
        const smallCardLink = this.data.cardLink ? this.data.cardLink?.small : null;
        const largeCardLink = this.data.cardLink ? this.data.cardLink?.large : null;
        this.smallCardLink = this.renewal ? this.data.renewalIDCards?.small : smallCardLink;
        this.largeCardLink = this.renewal ? this.data.renewalIDCards?.large : largeCardLink;
        this.showFaxIdCard = this.data.showFaxIdCard && !this.isExpansionState;
        this.showMailIdCard = this.data.showMailIdCard && !this.isExpansionState;
        this.showEmailIdCard = this.data.showEmailIdCard;
        this.disableDownloadIdCardsButton = this.data.isFwsArsEnterpriseSearchEnabled;
        this.viewOrDownloadIdCardAriaLabel = this.disableDownloadIdCardsButton ? this.DISABLED : this.NEW_TAB;
        // shows contact agent message if there is not fax and mail buttons is a PLA or GWPC policy
        this.showAgentMessage =
            !(this.data.showFaxIdCard || this.data.showMailIdCard) &&
            !this.data.isForemostPolicy &&
            !this.data.isBWPolicy;
        this.fmBwIdCardDocumentText = this.data.isForemostPolicy ? this.DOWNLOAD_VIEW : this.PAPER_SIZE;
        this.fmBwIdCardDocumentTextAriaLabel = this.data.isForemostPolicy
            ? this.DOWNLOAD_VIEW_TEXT
            : this.PAPER_SIZE_TEXT;
        this.coverageTypeAriaLabel = this.renewal ? this.RENEWAL_PROOF_OF_COVERAGE : this.CURRENT_PROOF_OF_COVERAGE;
        this.cardType = this.renewal ? this.RENEWAL : this.CURRENT;
        const hasMultiVehiclePolicy =
            this.data.subjectOfInsurance?.length > 1 ||
            this.data.units?.length > 1 ||
            this.data.selectedPolicy?.subjectOfInsurance?.length > 1;
        this.idCardTitle = hasMultiVehiclePolicy ? this.ID_CARD_MULTI : this.ID_CARD_TITLE;
        this.setFWSIDCardDisplayProperties();
    }

    updateFutureIdCardDisplayData() {
        this.isIdCardAvailable = this.isFloridaPolicy || this.isExpansionState;
        this.showButtons = !!(this.futureIdCard.smallIDCard || this.futureIdCard.largeIDCard);
        this.subtitle = ID_CARD_CONST.proofOfCoverageSubtitle.current;
        this.effectiveDate = this.futureIdCard.effectiveDate;
        this.expirationDate = this.data.expirationDate;
        this.shouldRenderEvidenceOfInsurance = !this.isFloridaPolicy;
        this.smallCardLink = this.futureIdCard?.smallIDCard || null;
        this.largeCardLink = this.futureIdCard?.largeIDCard || null;
        this.showFaxIdCard = this.data.showFaxIdCard && !this.isExpansionState && !this.isBW;
        this.showMailIdCard = this.data.showMailIdCard && !this.isExpansionState && !this.isBW;
        this.showEmailIdCard = this.data.showEmailIdCard;
        this.viewOrDownloadIdCardAriaLabel = this.NEW_TAB;
        // shows contact agent message if there is not fax and mail buttons is a PLA or GWPC policy
        this.showAgentMessage = !(this.data.showFaxIdCard || this.data.showMailIdCard);
        const hasMultiVehiclePolicy =
            this.futureIdCard.subjectOfInsurance?.length > 1 ||
            this.data.selectedPolicy?.futureSubjectOfInsurance?.length > 1;
        this.idCardTitle = hasMultiVehiclePolicy ? this.ID_CARD_MULTI : this.ID_CARD_TITLE;
    }

    setFWSIDCardDisplayProperties() {
        this.isShowExpirationDate =
            Boolean(this.data.expirationDate) && !this.data.isActiveARSAuto && !this.data.isActiveA360Auto;
        this.hasActiveARSOrA360Auto = this.data.isActiveARSAuto || this.data.isActiveA360Auto;
        this.hasNoActiveARSAndA360Auto = !this.data.isActiveARSAuto && !this.data.isActiveA360Auto;
        this.isA360FedPolicy = this.data.isActiveA360Auto && this.data.isFedPolicy;
    }

    openDialog(type: DialogTypes, cardType?: string, encryptedDocumentId?: string): void {
        const dialogData: MatDialogConfig = {
            maxWidth: this.data.dialogData.width,
            data: this.data.dialogData[type] || this.data.nJDialog.data,
            width: '92vw',
            maxHeight: '92vh',
            height: 'auto',
        };
        this.tuiTrackerService.addToState({
            future_dated_vehicle: this.isFutureIdCard || false,
        });
        const dialogRef = this.dialogService.open(ProofOfCoverageDialogComponent, dialogData);

        if (type !== this.NJDIALOG) {
            dialogRef.afterClosed().subscribe((inputValue) => {
                if (inputValue === undefined) {
                    return;
                }
                const segmentParams = this.getSegmentParamsForEmail(type, this.data);
                //setup mixpanel tracking params
                const trackParams = {
                    eventName: this.getIdCardEventName(type),
                    policyType: this.data.policyType,
                    policySource: this.data.policySource,
                };
                if (this.data.isFWSPolicy) {
                    trackParams.policyType = this.data.lineOfBusiness;
                    trackParams.policySource = this.data?.policySource || POLICY_CONST.policySource.fwsARS;
                }
                if (!this.isBW && (this.data.isForemostPolicy || this.data.isBWPolicy)) {
                    const policySource = this.data.isForemostPolicy
                        ? this.data.policySource || POLICY_CONST.policySource.fm
                        : POLICY_CONST.policySource.bw;
                    trackParams.policySource = policySource;
                    // FM and BW only have large id cards which matches encryptedDocumentId field.
                    this.idCardService.sendIdCard(inputValue, type, encryptedDocumentId, trackParams, segmentParams);
                    return;
                }
                const documentId = this.getIdCardsDocumentId(type, this.data, this.renewal);

                this.idCardService.sendIdCard(inputValue, type, documentId, trackParams, segmentParams, this.data);
            });
        } else {
            dialogRef.afterClosed().subscribe((isDownload) => {
                if (isDownload) {
                    this.displayIDCard(cardType, this.data.nJDialog.data.idUrl);
                }
            });
        }
    }

    getIdCardsDocumentId(type: DialogTypes, data: IdCardsConfigurationModel, isRenewal: boolean): string {
        // for email id card large id card link should be send in request.
        // encryptedDocumentId matches with small id card link
        if (!data) return '';
        if (type !== this.EMAIL) {
            return isRenewal ? data?.renewalIDCards?.encryptedLargeIdCardDocumentId : data.cardLink.encrypted;
        }

        return isRenewal
            ? data?.renewalIDCards?.encryptedLargeIdCardDocumentId
            : data?.cardLink?.encryptedLargeIdCardDocumentId;
    }

    getSegmentParamsForEmail(type: DialogTypes, data: IdCardsConfigurationModel): ISegmentTrackingModel | null {
        if (type !== this.EMAIL) {
            return null;
        }

        return {
            policy_number: data.policyContractNumber,
            policy_source: this.getPolicySource(data),
            action: this.SEND_EMAIL,
            dialog_name: eventNames.idCardEmail,
            output: this.OUTPUT_EMAIL,
            step: this.ID_CARDS,
        };
    }

    getPolicySource(data: IdCardsConfigurationModel): string {
        if (data?.isForemostPolicy || data?.isBWPolicy) {
            return data?.isForemostPolicy
                ? data?.policySource || POLICY_CONST.policySource.fm
                : POLICY_CONST.policySource.bw;
        }
        return data?.policySource;
    }

    displayIdCardClick(cardType: string, event: MouseEvent, disableDownloadIdCardsButton?): void {
        if (disableDownloadIdCardsButton) return;
        const cardUrl = cardType === this.SMALLTEXT ? this.smallCardLink : this.largeCardLink;
        this.tuiTrackerService.addToState({
            future_dated_vehicle: this.isFutureIdCard || false,
        });
        this.displayIDCard(cardType, cardUrl, event);
    }

    evidenceClick(renewalFlag: boolean, vehicle: SubjectOfInsuranceConfigurationModel, event: MouseEvent): void {
        event.preventDefault();
        const appSourceDetails = this.getAppSourceDetails();
        const cardUrl = renewalFlag
            ? `${vehicle.renewalEvidenceOfInsuranceLink}${appSourceDetails}`
            : `${vehicle.evidenceOfInsuranceLink}${appSourceDetails}`;
        const trackParams = {
            eventName: eventNames.evidenceOfInsurance,
            successful: true,
        };
        this.tuiTrackerService.addToState({
            future_dated_vehicle: this.isFutureIdCard || false,
        });
        this.idCardService.trackIdCardEvents(trackParams);
        window.open(cardUrl, '_blank');
    }

    displayIDCard(cardType: string, cardUrl: string, event?: MouseEvent): void {
        if (this.flagsReady) {
            if (event) {
                event.preventDefault();
            }
            const termStr = this.renewal ? this.RENEWAL : this.CURRENT;
            const isNonNYARSAuto =
                this.data?.isActiveARSAuto && !this.data?.isARSWithStateNY && this.allowArsCSSRedirect;
            const appSourceDetails = this.getAppSourceDetails();
            const policyCardUrl = isNonNYARSAuto
                ? `${this.largeCardLink}${appSourceDetails}`
                : `${cardUrl}${appSourceDetails}`;
            const trackParams = {
                eventName: eventNames.idCard,
                idCardType: cardType,
                policyType: this.data.policyType,
                policySource: this.data.policySource,
                term: termStr,
                successful: true,
                entrySource: entrySources.policyDetails,
            };
            if (this.data.isFWSPolicy) {
                trackParams.policyType = this.data.lineOfBusiness;
                trackParams.policySource = POLICY_CONST.policySource.fwsARS;
            }
            this.idCardService.trackIdCardEvents(trackParams);
            window.open(policyCardUrl, '_blank');
        }
    }

    getAppSourceDetails(): string {
        const osType =
            this.sessionStorageService.getItem(STORAGE_CONST.sessionStorage.osType) || DEFAULT_APP_VALUES.OS_TYPE;
        const appVersion =
            this.sessionStorageService.getItem(STORAGE_CONST.sessionStorage.appVersion) ||
            DEFAULT_APP_VALUES.APP_VERSION;
        const isFromMobileApp = this.sessionStorageService.getParsedItem(STORAGE_CONST.sessionStorage.isWebView);
        const applicationSource = isFromMobileApp ? APP_SOURCE.cssMobile : APP_SOURCE.css;
        const appSourceDetails = `&applicationSource=${applicationSource}&osType=${osType}&appVersion=${appVersion}`;
        return appSourceDetails;
    }

    trackContactClick(phoneNumber: string) {
        this.policySummaryService.trackPhoneNumberEvent(phoneNumber, eventParams.proofOfCoverage);
    }

    getIdCardEventName(type: DialogTypes): string {
        switch (type) {
            case this.FAX: {
                return eventNames.idCardFax;
            }
            case this.MAIL: {
                return eventNames.idCardMail;
            }
            case this.EMAIL: {
                return eventNames.idCardEmail;
            }
        }
    }

    checkArsIdStateEligibility() {
        this.getArsStateSubscription$ = this.policyChangeService
            .getStateFromPcnForArs(this.data.policyContractNumber)
            .subscribe((stateCode) => {
                return this.stateEligibilityService.isStateEligibleForARSId(stateCode).subscribe((isStateEligible) => {
                    this.allowArsCSSRedirect = isStateEligible;
                });
            });
    }

    checkIfCurrentPolicyIsExpansion() {
        if (this.policySummaryService.isPolicySourceFWS(this.data?.policySource)) {
            this.phone = this.isIAEnabled ? CSS_CONST.fwsIACustomerServiceNumber : CSS_CONST.fwscustomerServiceNumber;
            return;
        }
        if (this.policySummaryService.isPolicySourceForemost(this.data?.policySource)) {
            this.phone = this.isIAEnabled
                ? CSS_CONST.foremostIACustomerServiceNumber
                : CSS_CONST.foremostCustomerServiceNumber;
            return;
        }
        const policyState = this.stateEligibilityService.getState(this.data.agentOfRecordId);
        const isInExpansionStateList = EXPANSION_STATES[policyState] ? this.YES : this.NO;
        this.isExpansionState = isInExpansionStateList === this.YES;
        this.phone = this.isExpansionState ? CSS_CONST.expansionContactNumber : CSS_CONST.customerServiceNumber;
    }

    isShowPaperSize(data: IdCardsConfigurationModel): boolean {
        return data.isBWIDCardAvailable || data.isForemostPolicy || data.isFWSPolicy;
    }

    displayWallet(type: string, soiId?: string) {
        let renewalDetails: RenewalIDCardModel;
        let trackParams = {
            eventName: type === this.GOOGLE_WALLET ? eventNames.addToGoogleWallet : eventNames.addToAppleWallet,
            successful: false,
        };
        this.spinner.show();
        if (this.renewal && this.enableMobileWalletsForRenewalIdCards) {
            renewalDetails = {
                renewalEffectiveDate: this.data?.renewalEffectiveDate,
                renewalExpiryDate: this.data?.renewalExpiryDate,
            };
        }
        this.idCardService
            .displayWallet(type, soiId, renewalDetails)
            .pipe(
                finalize(() => {
                    this.idCardService.trackIdCardEvents(trackParams);
                    this.trackWalletSegmentEvents(trackParams.eventName);
                    this.spinner.hide();
                }),
            )
            .subscribe(
                (response) => {
                    trackParams = { ...trackParams, successful: true };
                    if (response.passkit) {
                        this.tuiTrackerService.addToState({
                            successful: true,
                        });
                        if (type === this.APPLE_WALLET) {
                            this.addToAppleWallet(response.passkit);
                        } else {
                            const url = response.passkit;
                            window.open(url, '_blank');
                        }
                    }
                },
                (error) => {
                    trackParams = { ...trackParams, ...{ failureMsg: error.message } };
                    this.tuiTrackerService.addToState({
                        successful: false,
                        failure_reason: error.message,
                    });
                },
            );
    }

    addToAppleWallet(base64String: string) {
        const timeMillis = new Date().getTime().toString();
        const dataUrl = `data:application/vnd.apple.pkpass;base64,${base64String}`;
        const clickableElement = document.createElement('a');
        clickableElement.href = dataUrl;
        clickableElement.download = `${timeMillis}-${this.data.policyContractNumber}.pkpass`;
        /* eslint-disable  @typescript-eslint/no-unused-vars */
        const clickHandler = function () {
            setTimeout(() => {
                URL.revokeObjectURL(dataUrl);
                this.removeEventListener('click', clickHandler);
                (this.remove && (this.remove(), 1)) || (this.parentNode && this.parentNode.removeChild(this));
            }, 150);
        };
        clickableElement.click();
    }

    displayAppleWallet(): boolean {
        const userAgent = this.windowService.nativeWindow.navigator.userAgent.toLowerCase();
        const lowerCaseAppleDevices = this.APPLE_DEVICES.map((device) => device.toLowerCase());
        this.isIosDevice = lowerCaseAppleDevices.map((devices) => userAgent.indexOf(devices) > -1).some((e) => !!e);

        const isDisplayAppleWallet =
            this.isIosDevice &&
            !this.isIosFirefox &&
            this.featureFlagService.isEnvVariableEnabledCheck(featureConstants.appleWallet);
        if (this.enableMobileWalletsForRenewalIdCards) {
            return isDisplayAppleWallet;
        } else {
            return isDisplayAppleWallet && !this.renewal;
        }
    }

    displayGoogleWallet(): boolean {
        const userAgent = this.windowService.nativeWindow.navigator.userAgent.toLowerCase();
        const isDisplayGoogleWallet =
            userAgent.indexOf(this.ANDROID_DEVICE) > -1 &&
            this.featureFlagService.isEnvVariableEnabledCheck(featureConstants.googleWallet);
        if (this.enableMobileWalletsForRenewalIdCards) {
            return isDisplayGoogleWallet;
        } else {
            return isDisplayGoogleWallet && !this.renewal;
        }
    }

    trackWalletSegmentEvents(walletName?: string): void {
        const action = `${walletName} clicked`;
        const step = `${this.subtitle} Id Card`;
        const eventName = eventNames.iconClicked;
        const params = {
            action: action,
            step: step,
            future_dated_vehicle: this.isFutureIdCard || false,
        };
        this.tuiTrackerService.track(eventName, params);
    }

    ngOnDestroy() {
        this.isFeatureFlagReadySubscription$?.unsubscribe();
        this.getArsStateSubscription$?.unsubscribe();
    }
}


---------------------------------------------------------------------------------------------------------
proof-of-coverage.component.html
<mat-card class="col-12 proof-of-coverage">
    <h2 class="tui-card-title" data-test-id="IDCARD_SUBHEADER">Proof of coverage</h2>
    <p class="tui-subtitle-text-1 card-subtitle"
       [ngClass]="{ 'renewal-subtitle' : renewal }"
       data-test-id="IDCARD_PROOF_OF_COVERAGE_SUBTITLE">{{subtitle}}</p>
    <div aria-hidden="true" class="tui-divider-line"></div>
    <!-- Auto Policies -->
    <div class="row" *ngIf="data.isAutoPolicy && !isFutureIdCard">
        <div class="col-sm-12 col-md-6 col-lg-4">
            <div class="row">
                <div class="col-6">
                    <p class="overline effective-date" data-test-id="IDCARD_AUTO_CURRENT_EFFECTIVE_DATE">EFFECTIVE DATE</p>
                    <p class="tui-phone-number" data-test-id="IDCARD_AUTO_CURRENT_EFFECTIVE_DATE_VALUE">{{effectiveDate}}</p>
                </div>
                <div class="col-6">
                    <p class="overline" data-test-id="IDCARD_AUTO_CURRENT_EXPIRATION_DATE">EXPIRATION DATE</p>
                    <p data-test-id="IDCARD_AUTO_CURRENT_EXPIRATION_DATE_VALUE">{{expirationDate}}</p>
                </div>
            </div>
            <div *ngIf="subjectOfInsurance?.length" class="row">
                <div class="col-12">
                    <p class="overline mt-3 mb-2" data-test-id="IDCARD_AUTO_CURRENT_VEHICLE_TITLE">{{data.unitsHeader}}</p>
                    <div *ngFor="let vehicle of subjectOfInsurance">
                        <p  data-test-id="IDCARD_AUTO_CURRENT_VEHICLE_YMM"
                            class="ymm">
                            {{vehicle.ymm}}
                            <span *ngIf="vehicle.vin" class="tui-body-text-2 d-block d-sm-inline-block vehicle-vin" data-test-id="IDCARD_AUTO_CURRENT_VEHICLE_VIN">(VIN #{{vehicle.vin}})</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-6 id-card"
             [ngClass]="{
             'col-lg-4' : shouldRenderEvidenceOfInsurance,
             'col-lg-8' : !shouldRenderEvidenceOfInsurance
             }">
            <div class="grey-section h-100">
                <h3 class="tui-h5" data-test-id="IDCARD_AUTO_CURRENT_IDCARD_AUTO_TITLE">{{idCardTitle}}</h3>
                <div *ngIf="showButtons && !enableIdCardFormsBannerFlag" class="row">
                    <div class="col-12 col-sm-6 mb-3 mb-sm-none">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_CURRENT_DOWNLOAD_CTA">DOWNLOAD/PRINT</p>
                        <div *ngIf="!data.nJDialog.isShow">
                             @if (!isBW) {
                            <button data-tui-tracking-id="CSS_IDCARDS_SMALL_WALLET_SIZE_CLICK"
                                    (click) = "displayIdCardClick(SMALLTEXT, $event)"
                                    aria-label="wallet size opens in a new tab"
                                    class="tui-btn tui-btn-link card-btn mb-2"
                                    data-gtm="CSS_IDCards_SMALL"
                                    role="link"
                                    [attr.aria-describedby]="'autoWalletSizeCtaAriaLabel' + cardType"
                                    data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN">
                                    <mat-icon
                                        aria-hidden="true"
                                        data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN_ICON">
                                        picture_as_pdf
                                    </mat-icon>
                                    WALLET SIZE
                                    <span [id]="'autoWalletSizeCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                            }
                            <button *ngIf="largeCardLink"
                                    data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CLICK"
                                    (click) = "displayIdCardClick(LARGETEXT, $event)"
                                    aria-label="paper size opens in a new tab"
                                    class="tui-btn tui-btn-link card-btn"
                                    data-gtm="CSS_IDCards_LARGE"
                                    role="link"
                                    [attr.aria-describedby]="'autoPaperSizeCtaAriaLabel' + cardType"
                                    data-test-id="IDCARD_AUTO_CURRENT_PDF_LARGE_BTN">
                                    <mat-icon aria-hidden="true"
                                              data-test-id="IDCARD_AUTO_CURRENT_PDF_LARGE_BTN_ICON">
                                              picture_as_pdf
                                    </mat-icon>
                                    PAPER SIZE
                                    <span [id]="'autoPaperSizeCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                        </div>
                        <div *ngIf="data.nJDialog.isShow">
                            <button data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CLICK"
                                    (click)="openDialog(NJDIALOG, SMALLTEXT)"
                                    aria-label="paper size"
                                    class="tui-btn tui-btn-link card-btn"
                                    aria-haspopup="dialog"
                                    data-gtm="CSS_IDCards_SMALL"
                                    [attr.aria-describedby]="'paperSizeCtaAriaLabel' + cardType"
                                    data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN">
                                    <mat-icon aria-hidden="true"
                                              data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN_ICON">
                                              picture_as_pdf
                                    </mat-icon>
                                    PAPER SIZE
                                    <span [id]="'paperSizeCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                        </div>
                    </div>
                    <ng-container *ngTemplateOutlet="displaySendIdCardOptions"></ng-container>
                    <div class="col-12 mt-3 apple-wallet-container" *ngIf="shouldDisplayAppleWallet">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_APPLE_WALLET_TITLE">Apple Wallet</p>
                        <div *ngFor="let vehicle of subjectOfInsurance"
                            class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)" class="d-inline-block mr-3"
                                (click)="displayWallet(APPLE_WALLET, vehicle.id)"
                                data-test-id="IDCARD_AUTO_APPLE_WALLET_BUTTON"
                                data-gtm="CSS_IDCards_Add_To_Wallet">
                                <img src="assets/images/addToAppleWallet.jpg" alt="Add To Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_APPLE_WALLET_YMM" class="ymm">
                                {{vehicle.ymm}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 google-wallet-container" *ngIf="shouldDisplayGoogleWallet">
                        <p class="overline mb-2"
                           data-test-id="IDCARD_AUTO_GOOGLE_WALLET_TITLE">Google Wallet
                        </p>
                        <div *ngFor="let vehicle of subjectOfInsurance"
                             class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)"
                               class="d-inline-block mr-3"
                               (click)="displayWallet(GOOGLE_WALLET, vehicle.id)"
                               data-test-id="IDCARD_AUTO_GOOGLE_WALLET_BUTTON"
                               data-gtm="CSS_IDCards_Add_To_Google_Wallet">
                               <img src="assets/images/addToGoogleWallet.png" alt="Add To Google Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_GOOGLE_WALLET_YMM" class="ymm">
                               {{vehicle.ymm}}
                            </p>
                        </div>
                    </div>
                    <div *ngIf="showAgentMessage" class="col-12 mt-2 mt-lg-3">
                        <p data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_TEXT">
                            <span>
                                <mat-icon color="primary" aria-hidden="false">
                                    info
                                </mat-icon>
                            </span>
                            <span *ngIf="!isIdCardAvailable; else faxOrMailText">
                                To request ID cards, please
                            </span>
                            <ng-template #faxOrMailText>
                                To have an ID Card faxed or mailed, please
                            </ng-template>
                            <ng-container>
                                <a data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_LINK"
                                    *ngIf="!isExpansionState"
                                    class="tui-body-text-1"
                                    [routerLink]="'/contactus'"
                                    data-gtm="CSS_IDCards_Contact_Agent_Message_Link"
                                    aria-label="goes to agent page"
                                    >
                                    contact your agent
                                </a>
                                <a data-test-id="IDCARD_CONTACT_US_LINK"
                                    *ngIf="isExpansionState"
                                    class="tui-body-text-1"
                                    [routerLink]="'/send-request'"
                                    data-gtm="CSS_IDCards_ContactUs_Link"
                                    aria-label="goes to get assistance page"
                                    >
                                    contact us
                                </a>
                                <span>
                                or call us at
                                </span>
                            </ng-container>

                            <a href="tel:{{phone}}"
                                class="tui-body-text-1 cursor-default"
                                *ngIf="isMobileView"
                                aria-label="makes a phone call to farmers"
                                data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_PHONE"
                                data-gtm="CSS_IDCards_Contact_Agent_Message_phone"
                                (click)="trackContactClick(phone)">
                                {{phone}}.
                            </a>
                            <span data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_PHONE_DESKTOP"
                                    data-gtm="CSS_IDCards_Contact_Agent_Message_phone"
                                    *ngIf="!isMobileView">
                                    {{phone}}.
                            </span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div *ngIf="!isBW && shouldRenderEvidenceOfInsurance && !enableIdCardFormsBannerFlag"
          class="col-sm-12 col-md-6 offset-md-6 col-lg-4 offset-lg-0 evidence-insurance">
            <div class="grey-section h-100">
                <div class="row" data-test-id="IDCARD_AUTO_CURRENT_EOI_TITLE">
                    <h3 class="col-12 tui-h5">
                        Evidence of insurance
                    </h3>
                    <p class="col-12" data-test-id="IDCARD_AUTO_CURRENT_EOI_TEXT">Lienholder interest form; binder</p>
                    <p class="overline col-12 my-2" data-test-id="IDCARD_AUTO_CURRENT_EOI_DOWNLOAD_CTA">DOWNLOAD/PRINT</p>
                </div>
                <div *ngFor="let vehicle of subjectOfInsurance" class="row">
                    <div class="col-12 col-sm">
                        <button data-tui-tracking-id="CSS_IDCARD_EVIDENCE_CILCK"
                                (click)="evidenceClick(renewal, vehicle, $event)"
                                role="link"
                                aria-describedby="evidencePaperSize"
                                class="tui-btn tui-btn-link card-btn"
                                aria-label="paper size opens in a new tab"
                                data-test-id="IDCARD_AUTO_CURRENT_EOI_DOWNLOAD_BTN"
                                data-gtm="CSS_IDCards_DOWNLOAD">
                                <mat-icon aria-hidden="true"
                                          data-test-id="IDCARD_AUTO_CURRENT_EOI_DOWNLOAD_ICON">
                                          picture_as_pdf
                                </mat-icon>
                                PAPER SIZE
                                <span id="evidencePaperSize" class="sr-only">
                                    evidence of insurance for the vehicle {{vehicle.ymm}}
                                </span>
                    </button>
                    </div>
                    <div valign="middle" class="col-12 col-sm-7 evidence-insurance-inside-row-items my-auto h-100">
                        <p class="ymm" data-test-id="IDCARD_AUTO_CURRENT_EOI_YMM">{{vehicle.ymm}}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--  Home Policy ID Card-->
    <div class="row" *ngIf="data.isHomePolicy">
      <div class="col-sm-12 col-md-6 col-lg-6">
        <div class="row">
          <div class="col-6">
            <p class="overline effective-date" data-test-id="IDCARD_HOME_CURRENT_EFFECTIVE_DATE">EFFECTIVE DATE</p>
            <p class="tui-phone-number mt-md-1" data-test-id="IDCARD_HOME_CURRENT_EFFECTIVE_DATE_VALUE">{{effectiveDate}}</p>
          </div>
          <div class="col-6">
            <p class="overline" data-test-id="IDCARD_HOME_CURRENT_EXPIRATION_DATE">EXPIRATION DATE</p>
            <p class="mt-md-1" data-test-id="IDCARD_HOME_CURRENT_EXPIRATION_DATE">{{expirationDate}}</p>
          </div>
        </div>
        <div class="row">
          <div class="col-12">
            <p class="overline mt-3" data-test-id="IDCARD_HOME_CURRENT_VEHICLE_TITLE">ADDRESS</p>
            <div>
              <div *ngIf="data.address?.address1" class="row">
                <div class="col-12">
                    <p class="tui-body address" data-test-id="IDCARD_ADDRESS1">{{data.address.address1| titlecase}}</p >
                </div>
            </div>

            <div *ngIf="data.address?.address2" class="row">
                <div class="col-12">
                    <p class="tui-body address" data-test-id="IDCARD_ADDRESS2">{{data.address.address2}}</p >
                </div>
            </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-sm-12 col-md-6 id-card col-lg-6">
        <div class="grey-section h-100">
          <div class="tui-h5"  role="heading" aria-level="4" data-test-id="IDCARD_AUTO_CURRENT_IDCARD_AUTO_TITLE">ID card</div>
          <div class="row" *ngIf="!enableIdCardFormsBannerFlag">
            <div class="col-12 col-sm-7">
              <p class="overline mb-2" data-test-id="IDCARD_HOME_CURRENT_DOWNLOAD_CTA">DOWNLOAD/PRINT</p>
              <div>
                <button data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CLICK"
                        (click)="displayIdCardClick(LARGETEXT, $event)"
                        aria-label="paper size opens in a new tab"
                        role="link"
                        class="tui-btn tui-btn-link card-btn"
                        data-gtm="CSS_IDCards_LARGE"
                        [attr.aria-describedby]="'homePaperSizeCtaAriaLabel' + cardType"
                        data-test-id="IDCARD_HOME_CURRENT_PDF_LARGE_BTN">
                        <mat-icon aria-hidden="true"
                                data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CILCK"
                                data-test-id="IDCARD_HOME_CURRENT_PDF_LARGE_BTN_ICON">
                                picture_as_pdf
                        </mat-icon>
                        PAPER SIZE
                        <span [id]="'homePaperSizeCtaAriaLabel' + cardType" class="sr-only">
                            for {{coverageTypeAriaLabel}}
                        </span>
                </button>
              </div>
            </div>
            <div *ngIf="showEmailIdCard" class="col-4 col-sm-2 text-center">
                <p class="overline mb-2" data-test-id="IDCARD_HOME_CURRENT_EMAIL_CTA">EMAIL</p>
                <button class="tui-btn tui-btn-link email-btn"
                        aria-label="email"
                        data-test-id="IDCARD_HOME_CURRENT_EMAIL_BTN"
                        [attr.aria-describedby]="'homeEmailCtaAriaLabel' + cardType"
                        data-tui-tracking-id="CSS_EMAIL_ID_CARD_ICON_CLICK"
                        aria-haspopup="dialog"
                        [disabled]="isImpersonatedUser"
                        (click)="openDialog(EMAIL)">
                        <mat-icon aria-hidden="false"
                                  aria-label="email icon"
                                  data-gtm="CSS_IDCards_SEND_EMAIL"
                                  data-test-id="IDCARD_HOME_CURRENT_EMAIL_ICON">
                                  send
                        </mat-icon>
                         <span [id]="'homeEmailCtaAriaLabel' + cardType" class="sr-only">
                            for {{coverageTypeAriaLabel}}
                        </span>
                </button>
            </div>
            <div class="col-12 mt-3 apple-wallet-container" *ngIf="shouldDisplayAppleWallet">
                <p class="overline mb-2" data-test-id="IDCARD_HOME_APPLE_WALLET_TITLE">Apple Wallet</p>
                <div class="d-flex align-items-center mb-2">
                    <a href="javascript:void(0)" class="d-inline-block mr-3"
                        (click)="displayWallet(APPLE_WALLET)"
                        data-test-id="IDCARD_HOME_APPLE_WALLET_BUTTON"
                        data-gtm="CSS_IDCards_Add_To_Wallet">
                        <img src="assets/images/addToAppleWallet.jpg" alt="Add To Wallet"/>
                    </a>
                </div>
            </div>
            <div class="col-12 mt-3 google-wallet-container" *ngIf="shouldDisplayGoogleWallet">
                <p class="overline mb-2"
                   data-test-id="IDCARD_HOME_GOOGLE_WALLET_TITLE">Google Wallet
                </p>
                <div class="d-flex align-items-center mb-2">
                    <a href="javascript:void(0)"
                       class="d-inline-block mr-3"
                       (click)="displayWallet(GOOGLE_WALLET)"
                       data-test-id="IDCARD_HOME_GOOGLE_WALLET_BUTTON"
                       data-gtm="CSS_IDCards_Add_To_Google_Wallet">
                       <img src="assets/images/addToGoogleWallet.png" alt="Add To Google Wallet"/>
                    </a>
                </div>
            </div>
          </div>
          <div class="agent-info-container" *ngIf="!enableIdCardFormsBannerFlag">
            <div class="mt-md-2 pl-md-2 mt-sm-1">
                <span>
                    <mat-icon class="agent-info-icon" aria-hidden="true">
                        info
                    </mat-icon>
                </span>
            </div>
            <div class="mt-md-3 pl-md-2 mt-sm-2">
                <span>
                    To have an ID Card faxed or mailed, please
                </span>
                <ng-container>
                    <a routerLink="/contactus"
                        *ngIf="!isExpansionState"
                        class="tui-body-text-1">
                        contact your agent
                    </a>
                    <a data-test-id="IDCARD_CONTACT_US_LINK"
                        *ngIf="isExpansionState"
                        class="tui-body-text-1"
                        [routerLink]="'/send-request'"
                        data-gtm="CSS_IDCards_ContactUs_Link"
                        aria-label="goes to get assistance page"
                        >
                        contact us
                    </a>
                    <span>
                        or call us at
                    </span>
                </ng-container>
                <a href="tel:{{phone}}"
                    class="tui-body-text-1 cursor-default"
                    *ngIf="isMobileView"
                    data-gtm="CSS_PolicyCard_Notification_ContactYourPhone_Link"
                    (click)="trackContactClick(phone)">
                    {{phone}}.
                </a>
                <span data-gtm="CSS_PolicyCard_Notification_ContactYourPhone_Link"
                      *ngIf="!isMobileView">
                      {{phone}}.
                </span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Foremost & BW Policies -->
    <div class="row" *ngIf="!isBW && (data.isForemostPolicy || data.isBWPolicy || data.isFWSPolicy)">
        <div class="col-sm-12 col-md-6">
            <div class="row">
                <div class="col-6" *ngIf="effectiveDate">
                    <p class="overline effective-date" data-test-id="IDCARD_CURRENT_EFFECTIVE_DATE'">EFFECTIVE DATE</p>
                    <p class="tui-phone-number" data-test-id="IDCARD_CURRENT_EFFECTIVE_DATE_VALUE'">{{effectiveDate}}</p>
                </div>
                <div class="col-6" *ngIf="isShowExpirationDate">
                    <p class="overline" data-test-id="IDCARD_CURRENT_EXPIRATION_DATE'">EXPIRATION DATE</p>
                    <p data-test-id="IDCARD_CURRENT_EXPIRATION_DATE_VALUE'">{{data.expirationDate}}</p>
                </div>
            </div>
            <div *ngIf="data.subjectOfInsurance?.length || data.units.length" class="row">
                <div class="col-12 mt-3">
                    <span class="overline" data-test-id="IDCARD_CURRENT_VEHICLE_TITLE'">{{data.typeOfUnit}}</span>
                    <ul>
                      <li *ngFor="let unit of data.units">
                        <p  data-test-id="IDCARD_CURRENT_VEHICLE_YMM'"
                            class="ymm">
                            {{unit.ymm}} <span *ngIf="unit.vin" class="tui-body-text-2 vehicle-vin" data-test-id="IDCARD_CURRENT_VEHICLE_VIN'">(VIN #{{unit.vin}})</span>
                        </p>
                      </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-6 id-card">
            <div class="grey-section h-100">
                <div
                    class="tui-h5"
                    role="heading"
                    aria-level="3" data-test-id="IDCARD_CURRENT_IDCARD_AUTO_TITLE'">
                    {{idCardTitle}}
                </div>
                <!-- ARS ID card section old view -->
                <div class="p-0 m-0 row" *ngIf="isShowMailIDCard">
                    <button class="tui-btn tui-btn-link mail col-sm-6 p-0 view-id-card"
                            data-gtm="FGS_IDCards_Mail"
                            aria-label="mail id card"
                            data-test-id="ARS_IDCARD_AUTO_CURRENT_MAIL_BTN"
                            aria-haspopup="dialog"
                            data-tui-tracking-id="CSS_MAIL_ICON_CLICK"
                            [attr.aria-describedby]="'fmMailIdCardCtaAriaLabel' + cardType"
                            [disabled]="isImpersonatedUser"
                            (click)="openDialog(MAIL)">
                        <div class="btn-content card-icon">
                            <mat-icon
                                class="mail-icon"
                                aria-hidden="false"
                                data-gtm="CSS_IDCards_EMAIL"
                                data-test-id="ARS_IDCARD_AUTO_CURRENT_MAIL_ICON">
                                email
                            </mat-icon>
                            MAIL ID Card
                        </div>
                        <span [id]="'fmMailIdCardCtaAriaLabel' + cardType" class="sr-only">
                            for {{coverageTypeAriaLabel}}
                        </span>
                    </button>
                </div>
                <div class="p-0 m-0 row" *ngIf="!displayNonFeatureFlagIdCard">
                    <div class="col-12 col-sm-6 mb-3 mb-sm-none">
                        <p class="overline mb-2" data-test-id="ARS_IDCARD_HOME_CURRENT_DOWNLOAD_CTA">DOWNLOAD/PRINT</p>
                        <div>
                            <button data-tui-tracking-id="CSS_IDCARDS_DOWNLOAD_VIEW_CLICK"
                                    (click)="displayIdCardClick(LARGETEXT, $event, disableDownloadIdCardsButton)"
                                    [disabled]="disableDownloadIdCardsButton"
                                    aria-label="Download or view opens in a new tab"
                                    class="tui-btn tui-btn-link card-btn"
                                    data-gtm="CSS_IDCards_LARGE"
                                    role="link"
                                    [attr.aria-describedby]="'fmDownloadViewCtaAriaLabel' + cardType"
                                    data-test-id="ARS_IDCARD_HOME_CURRENT_PDF_LARGE_BTN"
                                    [attr.tabindex]="disableDownloadIdCardsButton ? '-1' : '0'">
                                    <mat-icon data-tui-tracking-id="CSS_IDCARDS_DOWNLOAD_VIEW_CLICK"
                                                aria-hidden="true"
                                                data-test-id="ARS_IDCARD_HOME_CURRENT_PDF_LARGE_BTN_ICON">
                                                picture_as_pdf
                                    </mat-icon>
                                    DOWNLOAD/VIEW
                                    <span [id]="'fmDownloadViewCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                        </div>
                    </div>
                    <ng-container *ngIf="displayA360IdCardAvailabilities && data.isActiveA360Auto && largeCardLink">
                        <ng-container *ngTemplateOutlet="displaySendIdCardOptions"></ng-container>
                    </ng-container>
                </div>
                <div class="p-0 row" *ngIf="isShowPaperSize(data) && !enableIdCardFormsBannerFlag">
                    <div class="col-12">
                        <ng-container *ngIf="!allowArsCSSRedirect">
                            <ng-container *ngIf="!data.isActiveA360Auto">
                                <div class="mt-2 row" *ngFor="let unit of data.units">
                                    <div class="col-12 col-sm-7">
                                        <p class="overline mb-2"
                                            data-test-id="IDCARD_AUTO_CURRENT_DOWNLOAD_CTA"
                                            *ngIf="hasNoActiveARSAndA360Auto">
                                            DOWNLOAD/PRINT
                                        </p>
                                        <button class="tui-btn tui-btn-link card-btn mb-2 mb-sm-none"
                                                [disabled]="disableDownloadIdCardsButton"
                                                *ngIf="!data.isActiveARSAuto"
                                                (click)="!disableDownloadIdCardsButton && displayIDCard(LARGETEXT, unit.link, $event)"
                                                data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CLICK"
                                                data-gtm="CSS_IDCards_LARGE"
                                                [attr.aria-describedby]="'fmBwCtaTitle' + cardType"
                                                role="link"
                                                attr.aria-label="{{fmBwIdCardDocumentTextAriaLabel}} opens in a new tab"
                                                data-test-id="IDCARD_PDF_LARGE_BTN'">
                                            <mat-icon aria-hidden="true"
                                                      data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CILCK"
                                                      data-test-id="IDCARD_PDF_LARGE_BTN_ICON'">
                                                      picture_as_pdf
                                            </mat-icon>
                                            {{fmBwIdCardDocumentText}}
                                             <span [id]="'fmBwCtaTitle' + cardType" class="sr-only">
                                                for {{coverageTypeAriaLabel}}
                                            </span>
                                        </button>
                                        <button class="tui-btn tui-btn-link card-btn"
                                                *ngIf="data.isActiveARSAuto && !allowArsCSSRedirect"
                                                data-tui-tracking-id="CSS_IDCARDS_DOWNLOAD_VIEW_CLICK"
                                                (click)="!disableDownloadIdCardsButton && displayIDCard(LARGETEXT, unit.link, $event)"
                                                [disabled]="disableDownloadIdCardsButton"
                                                aria-label="download or View opens in a new tab"
                                                data-gtm="FGS_IDCards_View"
                                                role="link"
                                                [attr.aria-describedby]="'activeARSAuto' + cardType"
                                                data-test-id="IDCARD_DOWNLOAD_LARGE_BTN'">
                                                <mat-icon
                                                    aria-hidden="true"
                                                    data-test-id="IDCARD_DOWNLOAD_LARGE_BTN_ICON'">
                                                    picture_as_pdf
                                                </mat-icon>
                                                DOWNLOAD/VIEW
                                                <span [id]="'activeARSAuto' + cardType" class="sr-only">
                                                    for {{coverageTypeAriaLabel}}
                                                </span>
                                        </button>
                                    </div>
                                    <div class="col-4 col-sm-2 text-center" *ngIf="showEmailIdCard">
                                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_CURRENT_EMAIL_CTA">EMAIL</p>
                                        <button class="tui-btn tui-btn-link email-btn email"
                                                data-test-id="IDCARD_FM_BW_CURRENT_EMAIL_BTN"
                                                aria-label="email"
                                                data-tui-tracking-id="CSS_EMAIL_ID_CARD_ICON_CLICK"
                                                [attr.aria-describedby]="'fmAutoEmailCtaAriaLabel' + cardType"
                                                [disabled]="isImpersonatedUser"
                                                aria-haspopup="dialog"
                                                (click)="openDialog(EMAIL, '', unit.encryptedDocumentId)">
                                                <mat-icon aria-hidden="false"
                                                          aria-label="email icon"
                                                          data-gtm="CSS_IDCards_SEND_EMAIL"
                                                          data-test-id="IDCARD_FM_BW_CURRENT_EMAIL_ICON">
                                                          send
                                                </mat-icon>
                                                <span [id]="'fmAutoEmailCtaAriaLabel' + cardType" class="sr-only">
                                                    for {{coverageTypeAriaLabel}}
                                                </span>
                                        </button>
                                    </div>
                                </div>
                            </ng-container>
                        </ng-container>
                        <div *ngIf="data.isActiveA360Auto && largeCardLink" class="mt-2 row">
                            <div class="col-12 col-sm-6 mb-3 mb-sm-none">
                                <p class="overline mb-2"
                                    data-test-id="IDCARD_A360_AUTO_CURRENT_DOWNLOAD_CTA"
                                    *ngIf="hasNoActiveARSAndA360Auto">
                                    DOWNLOAD/PRINT
                                </p>
                                <button class="tui-btn tui-btn-link card-btn"
                                        [class.mt-4]="displayA360IdCardAvailabilities && !hasNoActiveARSAndA360Auto"
                                        data-tui-tracking-id="CSS_IDCARDS_DOWNLOAD_VIEW_CLICK"
                                        (click)="displayIdCardClick(LARGETEXT, $event)"
                                        data-gtm="FGS_IDCards_View"
                                        aria-label="Download or View opens in new tab"
                                        role="link"
                                        [attr.aria-describedby]="'a360DownloadView' + cardType"
                                        data-test-id="IDCARD_DOWNLOAD_LARGE_BTN'">
                                    <mat-icon aria-hidden="true" data-test-id="IDCARD_DOWNLOAD_LARGE_BTN_ICON'">
                                        picture_as_pdf
                                    </mat-icon>
                                    DOWNLOAD/VIEW
                                    <span [id]="'a360DownloadView' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                                </button>
                            </div>
                            <ng-container *ngIf="displayA360IdCardAvailabilities">
                                <ng-container *ngTemplateOutlet="displaySendIdCardOptions"></ng-container>
                            </ng-container>
                        </div>
                    </div>
                </div>
                <div class="row" *ngIf="!enableIdCardFormsBannerFlag">
                    <div class="col-12 mt-sm-3">
                        <p class="call-us-section">
                            <span class="card-icon">
                                <mat-icon
                                    data-test-id="FM_IDCARD_INFO_ICON"
                                    class="info-icon"
                                    aria-hidden="false"
                                    aria-label="info icon">info
                                </mat-icon>
                            </span>
                            <span *ngIf="hasActiveARSOrA360Auto"
                                   data-test-id="FWS_ARS_AUTO_IDCARD_INFO">
                                   To have an ID Card faxed, please contact your agent or call us at {{phone}}
                                   and say 'ID Card' when asked.
                            </span>
                            <span *ngIf="hasNoActiveARSAndA360Auto">
                                To have an ID Card faxed or mailed, please
                                <a data-test-id="FM_IDCARD_AGENT_LINK"
                                    data-gtm="CSS_ForemostIDCard_ContactYourAgent_Link"
                                    [routerLink]="['/contactus']">
                                    contact your agent
                                </a>
                                or call us at
                                <span data-test-id="FM_IDCARD_PHONE" class="d-none d-md-inline-block">
                                    {{phone}}.
                                </span>
                                <span>
                                    <a data-test-id="FM_IDCARD_PHONE_LINK"
                                       class="d-md-none tui-body-text-1"
                                       data-gtm="CSS_ForemostIDCard_Phone_Link"
                                       href="tel:{{phone}}"
                                       (click)="trackContactClick(phone)">
                                        {{phone}}<span>.</span>
                                    </a>
                                </span>
                            </span>
                        </p>
                    </div>
                    <div class="col-12 mt-3 google-wallet-container" *ngIf="shouldDisplayGoogleWalletForEaFWSAuto">
                        <p class="overline mb-2"
                           data-test-id="IDCARD_AUTO_GOOGLE_WALLET_TITLE">Google Wallet
                        </p>
                        <div *ngFor="let vehicle of data.selectedPolicy?.subjectOfInsurance"
                             class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)"
                               class="d-inline-block mr-3"
                               (click)="displayWallet(GOOGLE_WALLET, vehicle.vehicleID)"
                               data-test-id="IDCARD_AUTO_GOOGLE_WALLET_BUTTON"
                               data-gtm="CSS_IDCards_Add_To_Google_Wallet">
                               <img src="assets/images/addToGoogleWallet.png" alt="Add To Google Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_GOOGLE_WALLET_YMM">
                               {{vehicle.vehicleYear + ' ' + vehicle.vehicleMake + ' ' + vehicle.vehicleModel}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 google-wallet-container" *ngIf="shouldDisplayGoogleWalletForIaFWSAuto">
                        <p class="overline mb-2"
                           data-test-id="IDCARD_AUTO_GOOGLE_WALLET_TITLE">Google Wallet
                        </p>
                        <div *ngFor="let vehicle of data.selectedPolicy?.subjectOfInsurance"
                             class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)"
                               class="d-inline-block mr-3"
                               (click)="displayWallet(GOOGLE_WALLET, vehicle.vehicleID)"
                               data-test-id="IDCARD_AUTO_GOOGLE_WALLET_BUTTON"
                               data-gtm="CSS_IDCards_Add_To_Google_Wallet">
                               <img src="assets/images/addToGoogleWallet.png" alt="Add To Google Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_GOOGLE_WALLET_YMM">
                               {{vehicle.vehicleYear + ' ' + vehicle.vehicleMake + ' ' + vehicle.vehicleModel}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 google-wallet-container" *ngIf="shouldDisplayGoogleWalletForFM">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_GOOGLE_WALLET_TITLE">Google Wallet</p>
                        <div *ngFor="let unit of data.units" class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)" class="d-inline-block mr-3"
                                (click)="displayWallet(GOOGLE_WALLET, unit.vin)"
                                data-test-id="IDCARD_AUTO_GOOGLE_WALLET_BUTTON"
                                data-gtm="CSS_IDCards_Add_To_Google_Wallet">
                                <img src="assets/images/addToGoogleWallet.png" alt="Add To Google Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_GOOGLE_WALLET_YMM" class="ymm">
                                {{unit.ymm}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 apple-wallet-container" *ngIf="shouldDisplayAppleWalletForEaFWSAuto ">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_APPLE_WALLET_TITLE">Apple Wallet</p>
                        <div *ngFor="let vehicle of data.selectedPolicy?.subjectOfInsurance"
                            class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)" class="d-inline-block mr-3"
                                (click)="displayWallet(APPLE_WALLET, vehicle.vehicleID)"
                                data-test-id="IDCARD_AUTO_APPLE_WALLET_BUTTON"
                                data-gtm="CSS_IDCards_Add_To_Wallet">
                                <img src="assets/images/addToAppleWallet.jpg" alt="Add To Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_APPLE_WALLET_YMM" class="ymm">
                                {{vehicle.vehicleYear + ' ' + vehicle.vehicleMake + ' ' + vehicle.vehicleModel}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 apple-wallet-container" *ngIf="shouldDisplayAppleWalletForIaFWSAuto">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_APPLE_WALLET_TITLE">Apple Wallet</p>
                        <div *ngFor="let vehicle of data.selectedPolicy?.subjectOfInsurance"
                            class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)" class="d-inline-block mr-3"
                                (click)="displayWallet(APPLE_WALLET, vehicle.vehicleID)"
                                data-test-id="IDCARD_AUTO_APPLE_WALLET_BUTTON"
                                data-gtm="CSS_IDCards_Add_To_Wallet">
                                <img src="assets/images/addToAppleWallet.jpg" alt="Add To Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_APPLE_WALLET_YMM" class="ymm">
                                {{vehicle.vehicleYear + ' ' + vehicle.vehicleMake + ' ' + vehicle.vehicleModel}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 apple-wallet-container" *ngIf="shouldDisplayAppleWalletForFM">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_APPLE_WALLET_TITLE">Apple Wallet</p>
                        <div *ngFor="let unit of data.units" class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)" class="d-inline-block mr-3"
                                (click)="displayWallet(APPLE_WALLET, unit.vin)"
                                data-test-id="IDCARD_AUTO_APPLE_WALLET_BUTTON"
                                data-gtm="CSS_IDCards_Add_To_Wallet">
                                <img src="assets/images/addToAppleWallet.jpg" alt="Add To Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_APPLE_WALLET_YMM" class="ymm">
                                {{unit.ymm}}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" *ngIf="isFutureIdCard">
        <div class="col-12 col-md-6 col-lg-4">
            <div class="row">
                <div class="col-6">
                    <p class="overline effective-date" data-test-id="IDCARD_AUTO_FUTURE_EFFECTIVE_DATE">EFFECTIVE DATE</p>
                    <p class="tui-phone-number" data-test-id="IDCARD_AUTO_FUTURE_EFFECTIVE_DATE_VALUE">{{futureIdCard.effectiveDate}}</p>
                </div>
                <div class="col-6">
                    <p class="overline" data-test-id="IDCARD_AUTO_FUTURE_EXPIRATION_DATE">EXPIRATION DATE</p>
                    <p data-test-id="IDCARD_AUTO_FUTURE_EXPIRATION_DATE_VALUE">{{expirationDate}}</p>
                </div>
            </div>
            <div *ngIf="futureIdCard.subjectOfInsurance?.length" class="row">
                <div class="col-12">
                    <p class="overline mt-3 mb-2" data-test-id="IDCARD_AUTO_FUTURE_VEHICLE_TITLE">{{futureIdCard.unitsHeader}}</p>
                    <div *ngFor="let vehicle of futureIdCard.subjectOfInsurance">
                        <p  data-test-id="IDCARD_AUTO_FUTURE_VEHICLE_YMM"
                            class="ymm">
                            {{vehicle.ymm}}
                            <span *ngIf="vehicle.vin" class="tui-body-text-2 d-block d-sm-inline-block vehicle-vin" data-test-id="IDCARD_AUTO_FUTURE_VEHICLE_VIN">(VIN #{{vehicle.vin}})</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-6 id-card"
             [ngClass]="{
             'col-lg-4' : shouldRenderEvidenceOfInsurance,
             'col-lg-8' : !shouldRenderEvidenceOfInsurance
             }">
            <div class="grey-section h-100">
                <h3 class="tui-h5" data-test-id="IDCARD_AUTO_FUTURE_IDCARD_AUTO_TITLE">{{idCardTitle}}</h3>
                <div *ngIf="showButtons && !enableIdCardFormsBannerFlag" class="row">
                    <div class="col-12 col-sm-6 mb-3 mb-sm-none">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_CURRENT_DOWNLOAD_CTA">DOWNLOAD/PRINT</p>
                        <div *ngIf="!data.nJDialog.isShow">
                            <button data-tui-tracking-id="CSS_IDCARDS_SMALL_WALLET_SIZE_CLICK"
                                    (click) = "displayIdCardClick(SMALLTEXT, $event)"
                                    class="tui-btn tui-btn-link card-btn mb-2"
                                    aria-label="wallet size opens in a new tab"
                                    role="link"
                                    [attr.aria-describedby]="'futureWalletSizeCtaAriaLabel' + cardType"
                                    data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN">
                                    <mat-icon
                                        aria-hidden="true"
                                        data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN_ICON">
                                        picture_as_pdf
                                    </mat-icon>
                                    WALLET SIZE
                                    <span [id]="'futureWalletSizeCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                            <button *ngIf="largeCardLink"
                                    data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CLICK"
                                    (click) = "displayIdCardClick(LARGETEXT, $event)"
                                    class="tui-btn tui-btn-link card-btn"
                                    aria-label="paper size opens in a new tab"
                                    role="link"
                                    [attr.aria-describedby]="'futurePaperSizeCtaAriaLabel' + cardType"
                                    data-test-id="IDCARD_AUTO_CURRENT_PDF_LARGE_BTN">
                                    <mat-icon aria-hidden="true"
                                              data-test-id="IDCARD_AUTO_CURRENT_PDF_LARGE_BTN_ICON">
                                              picture_as_pdf
                                    </mat-icon>
                                    PAPER SIZE
                                    <span [id]="'futurePaperSizeCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                        </div>
                        <div *ngIf="data.nJDialog.isShow">
                            <button data-tui-tracking-id="CSS_IDCARDS_PAPER_SIZE_CLICK"
                                    (click)="openDialog(NJDIALOG, SMALLTEXT)"
                                    [attr.aria-describedby]="'futureNjPaperSizeCtaAriaLabel' + cardType"
                                    class="tui-btn tui-btn-link card-btn"
                                    aria-haspopup="dialog"
                                    aria-label="paper size"
                                    data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN">
                                    <mat-icon aria-hidden="true"
                                              data-test-id="IDCARD_AUTO_CURRENT_PDF_SMALL_BTN_ICON">
                                              picture_as_pdf
                                    </mat-icon>
                                    PAPER SIZE
                                    <span [id]="'futureNjPaperSizeCtaAriaLabel' + cardType" class="sr-only">
                                        for {{coverageTypeAriaLabel}}
                                    </span>
                            </button>
                        </div>
                    </div>
                    <ng-container *ngTemplateOutlet="displaySendIdCardOptions"></ng-container>
                    <div class="col-12 mt-3 apple-wallet-container" *ngIf="shouldDisplayAppleWallet">
                        <p class="overline mb-2" data-test-id="IDCARD_AUTO_APPLE_WALLET_TITLE">Apple Wallet</p>
                        <div *ngFor="let vehicle of futureIdCard.subjectOfInsurance"
                            class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)" class="d-inline-block mr-3"
                                (click)="displayWallet(APPLE_WALLET, vehicle.id)"
                                data-test-id="IDCARD_AUTO_APPLE_WALLET_BUTTON">
                                <img src="assets/images/addToAppleWallet.jpg" alt="Add To Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_APPLE_WALLET_YMM" class="ymm">
                                {{vehicle.ymm}}
                            </p>
                        </div>
                    </div>
                    <div class="col-12 mt-3 google-wallet-container" *ngIf="shouldDisplayGoogleWallet">
                        <p class="overline mb-2"
                           data-test-id="IDCARD_AUTO_GOOGLE_WALLET_TITLE">Google Wallet
                        </p>
                        <div *ngFor="let vehicle of futureIdCard.subjectOfInsurance"
                             class="d-flex align-items-center mb-2">
                            <a href="javascript:void(0)"
                               class="d-inline-block mr-3"
                               (click)="displayWallet(GOOGLE_WALLET, vehicle.id)"
                               data-test-id="IDCARD_AUTO_GOOGLE_WALLET_BUTTON">
                               <img src="assets/images/addToGoogleWallet.png" alt="Add To Google Wallet"/>
                            </a>
                            <p data-test-id="IDCARD_AUTO_GOOGLE_WALLET_YMM" class="ymm">
                               {{vehicle.ymm}}
                            </p>
                        </div>
                    </div>
                    <div *ngIf="showAgentMessage" class="col-12 mt-2 mt-lg-3">
                        <p data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_TEXT">
                            <span>
                                <mat-icon color="primary" aria-hidden="false">
                                    info
                                </mat-icon>
                            </span>
                            <span *ngIf="!isIdCardAvailable; else faxOrMailText">
                                To request ID cards, please
                            </span>
                            <ng-template #faxOrMailText>
                                To have an ID Card faxed or mailed, please
                            </ng-template>
                            <ng-container>
                                <a data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_LINK"
                                    *ngIf="!isExpansionState"
                                    class="tui-body-text-1"
                                    [routerLink]="'/contactus'"
                                    aria-label="goes to agent page"
                                    >
                                    contact your agent
                                </a>
                                <a data-test-id="IDCARD_CONTACT_US_LINK"
                                    *ngIf="isExpansionState"
                                    class="tui-body-text-1"
                                    [routerLink]="'/send-request'"
                                    aria-label="goes to get assistance page"
                                    >
                                    contact us
                                </a>
                                <span>
                                or call us at
                                </span>
                            </ng-container>

                            <a href="tel:{{phone}}"
                                class="tui-body-text-1 cursor-default"
                                *ngIf="isMobileView"
                                aria-label="makes a phone call to farmers"
                                data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_PHONE"
                                (click)="trackContactClick(phone)">
                                {{phone}}.
                            </a>
                            <span data-test-id="IDCARD_CONTACT_AGENT_MESSAGE_PHONE_DESKTOP"
                                    *ngIf="!isMobileView">
                                    {{phone}}.
                            </span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div *ngIf="shouldRenderEvidenceOfInsurance && !enableIdCardFormsBannerFlag"
          class="col-sm-12 col-md-6 offset-md-6 col-lg-4 offset-lg-0 evidence-insurance">
            <div class="grey-section h-100">
                <div class="row" data-test-id="IDCARD_AUTO_CURRENT_EOI_TITLE">
                    <h3 class="col-12 tui-h5">
                        Evidence of insurance
                    </h3>
                    <p class="col-12" data-test-id="IDCARD_AUTO_CURRENT_EOI_TEXT">Lienholder interest form; binder</p>
                    <p class="overline col-12 my-2" data-test-id="IDCARD_AUTO_CURRENT_EOI_DOWNLOAD_CTA">DOWNLOAD/PRINT</p>
                </div>
                <div *ngFor="let vehicle of futureIdCard.subjectOfInsurance" class="row pb-2">
                    <div class="col-12 col-sm">
                        <button data-tui-tracking-id="CSS_IDCARD_EVIDENCE_CILCK"
                                (click)="evidenceClick(renewal, vehicle, $event)"
                                role="link"
                                class="tui-btn tui-btn-link card-btn"
                                aria-label="paper size opens in a new tab"
                                data-test-id="IDCARD_AUTO_CURRENT_EOI_DOWNLOAD_BTN"
                                aria-describedby="futureEviaencePaperSize">
                                <mat-icon aria-hidden="true"
                                          data-test-id="IDCARD_AUTO_CURRENT_EOI_DOWNLOAD_ICON">
                                          picture_as_pdf
                                </mat-icon>
                                PAPER SIZE
                                <span id="futureEviaencePaperSize" class="sr-only">
                                    evidence of insurance for the vehicle {{vehicle.ymm}}
                                </span>
                    </button>
                    </div>
                    <div valign="middle" class="col-12 col-sm-7 evidence-insurance-inside-row-items my-auto h-100">
                        <p class="ymm" data-test-id="IDCARD_AUTO_CURRENT_EOI_YMM">{{vehicle.ymm}}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</mat-card>

<ng-template #displaySendIdCardOptions>
    <div *ngIf="showFaxIdCard" class="col-4 col-sm-2 text-center">
        <p class="overline mb-2" data-test-id="IDCARD_AUTO_CURRENT_FAX_TITLE">FAX</p>
        <button class="tui-btn tui-btn-link fax card-btn"
                data-test-id="IDCARD_AUTO_CURRENT_FAX_BTN"
                data-gtm="CSS_IDCards_SMALL"
                aria-label="fax"
                data-tui-tracking-id="CSS_FAX_ICON_CLICK"
                [attr.aria-describedby]="'autoFaxCtaAriaLabel' + cardType"
                [disabled]="isImpersonatedUser"
                aria-haspopup="dialog"
                (click)="openDialog(FAX)">
                <mat-icon aria-hidden="false"
                          data-gtm="CSS_IDCards_PRINT"
                          data-test-id="IDCARD_AUTO_CURRENT_FAX_BTN_ICON">
                          print
                </mat-icon>
                 <span [id]="'autoFaxCtaAriaLabel' + cardType" class="sr-only">
                    for {{coverageTypeAriaLabel}}
                </span>
        </button>
    </div>
    <div *ngIf="showMailIdCard" class="col-4 col-sm-2 text-center">
        <p class="overline mb-2" data-test-id="IDCARD_AUTO_CURRENT_MAIL_CTA">MAIL</p>
        <button class="tui-btn tui-btn-link card-btn mail"
                data-test-id="IDCARD_AUTO_CURRENT_MAIL_BTN"
                aria-label="mail"
                data-tui-tracking-id="CSS_MAIL_ICON_CLICK"
                aria-haspopup="dialog"
                [disabled]="isImpersonatedUser"
                [attr.aria-describedby]="'autoMailCtaAriaLabel' + cardType"
                (click)="openDialog(MAIL)">
                <mat-icon aria-hidden="false"
                          data-gtm="CSS_IDCards_EMAIL"
                          data-test-id="IDCARD_AUTO_CURRENT_MAIL_ICON">
                          email
                </mat-icon>
                 <span [id]="'autoMailCtaAriaLabel' + cardType" class="sr-only">
                    for {{coverageTypeAriaLabel}}
                </span>
        </button>
    </div>
    <div *ngIf="showEmailIdCard" class="col-4 col-sm-2 text-center">
        <p class="overline mb-2" data-test-id="IDCARD_AUTO_CURRENT_EMAIL_CTA">EMAIL</p>
        <button class="tui-btn tui-btn-link card-btn email"
                data-test-id="IDCARD_AUTO_CURRENT_EMAIL_BTN"
                aria-label="email"
                data-tui-tracking-id="CSS_EMAIL_ID_CARD_ICON_CLICK"
                [attr.aria-describedby]="'autoEmailCtaAriaLabel' + cardType"
                [disabled]="isImpersonatedUser"
                aria-haspopup="dialog"
                (click)="openDialog(EMAIL)">
                <mat-icon aria-hidden="false"
                          data-gtm="CSS_IDCards_SEND_EMAIL"
                          data-test-id="IDCARD_AUTO_CURRENT_EMAIL_ICON">
                          send
                </mat-icon>
                    <span [id]="'autoEmailCtaAriaLabel' + cardType" class="sr-only">
                        for {{coverageTypeAriaLabel}}
                    </span>
        </button>
    </div>
</ng-template>

--------------------------------------------------------------------------------------------------------------

proof-coverage.component.spec.ts


import { ComponentFixture, TestBed, fakeAsync } from '@angular/core/testing';
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { RouterTestingModule } from '@angular/router/testing';

import { ProofOfCoverageComponent } from '~/ui/policies/id-cards/proof-of-coverage/proof-of-coverage.component';
import { ProofOfCoverageDialogComponent } from '~/ui/policies/id-cards/proof-of-coverage/proof-of-coverage-dialog/proof-of-coverage-dialog.component';

import { IdCardService } from '~services/id-cards/id-card.service';
import { StateEligibilityService } from '~/services/state-eligibility/state-eligibility.service';
import { MatDialog } from '@angular/material/dialog';
import { Observable, of, throwError, Subscription } from 'rxjs';
import { ExpansionService } from '~/services/expansion/expansion.service';

import { SubjectOfInsuranceConfigurationModel } from '~/data/repository/id-cards/id-cards.model';
import { SpinnerService } from '~/services/spinner/spinner.service';
import { WindowService } from '~/services/window/window.service';
import { FeatureFlagService } from '~/services/feature-flag/feature-flag.service';
import { MaintenanceFlagService } from '~/services/maintenance-flag/maintenance-flag.service';
import { PolicySummaryService } from '../../../../services/policy-summary/policy-summary.service';
import { DialogTypes, ID_CARD_CONST } from '~/core/constants/id-cards.constants';
import { PolicyChangeService } from '~/services/policy-change/policy-change.service';
import { TuiTrackerService } from 'ng-tractor-ui';
import { runAdaTests } from '~/utils/ADA.utils';
import { eventNames, eventParams } from '~/core/constants/mixpanel-events.constant';
import { featureConstants } from '~/services/feature-flag/feature-flag.constants';
import { ImpersonationService } from '~/services/impersonation/impersonate.service';
import { STORAGE_CONST } from '~/core/constants/storage.constants';
import { SessionStorageService } from '~/services/session-storage/session-storage.service';

describe('ProofOfCoverageComponent', () => {
    let component: ProofOfCoverageComponent;
    let fixture: ComponentFixture<ProofOfCoverageComponent>;
    let element: any;
    const idCardServiceSpy = jasmine.createSpyObj('IdCardService', [
        'sendIdCard',
        'trackIdCardEvents',
        'displayWallet',
    ]);
    const matDialogSpy = jasmine.createSpyObj('matDialogSpy', ['open']);
    const impersonationServiceSpy = jasmine.createSpyObj('ImpersonationService', ['isUserCustomer']);
    const stateEligibilityServiceSpy = jasmine.createSpyObj('StateEligibilityService', [
        'getState',
        'isStateEligibleForARSId',
    ]);
    const tuiTrackerServiceSpy = jasmine.createSpyObj('TuiTrackerService', ['addToState', 'track']);
    const expansionServiceSpy = jasmine.createSpyObj('ExpansionService', ['getEasternExpansionData']);
    const spinnerSpy = jasmine.createSpyObj('SpinnerService', ['show', 'hide']);
    const windowServiceSpy = {
        nativeWindow: {
            navigator: {
                platform: 'iPhone',
                userAgent: 'Mozilla/5.0 chrome/33.0',
            },
        },
    };
    const featureFlagServiceSpy = jasmine.createSpyObj('FeatureFlagService', [
        'isEnvVariableEnabledCheck',
        'isEnabled',
        'isFeatureFlagReady',
        'isIA',
    ]);
    const maintenanceFlagSpy = jasmine.createSpyObj('MaintenanceFlagService', ['isMaintenanceFlagReady', 'isEnabled']);
    const policySummaryServiceSpy = jasmine.createSpyObj('PolicySummaryService', [
        'isComboIndicatorGrandProtect',
        'isPolicySourceFWS',
        'isPolicySourceForemost',
        'trackPhoneNumberEvent',
    ]);
    const policyChangeServiceSpy = jasmine.createSpyObj('PolicyChangeService', ['getStateFromPcnForArs']);
    const sessionStorageServiceSpy = jasmine.createSpyObj('SessionStorageService', ['getParsedItem', 'getItem']);

    beforeEach(() => {
        TestBed.configureTestingModule({
            declarations: [ProofOfCoverageComponent],
            imports: [RouterTestingModule],
            schemas: [CUSTOM_ELEMENTS_SCHEMA],
            providers: [
                { provide: IdCardService, useValue: idCardServiceSpy },
                { provide: MatDialog, useValue: matDialogSpy },
                { provide: StateEligibilityService, useValue: stateEligibilityServiceSpy },
                { provide: ExpansionService, useValue: expansionServiceSpy },
                { provide: SpinnerService, useValue: spinnerSpy },
                { provide: WindowService, useValue: windowServiceSpy },
                { provide: FeatureFlagService, useValue: featureFlagServiceSpy },
                { provide: MaintenanceFlagService, useValue: maintenanceFlagSpy },
                { provide: PolicySummaryService, useValue: policySummaryServiceSpy },
                { provide: PolicyChangeService, useValue: policyChangeServiceSpy },
                { provide: TuiTrackerService, useValue: tuiTrackerServiceSpy },
                { provide: ImpersonationService, useValue: impersonationServiceSpy },
                { provide: SessionStorageService, useValue: sessionStorageServiceSpy },
            ],
        });

        featureFlagServiceSpy.isFeatureFlagReady.and.returnValue(of(true));
        featureFlagServiceSpy.isEnabled.and.returnValue(true);
        featureFlagServiceSpy.isIA.and.returnValue(false);
        stateEligibilityServiceSpy.getState.and.returnValue('FL');
        expansionServiceSpy.getEasternExpansionData.and.returnValue(of(easternExpansion));
        policyChangeServiceSpy.getStateFromPcnForArs.and.returnValue(of('MI'));
        stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(true));
        featureFlagServiceSpy.isEnabled.withArgs(featureConstants.isA360IdCardEmailEnabled).and.returnValue(false);
        featureFlagServiceSpy.isEnabled.withArgs(featureConstants.isA360IdCardFaxEnabled).and.returnValue(false);
        featureFlagServiceSpy.isEnabled.withArgs(featureConstants.isA360IdCardMailEnabled).and.returnValue(false);
    });

    beforeEach(() => {
        fixture = TestBed.createComponent(ProofOfCoverageComponent);
        component = fixture.componentInstance;
        component.data = idCardsConfigurationModel;
    });

    let testNumber = 1;
    afterEach((done) => {
        runAdaTests(fixture, 'ProofOfCoverageComponent', testNumber, done);
        testNumber++;
    });

    describe('#ngOnIt', () => {
        it('should call setFWSIDCardDisplayProperties', () => {
            // Arrange
            spyOn(component, 'setFWSIDCardDisplayProperties');

            // Act
            component.ngOnInit();

            // Assert
            expect(component.setFWSIDCardDisplayProperties).toHaveBeenCalled();
        });

        it('should set shouldDisplayAppleWallet as true if enableMobileWalletsForRenewalIdCards FF is on', () => {
            // Arrange
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(true);
            featureFlagServiceSpy.isEnabled.and.returnValue(true);
            windowServiceSpy.nativeWindow.navigator.userAgent =
                'mozilla/5.0 (iphone; cpu iphone os 16_6 like mac os x) applewebkit/605.1.15 (khtml, like gecko) version/16.6 mobile/15e148 safari/604.1';
            spyOn(component, 'updateDisplayData');
            spyOn(component, 'checkIfCurrentPolicyIsExpansion');
            spyOn(component, 'checkFeatureFlags');
            spyOn(component, 'displayGoogleWallet');
            // Act
            component.ngOnInit();
            // Assert
            expect(component.updateDisplayData).toHaveBeenCalled();
            expect(component.checkIfCurrentPolicyIsExpansion).toHaveBeenCalled();
            expect(component.displayGoogleWallet).toHaveBeenCalled();
            expect(component.isIosDevice).toBe(true);
            expect(component.isIosFirefox).toBe(false);
            expect(component.shouldDisplayAppleWallet).toBe(true);
            expect(component.checkFeatureFlags).toHaveBeenCalled();
        });

        it('should set shouldDisplayAppleWallet as true,when coreIAFlagEnabled', () => {
            // Arrange
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(true);
            component.isIAEnabled = true;
            spyOn(component, 'updateDisplayData');
            spyOn(component, 'checkIfCurrentPolicyIsExpansion');
            spyOn(component, 'checkFeatureFlags');
            // Act
            component.ngOnInit();
            // Assert

            expect(component.shouldDisplayAppleWallet).toBeTruthy();
            expect(component.shouldDisplayGoogleWallet).toBeFalsy();
        });

        it('should set shouldDisplayAppleWallet as false if ios device and firefox browser', () => {
            // Arrange
            windowServiceSpy.nativeWindow.navigator.userAgent =
                'Mozilla/5.0 (iphone; cpu iphone os 16_6 like mac os x) applewebkit/605.1.15 (khtml, like gecko) version/16.6 mobile/15e148 FxiOS/33.0';
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(false);
            featureFlagServiceSpy.isEnabled.and.returnValue(true);
            spyOn(component, 'updateDisplayData');
            spyOn(component, 'checkIfCurrentPolicyIsExpansion');
            // Act
            component.ngOnInit();
            // Assert
            expect(component.updateDisplayData).toHaveBeenCalled();
            expect(component.checkIfCurrentPolicyIsExpansion).toHaveBeenCalled();
            expect(component.isIosDevice).toBe(true);
            expect(component.isIosFirefox).toBe(true);
            expect(component.shouldDisplayAppleWallet).toBe(false);
        });

        it('should set shouldDisplayAppleWallet as true if enableMobileWalletsForRenewalIdCards FF is off and is not renewal', () => {
            // Arrange
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(true);
            featureFlagServiceSpy.isEnabled.and.returnValue(false);
            windowServiceSpy.nativeWindow.navigator.userAgent =
                'mozilla/5.0 (iphone; cpu iphone os 16_6 like mac os x) applewebkit/605.1.15 (khtml, like gecko) version/16.6 mobile/15e148 safari/604.1';
            spyOn(component, 'updateDisplayData');
            spyOn(component, 'checkIfCurrentPolicyIsExpansion');
            spyOn(component, 'checkFeatureFlags');
            component.renewal = false;
            // Act
            component.ngOnInit();
            // Assert
            expect(component.updateDisplayData).toHaveBeenCalled();
            expect(component.checkIfCurrentPolicyIsExpansion).toHaveBeenCalled();
            expect(component.isIosDevice).toBe(true);
            expect(component.isIosFirefox).toBe(false);
            expect(component.shouldDisplayAppleWallet).toBe(true);
            expect(component.checkFeatureFlags).toHaveBeenCalled();
        });

        it('should call setFmUnits if isForemostPolicy is true', () => {
            // Arrange
            component.data.isForemostPolicy = true;
            spyOn(component, 'setFmUnits');

            // Act
            component.ngOnInit();

            // Assert
            expect(component.setFmUnits).toHaveBeenCalled();
        });

        it('should not call setFmUnits if isForemostPolicy is false', () => {
            // Arrange
            component.data.isForemostPolicy = false;
            spyOn(component, 'setFmUnits');

            // Act
            component.ngOnInit();

            // Assert
            expect(component.setFmUnits).not.toHaveBeenCalled();
        });

        it('should call the different checks for Google/Apple and if not FM', () => {
            spyOn(component, 'isDisplayGoogleWalletForEaFWSAuto');
            spyOn(component, 'isDisplayGoogleWalletForIaFWSAuto');
            spyOn(component, 'isDisplayAppleWalletForEaFWSAuto');
            spyOn(component, 'isDisplayAppleWalletForIaFWSAuto');
            spyOn(component, 'isDisplayAppleWalletForFM');
            spyOn(component, 'isDisplayGoogleWalletForFM');
            component.data = { isForemostPolicy: false } as any;

            component.ngOnInit();

            expect(component.isDisplayGoogleWalletForEaFWSAuto).toHaveBeenCalled();
            expect(component.isDisplayGoogleWalletForIaFWSAuto).toHaveBeenCalled();
            expect(component.isDisplayAppleWalletForEaFWSAuto).toHaveBeenCalled();
            expect(component.isDisplayAppleWalletForIaFWSAuto).toHaveBeenCalled();

            expect(component.isDisplayAppleWalletForFM).not.toHaveBeenCalled();
            expect(component.isDisplayGoogleWalletForFM).not.toHaveBeenCalled();
        });

        it('should call the different checks for Google/Apple and if FM', () => {
            spyOn(component, 'isDisplayGoogleWalletForEaFWSAuto');
            spyOn(component, 'isDisplayGoogleWalletForIaFWSAuto');
            spyOn(component, 'isDisplayAppleWalletForEaFWSAuto');
            spyOn(component, 'isDisplayAppleWalletForIaFWSAuto');
            spyOn(component, 'isDisplayAppleWalletForFM');
            spyOn(component, 'isDisplayGoogleWalletForFM');
            component.data = { isForemostPolicy: true } as any;

            component.ngOnInit();

            expect(component.isDisplayGoogleWalletForEaFWSAuto).toHaveBeenCalled();
            expect(component.isDisplayGoogleWalletForIaFWSAuto).toHaveBeenCalled();
            expect(component.isDisplayAppleWalletForEaFWSAuto).toHaveBeenCalled();
            expect(component.isDisplayAppleWalletForIaFWSAuto).toHaveBeenCalled();

            expect(component.isDisplayAppleWalletForFM).toHaveBeenCalled();
            expect(component.isDisplayGoogleWalletForFM).toHaveBeenCalled();
        });

        it('should set shouldDisplayAppleWalletForIaFWSAuto true for if all three conditions are true', () => {
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(true);
            windowServiceSpy.nativeWindow.navigator.userAgent =
                'mozilla/5.0 (iphone; cpu iphone os 16_6 like mac os x) applewebkit/605.1.15 (khtml, like gecko) version/16.6 mobile/15e148 safari/604.1';
            component.data.isActiveARSAuto = true;
            component.data.isActiveA360Auto = false;
            featureFlagServiceSpy.isIA.and.returnValue(true);
            featureFlagServiceSpy.isEnabled.and.returnValue(true);

            component.ngOnInit();

            expect(component.shouldDisplayAppleWalletForIaFWSAuto).toBe(true);
        });

        it('should set isImpersonatedUser false if user is of type customer', () => {
            impersonationServiceSpy.isUserCustomer.and.returnValue(true);

            component.ngOnInit();

            expect(component.isImpersonatedUser).toBeFalsy();
        });
    });

    describe('isDisplayGoogleWalletForEaFWSAuto', () => {
        beforeEach(() => {
            // Set defaults for this test suite's method under test
            component.shouldDisplayGoogleWallet = false;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = false;
        });

        it('should return true if shouldDisplayGoogleWallet, isFWSAuto, and isEnableFwsAndFmIdCardsForMobileWalletsEa are all true', () => {
            component.shouldDisplayGoogleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = true;

            expect(component.isDisplayGoogleWalletForEaFWSAuto()).toBe(true);
        });

        it('should return false if shouldDisplayGoogleWallet is false', () => {
            component.shouldDisplayGoogleWallet = false;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = true;

            expect(component.isDisplayGoogleWalletForEaFWSAuto()).toBe(false);
        });

        it('should return false if isFWSAuto is false', () => {
            component.shouldDisplayGoogleWallet = true;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = true;

            expect(component.isDisplayGoogleWalletForEaFWSAuto()).toBe(false);
        });

        it('should return false if isEnableFwsAndFmIdCardsForMobileWalletsEa is false', () => {
            component.shouldDisplayGoogleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = false;

            expect(component.isDisplayGoogleWalletForEaFWSAuto()).toBe(false);
        });
    });

    describe('isDisplayGoogleWalletForIaFWSAuto', () => {
        beforeEach(() => {
            component.shouldDisplayGoogleWallet = false;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = false;
        });

        it('should return true if shouldDisplayGoogleWallet, isFWSAuto, and isEnableFwsAndFmIdCardsForMobileWalletsIa are all true', () => {
            component.shouldDisplayGoogleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = true;

            expect(component.isDisplayGoogleWalletForIaFWSAuto()).toBe(true);
        });

        it('should return false if shouldDisplayGoogleWallet is false', () => {
            component.shouldDisplayGoogleWallet = false;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = true;

            expect(component.isDisplayGoogleWalletForIaFWSAuto()).toBe(false);
        });

        it('should return false if isFWSAuto is false', () => {
            component.shouldDisplayGoogleWallet = true;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = true;

            expect(component.isDisplayGoogleWalletForIaFWSAuto()).toBe(false);
        });

        it('should return false if isEnableFwsAndFmIdCardsForMobileWalletsIa is false', () => {
            component.shouldDisplayGoogleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = false;

            expect(component.isDisplayGoogleWalletForIaFWSAuto()).toBe(false);
        });
    });

    describe('isDisplayAppleWalletForEaFWSAuto', () => {
        beforeEach(() => {
            component.shouldDisplayAppleWallet = false;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = false;
        });

        it('should return true if shouldDisplayAppleWallet, isFWSAuto, and isEnableFwsAndFmIdCardsForMobileWalletsEa are all true', () => {
            component.shouldDisplayAppleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = true;

            expect(component.isDisplayAppleWalletForEaFWSAuto()).toBe(true);
        });

        it('should return false if shouldDisplayAppleWallet is false', () => {
            component.shouldDisplayAppleWallet = false;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = true;

            expect(component.isDisplayAppleWalletForEaFWSAuto()).toBe(false);
        });

        it('should return false if isFWSAuto is false', () => {
            component.shouldDisplayAppleWallet = true;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = true;

            expect(component.isDisplayAppleWalletForEaFWSAuto()).toBe(false);
        });

        it('should return false if isEnableFwsAndFmIdCardsForMobileWalletsEa is false', () => {
            component.shouldDisplayAppleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsEa = false;

            expect(component.isDisplayAppleWalletForEaFWSAuto()).toBe(false);
        });
    });

    describe('isDisplayAppleWalletForIaFWSAuto', () => {
        beforeEach(() => {
            component.shouldDisplayAppleWallet = false;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = false;
        });

        it('should return true if shouldDisplayAppleWallet, isFWSAuto, and isEnableFwsAndFmIdCardsForMobileWalletsIa are all true', () => {
            component.shouldDisplayAppleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = true;

            expect(component.isDisplayAppleWalletForIaFWSAuto()).toBe(true);
        });

        it('should return false if shouldDisplayAppleWallet is false', () => {
            component.shouldDisplayAppleWallet = false;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = true;

            expect(component.isDisplayAppleWalletForIaFWSAuto()).toBe(false);
        });

        it('should return false if isFWSAuto is false', () => {
            component.shouldDisplayAppleWallet = true;
            component.isFWSAuto = false;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = true;

            expect(component.isDisplayAppleWalletForIaFWSAuto()).toBe(false);
        });

        it('should return false if isEnableFwsAndFmIdCardsForMobileWalletsIa is false', () => {
            component.shouldDisplayAppleWallet = true;
            component.isFWSAuto = true;
            component.isEnableFwsAndFmIdCardsForMobileWalletsIa = false;

            expect(component.isDisplayAppleWalletForIaFWSAuto()).toBe(false);
        });
    });

    describe('isDisplayAppleWalletForFM', () => {
        beforeEach(() => {
            component.shouldDisplayAppleWallet = false;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(false);
        });

        it('should return true if shouldDisplayAppleWallet is true and enableFmPolicyDetails feature flag is enabled', () => {
            component.shouldDisplayAppleWallet = true;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(true);
            expect(component.isDisplayAppleWalletForFM()).toBe(true);
        });

        it('should return false if shouldDisplayAppleWallet is false', () => {
            component.shouldDisplayAppleWallet = false;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(true);
            expect(component.isDisplayAppleWalletForFM()).toBe(false);
        });

        it('should return false if enableFmPolicyDetails feature flag is disabled', () => {
            component.shouldDisplayAppleWallet = true;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(false);

            expect(component.isDisplayAppleWalletForFM()).toBe(false);
        });
    });

    describe('isDisplayGoogleWalletForFM', () => {
        beforeEach(() => {
            component.shouldDisplayGoogleWallet = false;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(false);
        });

        it('should return true if shouldDisplayGoogleWallet is true and enableFmPolicyDetails feature flag is enabled', () => {
            component.shouldDisplayGoogleWallet = true;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(true);

            expect(component.isDisplayGoogleWalletForFM()).toBe(true);
        });

        it('should return false if shouldDisplayGoogleWallet is false', () => {
            component.shouldDisplayGoogleWallet = false;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(true);

            expect(component.isDisplayGoogleWalletForFM()).toBe(false);
        });

        it('should return false if enableFmPolicyDetails feature flag is disabled', () => {
            component.shouldDisplayGoogleWallet = true;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(false);

            expect(component.isDisplayGoogleWalletForFM()).toBe(false);
        });
    });

    describe('#getPolicySource', () => {
        it('should return fm policy source for foremost', () => {
            const data = {
                ...component.data,
                policySource: 'fm',
                policyType: 'AUTO',
                isForemostPolicy: true,
                isBWPolicy: false,
            };

            const result = component.getPolicySource(data);

            expect(result).toEqual('fm');
        });

        it('should return bw policy source for bristol west', () => {
            const data = {
                ...component.data,
                policySource: '',
                policyType: 'AUTO',
                isForemostPolicy: false,
                isBWPolicy: true,
            };

            const result = component.getPolicySource(data);

            expect(result).toEqual('bw');
        });

        it('should return fm policy source for foremost policy', () => {
            const data = {
                ...component.data,
                policySource: null,
                policyType: 'AUTO',
                isForemostPolicy: true,
                isBWPolicy: false,
            };

            const result = component.getPolicySource(data);

            expect(result).toEqual('fm');
        });

        it('should return foremost policy source for foremost policy', () => {
            const data = {
                ...component.data,
                policySource: 'Foremost',
                policyType: 'AUTO',
                isForemostPolicy: true,
                isBWPolicy: false,
            };

            const result = component.getPolicySource(data);

            expect(result).toEqual('Foremost');
        });

        it('should return policy source for PLA', () => {
            const data = {
                ...component.data,
                policySource: 'PLA',
                policyType: 'AUTO',
                isForemostPolicy: false,
                isBWPolicy: false,
            };

            const result = component.getPolicySource(data);

            expect(result).toEqual('PLA');
        });

        it('should handle null policy data', () => {
            const result = component.getPolicySource(null);

            expect(result).toEqual(undefined);
        });
    });

    describe('#setFmUnits', () => {
        beforeEach(() => {
            component.data.units = [
                {
                    ymm: 'xyz',
                    vin: 'v123',
                    link: 'url',
                    renewlink: 'renewalink',
                    encryptedDocumentId: 'encryptedDocumentId',
                    renewalEncryptedDocumentId: 'renewalEncryptedDocumentId',
                },
            ];
        });

        it('should set fm units when renewal flag is false', () => {
            component.renewal = false;

            component.setFmUnits();

            expect(component.data.units).toEqual([
                {
                    ymm: 'xyz',
                    vin: 'v123',
                    link: 'url',
                    encryptedDocumentId: 'encryptedDocumentId',
                    renewlink: 'renewalink',
                    renewalEncryptedDocumentId: 'renewalEncryptedDocumentId',
                },
            ]);
        });

        it('should set fm units when renewal flag is true', () => {
            component.renewal = true;

            component.setFmUnits();

            expect(component.data.units).toEqual([
                {
                    ymm: 'xyz',
                    vin: 'v123',
                    link: 'renewalink',
                    encryptedDocumentId: 'renewalEncryptedDocumentId',
                    renewlink: 'renewalink',
                    renewalEncryptedDocumentId: 'renewalEncryptedDocumentId',
                },
            ]);
        });
    });

    describe('#setFWSIDCardDisplayProperties', () => {
        it('should set isShowExpirationDate, isActiveARSOrA360Auto and isNOtActiveARSAndA30Auto', () => {
            // Arrange
            component.data = {
                ...component.data,
                expirationDate: '12/12/2020',
                isActiveA360Auto: true,
                isActiveARSAuto: false,
                isFedPolicy: false,
            };

            // Act
            component.setFWSIDCardDisplayProperties();

            // Assert
            expect(component.isShowExpirationDate).toBe(false);
            expect(component.hasActiveARSOrA360Auto).toBe(true);
            expect(component.hasNoActiveARSAndA360Auto).toBe(false);
            expect(component.isA360FedPolicy).toBe(false);

            // Arrange
            component.data = {
                ...component.data,
                expirationDate: '',
                isActiveA360Auto: false,
                isActiveARSAuto: false,
                isFedPolicy: false,
            };

            // Act
            component.setFWSIDCardDisplayProperties();

            // Assert
            expect(component.isShowExpirationDate).toBe(false);
            expect(component.hasActiveARSOrA360Auto).toBe(false);
            expect(component.hasNoActiveARSAndA360Auto).toBe(true);
            expect(component.isA360FedPolicy).toBe(false);

            // Arrange
            component.data = {
                ...component.data,
                expirationDate: '',
                isActiveA360Auto: true,
                isActiveARSAuto: false,
                isFedPolicy: true,
            };

            // Act
            component.setFWSIDCardDisplayProperties();

            // Assert
            expect(component.isA360FedPolicy).toBe(true);
        });
    });

    describe('current ProofOfCoverageComponent', () => {
        beforeEach(() => {
            fixture = TestBed.createComponent(ProofOfCoverageComponent);
            component = fixture.componentInstance;
            element = fixture.nativeElement;
            component.renewal = false;
            component.data = idCardsConfigurationModel;
            fixture.detectChanges();
        });

        describe('#openDialog', () => {
            it('should trigger openDialog with the right type when clicking in print idCard', () => {
                // Arrange
                const openDialogSpy = spyOn(component, 'openDialog');
                // Act
                element.querySelector('button.mail').click();
                // Assert
                expect(openDialogSpy).toHaveBeenCalledWith('mail');
            });

            it('should trigger openDialog with the right type when clicking in print idCard', () => {
                // Arrange
                const openDialogSpy = spyOn(component, 'openDialog');
                // Act
                element.querySelector('button.fax').click();
                // Assert
                expect(openDialogSpy).toHaveBeenCalledWith('fax');
            });

            it('should trigger openDialog with the right type when clicking in email idCard', () => {
                // Arrange
                const openDialogSpy = spyOn(component, 'openDialog');
                // Act
                element.querySelector('button.email').click();
                // Assert
                expect(openDialogSpy).toHaveBeenCalledWith('email');
            });

            it('should call dialogService with the right data for fax', () => {
                // Arrange
                const dialogData = {
                    maxWidth: component.data.dialogData.width,
                    data: component.data.dialogData.fax,
                    width: '92vw',
                    maxHeight: '92vh',
                    height: 'auto',
                };
                const matDialogRef = { afterClosed: () => new Observable() };
                matDialogSpy.open.and.returnValue(matDialogRef);
                // Act
                component.openDialog(DialogTypes.FAX);
                // Assert
                expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
            });

            it('should call dialogService with the right data for mail', () => {
                // Arrange
                const dialogData = {
                    maxWidth: component.data.dialogData.width,
                    data: component.data.dialogData.mail,
                    width: '92vw',
                    maxHeight: '92vh',
                    height: 'auto',
                };
                const matDialogRef = { afterClosed: () => new Observable() };
                matDialogSpy.open.and.returnValue(matDialogRef);
                // Act
                component.openDialog(DialogTypes.MAIL);
                // Assert
                expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
            });

            it('should call dialogService with the right data for email', () => {
                // Arrange
                const dialogData = {
                    maxWidth: component.data.dialogData.width,
                    data: component.data.dialogData.email,
                    width: '92vw',
                    maxHeight: '92vh',
                    height: 'auto',
                };
                const matDialogRef = { afterClosed: () => new Observable() };
                matDialogSpy.open.and.returnValue(matDialogRef);
                // Act
                component.openDialog(DialogTypes.EMAIL);
                // Assert
                expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
            });

            it('should call dialogService with the right data for nJDialog', () => {
                // Arrange
                const dialogData = {
                    maxWidth: component.data.dialogData.width,
                    data: component.data.nJDialog.data,
                    width: '92vw',
                    maxHeight: '92vh',
                    height: 'auto',
                };
                const matDialogRef = { afterClosed: () => new Observable() };
                matDialogSpy.open.and.returnValue(matDialogRef);
                // Act
                component.openDialog(DialogTypes.NJDIALOG);
                // Assert
                expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
            });

            it('should send mail id card request', () => {
                // Arrange
                const matDialogRef = { afterClosed: () => of('') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                component.data.isForemostPolicy = false;
                component.data.isBWPolicy = false;
                component.data.policyType = 'Auto';
                component.data.policySource = 'PLA';
                component.data.policyContractNumber = '0234565';
                spyOn(component, 'getIdCardsDocumentId').and.returnValue('encrypted link');
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardMail);
                const trackParams = {
                    eventName: eventNames.idCardMail,
                    policyType: 'Auto',
                    policySource: 'PLA',
                };
                // Act
                element.querySelector('button.mail').click();
                // Assert
                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    '',
                    DialogTypes.MAIL,
                    'encrypted link',
                    trackParams,
                    null,
                    component.data,
                );
            });

            it('should send email id card request', () => {
                // Arrange
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    isBWPolicy: false,
                    isForemostPolicy: false,
                    policyContractNumber: '0234565',
                    policySource: 'PLA',
                    policyType: 'Auto',
                };
                component.data = idCardsConfigMockData;
                const segmentParams = {
                    policy_number: '0234565',
                    policy_source: 'PLA',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                component.renewal = true;
                spyOn(component, 'getIdCardsDocumentId').and.returnValue('encryptedLargeIdCardDocumentId');
                spyOn(component, 'getSegmentParamsForEmail').and.returnValue(segmentParams);
                const matDialogRef = { afterClosed: () => of('') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardEmail);
                const trackParams = {
                    eventName: eventNames.idCardEmail,
                    policyType: 'Auto',
                    policySource: 'PLA',
                };
                // Act
                element.querySelector('button.email').click();
                // Assert
                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    '',
                    DialogTypes.EMAIL,
                    'encryptedLargeIdCardDocumentId',
                    trackParams,
                    segmentParams,
                    component.data,
                );
                expect(component.getSegmentParamsForEmail).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                );
                expect(component.getIdCardsDocumentId).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                    true,
                );
            });

            it('should not call sendIdCard service method if input value is undefined', () => {
                // Arrange
                const matDialogRef = { afterClosed: () => of(undefined) };
                matDialogSpy.open.and.returnValue(matDialogRef);
                idCardServiceSpy.sendIdCard.calls.reset();
                element.querySelector('button.fax').click();
                // Assert
                expect(idCardServiceSpy.sendIdCard).not.toHaveBeenCalled();
            });

            it('should call sendIdCard service method with id card link for FM policies', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    isBWPolicy: false,
                    isForemostPolicy: true,
                    policyContractNumber: '0234565',
                    policySource: 'fm',
                };
                component.data = idCardsConfigMockData;
                const segmentParams = {
                    policy_number: '0234565',
                    policy_source: 'fm',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getSegmentParamsForEmail').and.returnValue(segmentParams);
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardEmail);
                const trackParams = {
                    eventName: eventNames.idCardEmail,
                    policyType: 'Auto',
                    policySource: 'fm',
                };
                const matDialogRef = { afterClosed: () => of('test@1234.com') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                idCardServiceSpy.sendIdCard.calls.reset();

                component.openDialog(DialogTypes.EMAIL, '', 'test');

                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    'test@1234.com',
                    DialogTypes.EMAIL,
                    'test',
                    trackParams,
                    segmentParams,
                );
                expect(component.getSegmentParamsForEmail).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                );
            });

            it('should call sendIdCard service method with id card link for Foremost policies', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    isBWPolicy: false,
                    isForemostPolicy: true,
                    policyContractNumber: '0234565',
                    policySource: 'Foremost',
                };
                component.data = idCardsConfigMockData;
                const segmentParams = {
                    policy_number: '0234565',
                    policy_source: 'Foremost',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getSegmentParamsForEmail').and.returnValue(segmentParams);
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardEmail);
                const trackParams = {
                    eventName: eventNames.idCardEmail,
                    policyType: 'Auto',
                    policySource: 'Foremost',
                };
                const matDialogRef = { afterClosed: () => of('test@1234.com') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                idCardServiceSpy.sendIdCard.calls.reset();

                component.openDialog(DialogTypes.EMAIL, '', 'test');

                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    'test@1234.com',
                    DialogTypes.EMAIL,
                    'test',
                    trackParams,
                    segmentParams,
                );
                expect(component.getSegmentParamsForEmail).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                );
            });

            it('should call sendIdCard service method with id card link for BW policies', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    isBWPolicy: true,
                    isForemostPolicy: false,
                    policyContractNumber: '0234565',
                    policySource: 'bw',
                };
                component.data = idCardsConfigMockData;
                const segmentParams = {
                    policy_number: '0234565',
                    policy_source: 'bw',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getSegmentParamsForEmail').and.returnValue(segmentParams);
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardMail);
                const trackParams = {
                    eventName: eventNames.idCardMail,
                    policyType: 'Auto',
                    policySource: 'bw',
                };
                const matDialogRef = { afterClosed: () => of('test@1234.com') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                idCardServiceSpy.sendIdCard.calls.reset();

                component.openDialog(DialogTypes.EMAIL, '', 'test');

                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    'test@1234.com',
                    DialogTypes.EMAIL,
                    'test',
                    trackParams,
                    segmentParams,
                );
                expect(component.getSegmentParamsForEmail).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                );
            });

            it('should call sendIdCard service method with id card link for FWS-A360 policies', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    lineOfBusiness: 'Auto',
                    isActiveA360Auto: true,
                    isActiveARSAuto: false,
                    isFWSPolicy: true,
                    isForemostPolicy: false,
                    policyContractNumber: '12345',
                    policySource: 'FWS-A360',
                };
                component.data = idCardsConfigMockData;
                const segmentParams = {
                    policy_number: '12345',
                    policy_source: 'FWS-A360',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getSegmentParamsForEmail').and.returnValue(segmentParams);
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardEmail);
                const trackParams = {
                    eventName: eventNames.idCardEmail,
                    policyType: 'Auto',
                    policySource: 'FWS-A360',
                };
                const matDialogRef = { afterClosed: () => of('test@1234.com') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                idCardServiceSpy.sendIdCard.calls.reset();

                component.openDialog(DialogTypes.EMAIL, '', 'test');

                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    'test@1234.com',
                    DialogTypes.EMAIL,
                    'encryptedLargeIdCardDocumentId',
                    trackParams,
                    segmentParams,
                    component.data,
                );
                expect(component.getSegmentParamsForEmail).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                );
            });

            it('should call sendIdCard service method with id card link for FWS-ARS policies', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    lineOfBusiness: 'Auto',
                    isActiveA360Auto: false,
                    isActiveARSAuto: true,
                    isFWSPolicy: true,
                    isForemostPolicy: false,
                    policyContractNumber: '12345',
                    policySource: undefined,
                };
                component.data = idCardsConfigMockData;
                const segmentParams = {
                    policy_number: '12345',
                    policy_source: 'FWS-ARS',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getSegmentParamsForEmail').and.returnValue(segmentParams);
                spyOn(component, 'getIdCardEventName').and.returnValue(eventNames.idCardEmail);
                const trackParams = {
                    eventName: eventNames.idCardEmail,
                    policyType: 'Auto',
                    policySource: 'FWS-ARS',
                };
                const matDialogRef = { afterClosed: () => of('test@1234.com') };
                matDialogSpy.open.and.returnValue(matDialogRef);
                idCardServiceSpy.sendIdCard.calls.reset();

                component.openDialog(DialogTypes.EMAIL, '', 'test');

                expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
                    'test@1234.com',
                    DialogTypes.EMAIL,
                    'encryptedLargeIdCardDocumentId',
                    trackParams,
                    segmentParams,
                    component.data,
                );
                expect(component.getSegmentParamsForEmail).toHaveBeenCalledWith(
                    DialogTypes.EMAIL,
                    idCardsConfigMockData,
                );
                expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                    future_dated_vehicle: false,
                });
            });

            it('should call add to state for future ID card display data', () => {
                component.isFutureIdCard = true;
                tuiTrackerServiceSpy.addToState.calls.reset();

                component.openDialog(DialogTypes.EMAIL, '', 'test');

                expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                    future_dated_vehicle: true,
                });
            });
        });

        describe('#getIdCardsDocumentId', () => {
            it('should return document id for mail for current id card', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    cardLink: {
                        small: 'smallLink',
                        large: 'largeLink',
                        encrypted: 'encrypted link',
                    },
                    renewalIDCards: {
                        small: 'renewal_smallLink',
                        large: 'renewal_largeLink',
                        encrypted: null,
                    },
                };
                const documentId = component.getIdCardsDocumentId(DialogTypes.MAIL, idCardsConfigMockData, false);

                expect(documentId).toEqual('encrypted link');
            });

            it('should return document id for mail for renewal id card', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    cardLink: {
                        small: 'smallLink',
                        large: 'largeLink',
                        encrypted: 'encrypted link',
                    },
                    renewalIDCards: {
                        small: 'renewal_smallLink',
                        large: 'renewal_largeLink',
                        encrypted: null,
                        encryptedLargeIdCardDocumentId: 'encrypted_LargeDocument_Id',
                    },
                };
                const documentId = component.getIdCardsDocumentId(DialogTypes.MAIL, idCardsConfigMockData, true);

                expect(documentId).toEqual('encrypted_LargeDocument_Id');
            });

            it('should return document id for Email current policy', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    cardLink: {
                        small: 'smallLink',
                        large: 'largeLink',
                        encrypted: 'encrypted link',
                        encryptedLargeIdCardDocumentId: 'current encryptedLargeIdCardDocumentId',
                    },
                    renewalIDCards: {
                        small: 'renewal_smallLink',
                        large: 'renewal_largeLink',
                        encrypted: null,
                        encryptedLargeIdCardDocumentId: 'renewal encryptedLargeIdCardDocumentId',
                    },
                };
                const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, idCardsConfigMockData, false);

                expect(documentId).toEqual('current encryptedLargeIdCardDocumentId');
            });

            it('should return document id for Email renewal policy', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    cardLink: {
                        small: 'smallLink',
                        large: 'largeLink',
                        encrypted: 'encrypted link',
                        encryptedLargeIdCardDocumentId: 'current encryptedLargeIdCardDocumentId',
                    },
                    renewalIDCards: {
                        small: 'renewal_smallLink',
                        large: 'renewal_largeLink',
                        encrypted: null,
                        encryptedLargeIdCardDocumentId: 'renewal encryptedLargeIdCardDocumentId',
                    },
                };
                const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, idCardsConfigMockData, true);

                expect(documentId).toEqual('renewal encryptedLargeIdCardDocumentId');
            });

            it('should handle empty data scenario', () => {
                const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, {} as any, true);

                expect(documentId).toEqual(undefined);
            });

            it('should handle null scenario', () => {
                const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, null, true);

                expect(documentId).toEqual('');
            });
        });

        describe('#getSegmentParamsForEmail', () => {
            it('should return null if not email id card', () => {
                const result = component.getSegmentParamsForEmail(DialogTypes.MAIL, idCardsConfigurationModel);

                expect(result).toEqual(null);
            });

            it('should get segment parameters for email id card', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    policyContractNumber: '12345',
                    policySource: 'GWPC',
                    isForemostPolicy: false,
                    isBWPolicy: false,
                };
                const segmentDataForEmail = {
                    policy_number: '12345',
                    policy_source: 'GWPC',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };

                spyOn(component, 'getPolicySource').and.returnValue('GWPC');

                const result = component.getSegmentParamsForEmail(DialogTypes.EMAIL, idCardsConfigMockData);

                expect(result).toEqual(segmentDataForEmail);
            });

            it('should get segment parameters for email id card fm policy', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    policyContractNumber: '12345',
                    policySource: '',
                    isForemostPolicy: true,
                    isBWPolicy: false,
                };
                const segmentDataForEmail = {
                    policy_number: '12345',
                    policy_source: 'fm',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getPolicySource').and.returnValue('fm');

                const result = component.getSegmentParamsForEmail(DialogTypes.EMAIL, idCardsConfigMockData);

                expect(result).toEqual(segmentDataForEmail);
            });

            it('should get segment parameters for email id card bw policy', () => {
                const idCardsConfigMockData = {
                    ...idCardsConfigurationModel,
                    policyContractNumber: '12345',
                    policySource: '',
                    isForemostPolicy: false,
                    isBWPolicy: true,
                };
                const segmentDataForEmail = {
                    policy_number: '12345',
                    policy_source: 'bw',
                    action: 'Send Email',
                    dialog_name: eventNames.idCardEmail,
                    output: 'Email',
                    step: 'ID Cards',
                };
                spyOn(component, 'getPolicySource').and.returnValue('bw');

                const result = component.getSegmentParamsForEmail(DialogTypes.EMAIL, idCardsConfigMockData);

                expect(result).toEqual(segmentDataForEmail);
            });
        });

        describe('#updateDisplayData', () => {
            it('should set showButtons to false if there are no links', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                component.data.isFwsArsEnterpriseSearchEnabled = true;
                const expectedTitle = 'ID cards';
                spyOn(component, 'setFWSIDCardDisplayProperties');
                fixture.detectChanges();

                // Act
                component.updateDisplayData();

                // Assert
                expect(component.showButtons).toBe(false);
                expect(component.showAgentMessage).toBe(true);
                expect(component.setFWSIDCardDisplayProperties).toHaveBeenCalled();
                expect(component.disableDownloadIdCardsButton).toBeTruthy();
                expect(component.viewOrDownloadIdCardAriaLabel).toBe('Disabled');
                expect(component.idCardTitle).toBe(expectedTitle);
            });
            it('should set idCardTitle to id card if subjectOfInsurance/units length < 1', () => {
                // Arrange
                component.data = { ...idCardsConfigurationModelNoImages, subjectOfInsurance: [] };
                component.data.isFwsArsEnterpriseSearchEnabled = true;
                const expectedTitle = 'ID card';
                fixture.detectChanges();

                component.updateDisplayData();

                expect(component.idCardTitle).toBe(expectedTitle);
            });

            it('should set idCardTitle to id card if units length > 1', () => {
                // Arrange
                component.data = {
                    ...idCardsConfigurationModelNoImages,
                    subjectOfInsurance: [],
                    units: [
                        { ymm: 'xyz', vin: 'v123', link: 'url' },
                        { ymm: 'abc', vin: 'v143', link: 'url' },
                    ],
                };
                component.data.isFwsArsEnterpriseSearchEnabled = true;
                const expectedTitle = 'ID cards';
                fixture.detectChanges();

                component.updateDisplayData();

                expect(component.idCardTitle).toBe(expectedTitle);
            });
            it('should set idCardTitle to id card if selectedpolicy soi length > 1', () => {
                // Arrange
                component.data = {
                    ...idCardsConfigurationModelNoImages,
                    subjectOfInsurance: [],
                    units: [],
                    selectedPolicy: {
                        policyNumber: '12345',
                        policyContractNumber: 'A12345',
                        lineOfBusiness: 'Auto',
                        subjectOfInsurance: [
                            {
                                vehicleYear: '2000',
                                vehicleModel: 'Tesla ModelX 2020',
                                vehicleMake: 'abc',
                            },
                            {
                                vehicleYear: '2001',
                                vehicleModel: 'Ford ModelX 2021',
                                vehicleMake: 'abc',
                            },
                        ],
                    },
                };
                component.data.isFwsArsEnterpriseSearchEnabled = true;
                const expectedTitle = 'ID cards';
                fixture.detectChanges();

                component.updateDisplayData();

                expect(component.idCardTitle).toBe(expectedTitle);
            });

            it('should set disableDownloadIdCardsButton to false when fws ars is not under maintenance', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                component.data.isFwsArsEnterpriseSearchEnabled = false;
                spyOn(component, 'setFWSIDCardDisplayProperties');
                fixture.detectChanges();

                // Act
                component.updateDisplayData();

                // Assert
                expect(component.setFWSIDCardDisplayProperties).toHaveBeenCalled();
                expect(component.disableDownloadIdCardsButton).toBe(false);
                expect(component.viewOrDownloadIdCardAriaLabel).toBe('Opens in new tab');
            });

            it('should set shouldRenderEvidenceOfInsurance to false if it is a florida policy', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                fixture.detectChanges();

                // Act
                component.updateDisplayData();

                // Assert
                expect(component.shouldRenderEvidenceOfInsurance).toBe(false);
            });

            it('should set shouldRenderEvidenceOfInsurance to true if it is not a florida policy', () => {
                // Arrange
                component.isFloridaPolicy = false;
                component.data = idCardsConfigurationModelNoImages;
                component.data.cardLink = {
                    small: 'smallLink',
                    large: 'largeLink',
                    encrypted: 'encryptedLink',
                };
                fixture.detectChanges();

                // Act
                component.updateDisplayData();

                // Assert
                expect(component.shouldRenderEvidenceOfInsurance).toBe(true);
            });

            it('should set showAgentMessage to false if policy is not PLA or GWPC', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                component.data.isBWPolicy = true;
                fixture.detectChanges();
                // Act
                component.updateDisplayData();
                // Assert
                expect(component.showAgentMessage).toBe(false);
            });

            it('should set fmBwIdCardDocumentText to PAPER SIZE, if it is not a foremost policy', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                component.data.isBWPolicy = true;
                component.data.isForemostPolicy = false;
                fixture.detectChanges();
                // Act
                component.updateDisplayData();
                // Assert
                expect(component.fmBwIdCardDocumentText).toEqual('PAPER SIZE');
                expect(component.fmBwIdCardDocumentTextAriaLabel).toEqual('paper size');
            });

            it('should set fmBwIdCardDocumentText to DOWNLOAD/VIEW, if it is a foremost policy', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                component.data.isBWPolicy = false;
                component.data.isForemostPolicy = true;
                fixture.detectChanges();
                // Act
                component.updateDisplayData();
                // Assert
                expect(component.fmBwIdCardDocumentText).toEqual('DOWNLOAD/VIEW');
                expect(component.fmBwIdCardDocumentTextAriaLabel).toEqual('download or view');
                expect(component.coverageTypeAriaLabel).toEqual('current proof of coverage');
                expect(component.cardType).toEqual('Current');
            });

            it('should form the right data if renewal is passed', () => {
                // Arrange
                const renewalSubjectOfInsurance = [
                    {
                        id: 'testId',
                        vin: 'testVIN',
                        ymm: 'non owner',
                        evidenceOfInsuranceLink: 'evidenceOfInsuranceLink',
                        renewalEvidenceOfInsuranceLink: 'renewalEvidenceOfInsuranceLink',
                        vehicleAddedDate: '2024-06-26',
                    },
                ];
                spyOn(component, 'checkFeatureFlags');
                component.data = { ...idCardsConfigurationModelRenewal, renewalSubjectOfInsurance };
                component.renewal = true;
                fixture.detectChanges();
                // Act
                component.ngOnChanges();
                // Assert
                expect(component.subtitle).toBe('Renewal');
                expect(component.showButtons).toBe(true);
                expect(component.effectiveDate).toBe('date for renewal effective');
                expect(component.expirationDate).toBe('date for renewal expiration');
                expect(component.shouldRenderEvidenceOfInsurance).toBe(false);
                expect(component.smallCardLink).toBe('renewal_smallLink');
                expect(component.largeCardLink).toBe('renewal_largeLink');
                expect(component.showFaxIdCard).toBe(true);
                expect(component.showMailIdCard).toBe(true);
                expect(component.showAgentMessage).toBe(false);
                expect(component.checkFeatureFlags).toHaveBeenCalled();
                expect(component.coverageTypeAriaLabel).toEqual('renewal proof of coverage');
                expect(component.cardType).toEqual('Renewal');
                expect(component.subjectOfInsurance).toEqual(renewalSubjectOfInsurance);
            });

            it('should not update renewalSubjectOfInsurance for non-auto renewal policy', () => {
                // Arrange
                const renewalSubjectOfInsurance = [
                    {
                        id: 'testId',
                        vin: 'testVIN',
                        ymm: 'non owner',
                        evidenceOfInsuranceLink: 'evidenceOfInsuranceLink',
                        renewalEvidenceOfInsuranceLink: 'renewalEvidenceOfInsuranceLink',
                        vehicleAddedDate: '2024-06-26',
                    },
                ];
                spyOn(component, 'checkFeatureFlags');
                component.data = {
                    ...idCardsConfigurationModelRenewal,
                    ...{
                        isAutoPolicy: false,
                        renewalSubjectOfInsurance,
                    },
                };
                component.renewal = true;
                fixture.detectChanges();
                // Act
                component.ngOnChanges();
                // Assert
                expect(component.subjectOfInsurance).toEqual([]);
            });

            it('should not update renewalSubjectOfInsurance if renewalSubjectOfInsurance is empty', () => {
                // Arrange
                spyOn(component, 'checkFeatureFlags');
                component.data = {
                    ...idCardsConfigurationModelRenewal,
                    ...{
                        isAutoPolicy: false,
                        renewalSubjectOfInsurance: [],
                    },
                };
                component.renewal = true;
                fixture.detectChanges();
                // Act
                component.ngOnChanges();
                // Assert
                expect(component.subjectOfInsurance).toEqual([]);
            });

            it('should not show fax, mail options if expansion policy', () => {
                // Arrange
                spyOn(component, 'checkFeatureFlags');
                component.data = idCardsConfigurationModelRenewal;
                component.isExpansionState = true;
                fixture.detectChanges();
                // Act
                component.ngOnChanges();
                // Assert
                expect(component.showFaxIdCard).toBe(false);
                expect(component.showMailIdCard).toBe(false);
                expect(component.showEmailIdCard).toBe(true);
                expect(component.checkFeatureFlags).toHaveBeenCalled();
                expect(component.subjectOfInsurance).toEqual([]);
            });

            it('should set id card availability boolean to true if florida state policy', () => {
                // Arrange
                spyOn(component, 'checkFeatureFlags');
                component.data = idCardsConfigurationModelRenewal;
                component.isFloridaPolicy = true;
                fixture.detectChanges();
                // Act
                component.ngOnChanges();
                // Assert
                expect(component.isIdCardAvailable).toBe(true);
                expect(component.checkFeatureFlags).toHaveBeenCalled();
            });

            it('should set id card availability boolean to true if expansion state policy', () => {
                // Arrange
                spyOn(component, 'checkFeatureFlags');
                component.data = idCardsConfigurationModelRenewal;
                component.isExpansionState = true;
                fixture.detectChanges();
                // Act
                component.ngOnChanges();
                // Assert
                expect(component.isIdCardAvailable).toBe(true);
                expect(component.checkFeatureFlags).toHaveBeenCalled();
            });

            it('should call add to state', () => {
                // Arrange
                component.data = {
                    ...component.data,
                    expirationDate: '12/12/2020',
                    isActiveA360Auto: true,
                    isActiveARSAuto: false,
                    isFedPolicy: false,
                    policyContractNumber: '123',
                    policySource: 'PLA',
                    policyType: 'AUTO',
                };
                spyOn(component, 'getPolicySource').and.returnValue('PLA');
                spyOn(component, 'checkFeatureFlags');
                // Act
                component.ngOnChanges();

                // Assert
                expect(component.checkFeatureFlags).toHaveBeenCalled();
                expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                    policy_number: '123',
                    policy_source: 'PLA',
                    description: 'AUTO',
                });
            });
            it('should set future ID card display data', () => {
                // Arrange
                component.data = idCardsConfigurationModelNoImages;
                component.isFutureIdCard = true;
                component.futureIdCard = futureIdCards;
                fixture.detectChanges();
                spyOn(component, 'updateFutureIdCardDisplayData');

                // Act
                component.updateDisplayData();

                // Assert
                expect(component.updateFutureIdCardDisplayData).toHaveBeenCalled();
            });
        });

        describe('#updateFutureIdCardDisplayData', () => {
            beforeEach(() => {
                component.data = {
                    showFaxIdCard: true,
                    showMailIdCard: false,
                    showEmailIdCard: true,
                    expirationDate: '2025-01-01',
                    selectedPolicy: { futureSubjectOfInsurance: [{}, {}] },
                } as any;
                component.futureIdCard = {
                    effectiveDate: '2024-12-01',
                    smallIDCard: 'small-link',
                    largeIDCard: 'large-link',
                    subjectOfInsurance: [{}, {}],
                } as any;
            });

            it('should set display fields for future id card', () => {
                component.isFloridaPolicy = false;
                component.isExpansionState = false;

                component.updateFutureIdCardDisplayData();

                expect(component.isIdCardAvailable).toBe(false);
                expect(component.showButtons).toBe(true);
                expect(component.subtitle).toBe(ID_CARD_CONST.proofOfCoverageSubtitle.current);
                expect(component.effectiveDate).toBe('2024-12-01');
                expect(component.expirationDate).toBe('2025-01-01');
                expect(component.shouldRenderEvidenceOfInsurance).toBe(true);
                expect(component.smallCardLink).toBe('small-link');
                expect(component.largeCardLink).toBe('large-link');
                expect(component.showFaxIdCard).toBe(true);
                expect(component.showMailIdCard).toBe(false);
                expect(component.showEmailIdCard).toBe(true);
                expect(component.viewOrDownloadIdCardAriaLabel).toBe(component.NEW_TAB);
                expect(component.showAgentMessage).toBe(false);
                expect(component.idCardTitle).toBe('ID cards');
            });

            it('should set display fields for future id card with all CTA', () => {
                component.isFloridaPolicy = false;
                component.isExpansionState = false;
                component.data = {
                    showFaxIdCard: true,
                    showMailIdCard: true,
                    showEmailIdCard: true,
                    expirationDate: '2025-01-01',
                    selectedPolicy: { futureSubjectOfInsurance: [{}, {}] },
                } as any;

                component.updateFutureIdCardDisplayData();

                expect(component.isIdCardAvailable).toBe(false);
                expect(component.showButtons).toBe(true);
                expect(component.subtitle).toBe(ID_CARD_CONST.proofOfCoverageSubtitle.current);
                expect(component.effectiveDate).toBe('2024-12-01');
                expect(component.expirationDate).toBe('2025-01-01');
                expect(component.shouldRenderEvidenceOfInsurance).toBe(true);
                expect(component.smallCardLink).toBe('small-link');
                expect(component.largeCardLink).toBe('large-link');
                expect(component.showFaxIdCard).toBe(true);
                expect(component.showMailIdCard).toBe(true);
                expect(component.showEmailIdCard).toBe(true);
                expect(component.viewOrDownloadIdCardAriaLabel).toBe(component.NEW_TAB);
                expect(component.idCardTitle).toBe('ID cards');
            });

            it('should set idCardTitle to single if only one subjectOfInsurance', () => {
                component.futureIdCard.subjectOfInsurance = [{} as any];
                component.data.selectedPolicy.futureSubjectOfInsurance = [{} as any];
                component.data = {
                    showFaxIdCard: false,
                    showMailIdCard: false,
                    showEmailIdCard: false,
                    expirationDate: '2025-01-01',
                    selectedPolicy: { futureSubjectOfInsurance: [{}] },
                } as any;
                component.futureIdCard = {
                    effectiveDate: '2024-12-01',
                    smallIDCard: '',
                    largeIDCard: '',
                    subjectOfInsurance: [{}],
                } as any;

                component.updateFutureIdCardDisplayData();

                expect(component.idCardTitle).toBe('ID card');
                expect(component.showButtons).toBe(false);
                expect(component.smallCardLink).toBe(null);
                expect(component.largeCardLink).toBe(null);
                expect(component.showAgentMessage).toBe(true);
            });

            it('should set shouldRenderEvidenceOfInsurance to false if isFloridaPolicy', () => {
                component.isFloridaPolicy = true;
                component.updateFutureIdCardDisplayData();
                expect(component.shouldRenderEvidenceOfInsurance).toBe(false);
            });
        });

        describe('#should display', () => {
            it('correct dates', () => {
                // Arrange
                const effectiveDate = element.querySelector(
                    'p[data-test-id="IDCARD_AUTO_CURRENT_EFFECTIVE_DATE_VALUE"]',
                ).innerHTML;
                const expirationDate = element.querySelector(
                    'p[data-test-id="IDCARD_AUTO_CURRENT_EXPIRATION_DATE_VALUE"]',
                ).innerHTML;
                // Assert
                expect(effectiveDate).toBe('04-10-2020');
                expect(expirationDate).toBe('04-10-2021');
            });

            it('correct vehicles', () => {
                const vehiclesElement = element.querySelectorAll('p[data-test-id="IDCARD_AUTO_CURRENT_VEHICLE_YMM"]');

                expect(vehiclesElement.length).toBe(2);
                expect(vehiclesElement[0].innerText).toContain('Tesla Model3 2020');
                expect(vehiclesElement[1].innerText).toContain('Tesla ModelX 2021');
            });
        });

        describe('#checkArsIdStateEligibility', () => {
            it('should call policyChangeService.getStateFromPcnForArs and stateEligibilityService.isStateEligibleForARSId ', () => {
                component.checkArsIdStateEligibility();

                expect(policyChangeServiceSpy.getStateFromPcnForArs).toHaveBeenCalled();
                expect(stateEligibilityServiceSpy.isStateEligibleForARSId).toHaveBeenCalled();
            });

            it('should set allowArsCSSRedirect to true if stateEligibility is met for ARS ', () => {
                component.checkArsIdStateEligibility();

                expect(component.allowArsCSSRedirect).toBeTruthy();
            });

            it('should set allowArsCSSRedirect to false if stateEligibility is not met for ARS ', () => {
                stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(false));

                component.checkArsIdStateEligibility();

                expect(component.allowArsCSSRedirect).toBeFalsy();
            });
        });

        describe('#checkFeatureFlags', () => {
            it('should set enableIdCardFormsBannerFlag as true', () => {
                // Arrange
                maintenanceFlagSpy.isEnabled.and.returnValue(true);
                // Act
                component.checkFeatureFlags();
                // Assert
                expect(component.enableIdCardFormsBannerFlag).toBeTruthy();
            });

            it('should set enableIdCardFormsBannerFlag as false', () => {
                // Arrange
                maintenanceFlagSpy.isEnabled.and.returnValue(false);
                // Act
                component.checkFeatureFlags();
                // Assert
                expect(component.enableIdCardFormsBannerFlag).toBeFalsy();
            });

            it('should set flagsReady and isFwsArsIdCardEnabled to true,coreIAFlagenabled ', () => {
                // Arrange
                spyOn(component, 'checkArsIdStateEligibility');
                featureFlagServiceSpy.isIA.and.returnValue(true);
                component.data.isActiveA360Auto = false;
                component.data.isActiveARSAuto = true;
                component.allowArsCSSRedirect = true;
                // Act
                component.checkFeatureFlags();
                // Assert
                expect(component.flagsReady).toBeTruthy();
                expect(component.isIAEnabled).toBeTruthy();
                expect(component.displayNonFeatureFlagIdCard).toBeFalsy();
                expect(component.checkArsIdStateEligibility).toHaveBeenCalled();
            });

            it('should set flagsReady and displayA360IdCardAvailabilities to true when any of the feature flag is true', () => {
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.isA360IdCardEmailEnabled)
                    .and.returnValue(true);
                featureFlagServiceSpy.isEnabled.withArgs(featureConstants.isA360IdCardFaxEnabled).and.returnValue(true);
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.isA360IdCardMailEnabled)
                    .and.returnValue(true);
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.enableMobileWalletsForRenewalIdCards)
                    .and.returnValue(true);
                featureFlagServiceSpy.isIA.and.returnValue(false);
                component.data.isActiveA360Auto = true;

                component.checkFeatureFlags();

                expect(component.flagsReady).toBeTruthy();
                expect(component.isIAEnabled).toBeFalsy();
                expect(component.displayA360IdCardAvailabilities).toBeTruthy();
                expect(component.enableMobileWalletsForRenewalIdCards).toBeTruthy();
            });

            it('should set flagsReady and displayA360IdCardAvailabilities to false when all three flags are false', () => {
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.isA360IdCardEmailEnabled)
                    .and.returnValue(false);
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.isA360IdCardFaxEnabled)
                    .and.returnValue(false);
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.isA360IdCardMailEnabled)
                    .and.returnValue(false);
                featureFlagServiceSpy.isEnabled
                    .withArgs(featureConstants.enableMobileWalletsForRenewalIdCards)
                    .and.returnValue(false);
                featureFlagServiceSpy.isIA.and.returnValue(true);
                component.data.isActiveA360Auto = true;

                component.checkFeatureFlags();

                expect(component.flagsReady).toBeTruthy();
                expect(component.isIAEnabled).toBeTruthy();
                expect(component.displayA360IdCardAvailabilities).toBeFalsy();
                expect(component.enableMobileWalletsForRenewalIdCards).toBeFalsy();
            });

            it('should set displayNonFeatureFlagIdCard and isFwsArsIdCardEnabled to false', () => {
                // Arrange
                spyOn(component, 'checkArsIdStateEligibility');
                component.data.isActiveA360Auto = true;
                component.data.isActiveARSAuto = false;
                featureFlagServiceSpy.isEnabled.and.returnValue(false);
                // Act
                component.checkFeatureFlags();
                // Assert
                expect(component.displayNonFeatureFlagIdCard).toBeTruthy();
                expect(component.checkArsIdStateEligibility).not.toHaveBeenCalled();
            });

            it('should set isShowMailIDCard to true', () => {
                // Arrange
                spyOn(component, 'checkArsIdStateEligibility');
                component.data.isActiveARSAuto = true;
                component.data.isForemostPolicy = false;
                component.data.isBWPolicy = false;
                featureFlagServiceSpy.isEnabled.and.returnValue(false);
                // Act
                component.checkFeatureFlags();
                // Assert
                expect(component.isShowMailIDCard).toBeTruthy();
            });

            it('should set isShowMailIDCard to true', () => {
                // Arrange
                spyOn(component, 'checkArsIdStateEligibility');
                component.data.isActiveARSAuto = true;
                component.data.isForemostPolicy = true;
                component.data.isBWPolicy = false;
                featureFlagServiceSpy.isEnabled.and.returnValue(false);
                // Act
                component.checkFeatureFlags();
                // Assert
                expect(component.isShowMailIDCard).toBeFalsy();
            });
        });

        describe('#displayIdCardClick', () => {
            it('DisplayID card event should track mixpaneland open the document', () => {
                // Arrange
                spyOn(window, 'open').and.callThrough();
                featureFlagServiceSpy.isFeatureFlagReady.and.returnValue(of(true));
                component.data.policySource = 'fm';

                component.displayIdCardClick('Small', { preventDefault: () => {} } as MouseEvent);

                // Assert
                expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                    eventName: 'View ID Card',
                    idCardType: 'Small',
                    policyType: 'Auto',
                    policySource: 'fm',
                    term: 'Current',
                    successful: true,
                    entrySource: 'Policy Details',
                });
                expect(window.open).toHaveBeenCalled();
            });

            it('DisplayID card event should track mixpaneland and open the document with policytype as ARS for ARS auto', () => {
                // Arrange
                component.data.isFWSPolicy = true;
                component.data.lineOfBusiness = 'AUTO';
                spyOn(window, 'open').and.callThrough();
                component.displayIdCardClick('Small', { preventDefault: () => {} } as MouseEvent);

                // Assert
                const args = idCardServiceSpy.trackIdCardEvents.calls.mostRecent().args;

                expect(args[0]).toEqual({
                    eventName: 'View ID Card',
                    idCardType: 'Small',
                    policyType: 'AUTO',
                    policySource: 'FWS-ARS',
                    term: 'Current',
                    successful: true,
                    entrySource: 'Policy Details',
                });
                expect(window.open).toHaveBeenCalled();
            });

            it('displayID card event should track mixpaneland and open the document with policytype as ARS for ARS auto if disableDownloadIdCardsButton === false', () => {
                // Arrange
                component.disableDownloadIdCardsButton = false;
                component.data.isFWSPolicy = true;
                component.data.lineOfBusiness = 'AUTO';
                spyOn(window, 'open').and.callThrough();
                component.displayIdCardClick('Small', { preventDefault: () => {} } as MouseEvent);

                // Assert
                const args = idCardServiceSpy.trackIdCardEvents.calls.mostRecent().args;

                expect(args[0]).toEqual({
                    eventName: 'View ID Card',
                    idCardType: 'Small',
                    policyType: 'AUTO',
                    policySource: 'FWS-ARS',
                    term: 'Current',
                    successful: true,
                    entrySource: 'Policy Details',
                });
                expect(window.open).toHaveBeenCalled();
            });

            it('should go through full method if disableDownloadIdCardsButton is false', () => {
                const event = new MouseEvent('click');
                component.data.isFWSPolicy = true;
                component.data.lineOfBusiness = 'AUTO';

                spyOn(event, 'preventDefault');
                spyOn(component, 'displayIDCard');
                tuiTrackerServiceSpy.addToState.calls.reset();

                component.displayIdCardClick('Large', event, false);

                expect(component.displayIDCard).toHaveBeenCalled();
                expect(component.displayIDCard).toHaveBeenCalledWith('Large', 'large link', event);
                expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                    future_dated_vehicle: false,
                });
            });

            it('should return immediately if disabledDownloadIdCardsButton is true', () => {
                component.data.isFWSPolicy = true;
                component.data.lineOfBusiness = 'AUTO';
                spyOn(component, 'displayIDCard');

                component.displayIdCardClick('Large', { preventDefault: () => {} } as MouseEvent, true);

                expect(component.displayIDCard).not.toHaveBeenCalled();
            });

            it('should call add to state for future ID card display data', () => {
                const event = new MouseEvent('click');
                component.isFutureIdCard = true;
                tuiTrackerServiceSpy.addToState.calls.reset();

                component.displayIdCardClick('Large', event, false);

                expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                    future_dated_vehicle: true,
                });
            });
        });

        describe('#trackContactClick', () => {
            it('should trigger trackphonenumber', () => {
                component.trackContactClick('000');

                expect(policySummaryServiceSpy.trackPhoneNumberEvent).toHaveBeenCalledWith(
                    '000',
                    eventParams.proofOfCoverage,
                );
            });
        });

        describe('#evidenceClick', () => {
            it('DisplayID card event should track mixpaneland open the document', () => {
                // Arrange
                spyOn(window, 'open');
                const renewalFlag = true;
                const vehicleObj: SubjectOfInsuranceConfigurationModel = {
                    id: 'test',
                    ymm: 'test',
                    vin: 'test',
                    renewalEvidenceOfInsuranceLink: 'testUrl-renewal',
                    evidenceOfInsuranceLink: 'testUrl',
                };
                spyOn(component, 'getAppSourceDetails').and.returnValue(
                    '&applicationSource=CSS&osType=iOS&appVersion=25.0.1',
                );

                component.evidenceClick(renewalFlag, vehicleObj, { preventDefault: () => {} } as MouseEvent);

                // Assert
                expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                    eventName: 'Evidence Of Insurance',
                    successful: true,
                });
                expect(window.open).toHaveBeenCalledWith(
                    'testUrl-renewal&applicationSource=CSS&osType=iOS&appVersion=25.0.1',
                    '_blank',
                );
                expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                    future_dated_vehicle: false,
                });
            });
        });
    });

    describe('#displayIDCard', () => {
        it('should not call event.preventDefault when no event is present', () => {
            const event = new Event('click');
            spyOn(event, 'preventDefault');

            component.displayIDCard('small', 'url');
            expect(event.preventDefault).not.toHaveBeenCalled();
        });

        it('should call event.preventDefault event is present', () => {
            const event = new MouseEvent('click');
            spyOn(event, 'preventDefault');
            component.flagsReady = true;

            component.displayIDCard('small', 'url', event);

            expect(event.preventDefault).toHaveBeenCalled();
        });

        it('should call window.open with large card link for Non NY ARS Auto policy', () => {
            const event = new MouseEvent('click');
            spyOn(event, 'preventDefault');
            spyOn(window, 'open');
            featureFlagServiceSpy.isEnabled.and.returnValue(true);
            component.data.isActiveARSAuto = true;
            component.data.isARSWithStateNY = false;
            component.allowArsCSSRedirect = true;
            spyOn(component, 'getAppSourceDetails').and.returnValue(
                '&applicationSource=CSS&osType=iOS&appVersion=25.0.1',
            );
            fixture.detectChanges();

            component.displayIDCard('small', 'url', event);

            expect(event.preventDefault).toHaveBeenCalled();
            expect(window.open).toHaveBeenCalledWith(
                'large link&applicationSource=CSS&osType=iOS&appVersion=25.0.1',
                '_blank',
            );
        });

        it('should call window.open with unit link for NY ARS Auto policy', () => {
            component.data = idCardsConfigurationModel;
            const event = new MouseEvent('click');
            component.data.isActiveARSAuto = true;
            component.data.isARSWithStateNY = true;
            component.allowArsCSSRedirect = true;
            spyOn(component, 'getAppSourceDetails').and.returnValue(
                '&applicationSource=CSS&osType=iOS&appVersion=25.0.1',
            );
            fixture.detectChanges();

            spyOn(event, 'preventDefault');
            spyOn(window, 'open');

            component.displayIDCard('small', 'url', event);

            expect(event.preventDefault).toHaveBeenCalled();
            expect(window.open).toHaveBeenCalledWith(
                'url&applicationSource=CSS&osType=iOS&appVersion=25.0.1',
                '_blank',
            );
        });
    });

    describe('getAppSourceDetails', () => {
        it('should return os type, version and application source for web', () => {
            sessionStorageServiceSpy.getItem
                .withArgs(STORAGE_CONST.sessionStorage.osType)
                .and.returnValue('WEB')
                .withArgs(STORAGE_CONST.sessionStorage.appVersion)
                .and.returnValue('WEB2.0');
            sessionStorageServiceSpy.getParsedItem.and.returnValue(false);

            const result = component.getAppSourceDetails();

            expect(result).toEqual('&applicationSource=CSS&osType=WEB&appVersion=WEB2.0');
        });

        it('should return os type, version and application source for mobile', () => {
            sessionStorageServiceSpy.getItem
                .withArgs(STORAGE_CONST.sessionStorage.osType)
                .and.returnValue('iOS')
                .withArgs(STORAGE_CONST.sessionStorage.appVersion)
                .and.returnValue('25.0.1');
            sessionStorageServiceSpy.getParsedItem.and.returnValue(true);

            const result = component.getAppSourceDetails();

            expect(result).toEqual('&applicationSource=Mobile&osType=iOS&appVersion=25.0.1');
        });

        it('should return default os type, version and application source if values not present', () => {
            sessionStorageServiceSpy.getItem
                .withArgs(STORAGE_CONST.sessionStorage.osType)
                .and.returnValue(null)
                .withArgs(STORAGE_CONST.sessionStorage.appVersion)
                .and.returnValue(null);
            sessionStorageServiceSpy.getParsedItem.and.returnValue(false);

            const result = component.getAppSourceDetails();

            expect(result).toEqual('&applicationSource=CSS&osType=WEB&appVersion=WEB2.0');
        });
    });

    describe('renewal ProofOfCoverage', () => {
        beforeEach(() => {
            fixture = TestBed.createComponent(ProofOfCoverageComponent);
            component = fixture.componentInstance;
            element = fixture.nativeElement;
            component.renewal = true;
            component.data = idCardsConfigurationModelRenewal;
            fixture.detectChanges();
        });
        it('should render fax and mail buttons in renewal', () => {
            // Act
            const mailButton = element.querySelector('button.mail');
            const faxButton = element.querySelector('button.fax');
            // Assert
            expect(mailButton).toBeTruthy();
            expect(faxButton).toBeTruthy();
        });
    });

    describe('#checkIfCurrentPolicyIsExpansion', () => {
        beforeEach(() => {
            fixture = TestBed.createComponent(ProofOfCoverageComponent);
            component = fixture.componentInstance;
            element = fixture.nativeElement;
            component.renewal = false;
            component.isIAEnabled = false;
            component.data = idCardsConfigurationModel;
            fixture.detectChanges();
        });
        it('should set phone number as 1-855-878-3157 if not expansion only data', fakeAsync(() => {
            stateEligibilityServiceSpy.getState.and.returnValue('OK');
            policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);

            component.checkIfCurrentPolicyIsExpansion();

            expect(component.phone).toEqual('1-855-878-3157');
            expect(component.isExpansionState).toBeFalsy();
        }));

        it('should set phone number as 1-877-388-6628 if expansion only data', fakeAsync(() => {
            stateEligibilityServiceSpy.getState.and.returnValue('NC');
            policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);

            component.checkIfCurrentPolicyIsExpansion();

            expect(component.phone).toEqual('1-877-388-6628');
            expect(component.isExpansionState).toBeTruthy();
        }));

        it('should set phone number as 1-800-422-4272 for EA fws customers', fakeAsync(() => {
            featureFlagServiceSpy.isIA.and.returnValue(false);
            policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(true);

            component.checkIfCurrentPolicyIsExpansion();

            expect(policySummaryServiceSpy.isPolicySourceFWS).toHaveBeenCalled();
            expect(component.phone).toEqual('1-800-422-4272');
        }));

        it('should set phone number as 1-800-527-3905 for EA Foremost Fm customers', fakeAsync(() => {
            featureFlagServiceSpy.isIA.and.returnValue(false);
            policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);
            policySummaryServiceSpy.isPolicySourceForemost.and.returnValue(true);

            component.checkIfCurrentPolicyIsExpansion();

            expect(policySummaryServiceSpy.isPolicySourceForemost).toHaveBeenCalled();
            expect(component.phone).toEqual('1-800-527-3905');
        }));

        it('should set phone number as 800-422-4272 for IA fws customers', fakeAsync(() => {
            component.isIAEnabled = true;
            featureFlagServiceSpy.isIA.and.returnValue(true);
            policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(true);

            component.checkIfCurrentPolicyIsExpansion();

            expect(policySummaryServiceSpy.isPolicySourceFWS).toHaveBeenCalled();
            expect(component.phone).toEqual('800-422-4272');
        }));

        it('should set phone number as 1-800-527-3905 for IA Foremost Fm customers', fakeAsync(() => {
            component.isIAEnabled = true;
            featureFlagServiceSpy.isIA.and.returnValue(true);
            policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);
            policySummaryServiceSpy.isPolicySourceForemost.and.returnValue(true);

            component.checkIfCurrentPolicyIsExpansion();

            expect(policySummaryServiceSpy.isPolicySourceForemost).toHaveBeenCalled();
            expect(component.phone).toEqual('1-800-527-3905');
        }));
    });

    describe('#isShowPaperSize', () => {
        beforeEach(() => {
            fixture = TestBed.createComponent(ProofOfCoverageComponent);
            component = fixture.componentInstance;
            element = fixture.nativeElement;
            component.renewal = false;
            component.data = idCardsConfigurationModel;
            fixture.detectChanges();
        });
        it('should show paper size if BristolWest or Foremost card is available', () => {
            component.data.isBWIDCardAvailable = true;
            component.data.isFWSPolicy = false;
            component.data.isForemostPolicy = false;
            const showpapersize = component.isShowPaperSize(component.data);
            expect(showpapersize).toEqual(true);
        });

        it('should show paper size if BristolWest or Foremost card is available', () => {
            component.data.isBWIDCardAvailable = false;
            component.data.isFWSPolicy = false;
            component.data.isForemostPolicy = true;
            const showpapersize = component.isShowPaperSize(component.data);
            expect(showpapersize).toEqual(true);
        });

        it('should show paper size if FWS card is available', () => {
            component.data.isBWIDCardAvailable = false;
            component.data.isFWSPolicy = true;
            component.data.isForemostPolicy = false;
            component.data.isActiveARSAuto = false;
            const showpapersize = component.isShowPaperSize(component.data);
            expect(showpapersize).toEqual(true);
        });

        it('should not show paper size if BristolWest or Foremost card is not available', () => {
            component.data.isBWIDCardAvailable = false;
            component.data.isFWSPolicy = false;
            component.data.isForemostPolicy = false;
            const showpapersize = component.isShowPaperSize(component.data);
            expect(showpapersize).toEqual(false);
        });
    });

    describe('#displayWallet', () => {
        beforeEach(() => {
            const sampleValue = 'base64string';
            fixture = TestBed.createComponent(ProofOfCoverageComponent);
            component = fixture.componentInstance;
            component.data = idCardsConfigurationModel;
            idCardServiceSpy.displayWallet.and.returnValue(of({ passkit: sampleValue }));
        });

        it('should call apple wallet for current id card & trackIdCardEvents with successfull as true', () => {
            spyOn(component, 'addToAppleWallet');
            spyOn(component, 'trackWalletSegmentEvents');
            component.renewal = false;
            featureFlagServiceSpy.isEnabled
                .withArgs(featureConstants.enableMobileWalletsForRenewalIdCards)
                .and.returnValue(false);

            component.displayWallet(ID_CARD_CONST.wallets.appleWallet);

            expect(spinnerSpy.show).toHaveBeenCalled();
            expect(component.addToAppleWallet).toHaveBeenCalled();
            expect(spinnerSpy.hide).toHaveBeenCalled();
            expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                eventName: 'Add To Apple Wallet',
                successful: true,
            });
            expect(component.trackWalletSegmentEvents).toHaveBeenCalled();
            expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                successful: true,
            });
        });

        it('should call apple wallet for renewal id card & trackIdCardEvents with successfull as true', () => {
            spyOn(component, 'addToAppleWallet');
            spyOn(component, 'trackWalletSegmentEvents');
            component.renewal = true;
            featureFlagServiceSpy.isEnabled
                .withArgs(featureConstants.enableMobileWalletsForRenewalIdCards)
                .and.returnValue(true);
            const sampleValue = 'base64string';
            const renewalDetails = { renewalEffectiveDate: '03/01/2025', renewalExpiryDate: '09/01/2025' };
            idCardServiceSpy.displayWallet
                .withArgs(ID_CARD_CONST.wallets.appleWallet, '123456', renewalDetails)
                .and.returnValue(of({ passkit: sampleValue }));
            component.displayWallet(ID_CARD_CONST.wallets.appleWallet);

            expect(spinnerSpy.show).toHaveBeenCalled();
            expect(component.addToAppleWallet).toHaveBeenCalled();
            expect(spinnerSpy.hide).toHaveBeenCalled();
            expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                eventName: 'Add To Apple Wallet',
                successful: true,
            });
            expect(component.trackWalletSegmentEvents).toHaveBeenCalled();
            expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                successful: true,
            });
        });

        it('should call trackIdCardEvents with successful as false applewallet', () => {
            idCardServiceSpy.displayWallet.and.returnValue(throwError({ message: 'api failure' }));
            spyOn(component, 'addToAppleWallet');

            component.displayWallet(ID_CARD_CONST.wallets.appleWallet);

            expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                eventName: 'Add To Apple Wallet',
                successful: false,
                failureMsg: 'api failure',
            });
            expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                successful: false,
                failure_reason: 'api failure',
            });
        });

        it('should call trackIdCardEvents with successful as false google wallet', () => {
            idCardServiceSpy.displayWallet.and.returnValue(throwError({ message: 'api failure' }));

            component.displayWallet(ID_CARD_CONST.wallets.googleWallet);

            expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
                successful: false,
                failure_reason: 'api failure',
            });
        });

        it('should call google wallet & trackIdCardEvents with successfull as true', () => {
            spyOn(window, 'open');
            const expectedUrl = 'base64string';
            component.displayWallet(ID_CARD_CONST.wallets.googleWallet);

            expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                eventName: 'Add To Google Wallet',
                successful: true,
            });
            expect(window.open).toHaveBeenCalledWith(expectedUrl, '_blank');
        });

        it('should call trackIdCardEvents with successful as false', () => {
            idCardServiceSpy.displayWallet.and.returnValue(throwError({ message: 'api failure' }));

            component.displayWallet(ID_CARD_CONST.wallets.googleWallet);

            expect(idCardServiceSpy.trackIdCardEvents).toHaveBeenCalledWith({
                eventName: 'Add To Google Wallet',
                successful: false,
                failureMsg: 'api failure',
            });
        });
    });

    describe('#addToAppleWallet', () => {
        beforeEach(() => {
            fixture = TestBed.createComponent(ProofOfCoverageComponent);
            component = fixture.componentInstance;
            component.data = idCardsConfigurationModel;
        });

        it('should trigger click event', () => {
            const dummyElement = document.createElement('a');
            const base64STring = 'base64String';
            spyOn(document, 'createElement').and.returnValue(dummyElement);
            spyOn(dummyElement, 'click');

            component.addToAppleWallet(base64STring);

            expect(dummyElement.click).toHaveBeenCalled();
        });
    });

    describe('#displayGoogleWallet', () => {
        it('should set shouldDisplayGoogleWallet as true for android mobile devices for all cards when feature flag is ON', () => {
            featureFlagServiceSpy.isEnabled
                .withArgs(featureConstants.enableMobileWalletsForRenewalIdCards)
                .and.returnValue(true);
            windowServiceSpy.nativeWindow.navigator.userAgent = 'android';
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(true);

            component.displayGoogleWallet();

            expect(component.displayGoogleWallet).toBeTruthy;
        });
        it('should set shouldDisplayGoogleWallet as true for android mobile devices for current cards when feature flag is OFF', () => {
            featureFlagServiceSpy.isEnabled
                .withArgs(featureConstants.enableMobileWalletsForRenewalIdCards)
                .and.returnValue(false);

            windowServiceSpy.nativeWindow.navigator.userAgent = 'android';
            featureFlagServiceSpy.isEnvVariableEnabledCheck.and.returnValue(true);

            component.displayGoogleWallet();

            expect(component.displayGoogleWallet).toBeTruthy;
        });
    });

    describe('ngOnDestroy', () => {
        it('should properly unsubscribe subscriptions', () => {
            component.isFeatureFlagReadySubscription$ = new Subscription();
            component.getArsStateSubscription$ = new Subscription();
            spyOn(component.isFeatureFlagReadySubscription$, 'unsubscribe');
            spyOn(component.getArsStateSubscription$, 'unsubscribe');

            component.ngOnDestroy();

            expect(component.isFeatureFlagReadySubscription$.unsubscribe).toHaveBeenCalled();
            expect(component.getArsStateSubscription$.unsubscribe).toHaveBeenCalled();
        });
    });

    describe('#trackWalletSegmentEvents', () => {
        it('should track the correct event when trackWalletSegmentEvents is called with a wallet name', () => {
            tuiTrackerServiceSpy.track.calls.reset();
            component.subtitle = 'Current';

            component.trackWalletSegmentEvents('appleWallet');

            expect(tuiTrackerServiceSpy.track).toHaveBeenCalledWith(eventNames.iconClicked, {
                action: 'appleWallet clicked',
                step: 'Current Id Card',
                future_dated_vehicle: false,
            });
        });
    });

    describe('#getIdCardEventName', () => {
        it('should return id card event name for fax', () => {
            const result = component.getIdCardEventName(DialogTypes.FAX);

            expect(result).toEqual('Fax My ID Card');
        });

        it('should return id card event name for mail', () => {
            const result = component.getIdCardEventName(DialogTypes.MAIL);

            expect(result).toEqual('Mail My ID Card');
        });

        it('should return id card event name for send email', () => {
            const result = component.getIdCardEventName(DialogTypes.EMAIL);

            expect(result).toEqual('Email My ID Card');
        });
    });

    describe('#isDisplayGoogleWalletForFM', () => {
        beforeEach(() => {
            component.shouldDisplayGoogleWallet = false;
            featureFlagServiceSpy.isEnabled.and.returnValue(false);
        });

        it('should return true if all conditions are met', () => {
            component.shouldDisplayGoogleWallet = true;
            component.data = { isForemostPolicy: true } as any;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(true);

            expect(component.isDisplayGoogleWalletForFM()).toEqual(true);
        });

        it('should return false if shouldDisplayGoogleWalletis false', () => {
            component.shouldDisplayGoogleWallet = false;
            component.data = { isForemostPolicy: true } as any;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(true);

            expect(component.isDisplayGoogleWalletForFM()).toEqual(false);
        });

        it('should return false if featureflag is not on', () => {
            component.shouldDisplayGoogleWallet = true;
            featureFlagServiceSpy.isEnabled.withArgs(featureConstants.enableFmPolicyDetails).and.returnValue(false);

            expect(component.isDisplayGoogleWalletForFM()).toEqual(false);
        });
    });
});

const idCardsConfigurationModel = {
    agentOfRecordId: '41RD34',
    isAutoPolicy: true,
    isHomePolicy: false,
    shouldRenderEvidenceOfInsurance: true,
    address: {
        address1: '101 Love st.',
        address2: 'Los Angeles 900210, CA',
    },
    policyContractNumber: '0123456789',
    lineOfBusiness: 'PLA',
    policyType: 'AUTO',
    policySource: 'PTA',
    effectiveDate: '04-10-2020',
    expirationDate: '04-10-2021',
    subjectOfInsurance: [
        {
            id: '123',
            ymm: 'Tesla Model3 2020',
            vin: '123456789',
            evidenceOfInsuranceLink: 'evidenceOfInsuranceLink',
            renewalEvidenceOfInsuranceLink: '',
        },
        {
            id: '456',
            ymm: 'Tesla ModelX 2021',
            vin: '987654321',
            evidenceOfInsuranceLink: 'evidenceOfInsuranceLink2',
            renewalEvidenceOfInsuranceLink: '',
        },
    ],
    cardLink: {
        small: 'small link',
        large: 'large link',
        encrypted: 'encrypted link',
        encryptedLargeIdCardDocumentId: 'encryptedLargeIdCardDocumentId',
    },
    showFaxIdCard: true,
    showMailIdCard: true,
    showEmailIdCard: true,
    renewalFlag: false,
    renewalIDCards: null,
    renewalEffectiveDate: null,
    renewalExpiryDate: null,
    title: 'Auto Id Cards',
    proofOfCoverageSubTitle: 'Current',
    dialogData: {
        width: '420',
        fax: {
            title: 'fax title',
            text: 'fax text',
            cta1: 'fax cta 1',
            cta2: 'fax cta 2',
            gtmTag1: 'fax gtmTag1',
            gtmTag2: 'fax gtmTag2',
            inputField: true,
            placeholder: 'fax placeholder',
        },
        mail: {
            title: 'mail title',
            text: 'mail text',
            cta1: 'mail cta 1',
            cta2: 'mail cta 2',
            gtmTag1: 'mail gtmTag1',
            gtmTag2: 'mail gtmTag2',
            address: {
                address1: 'mail address 1',
                address2: 'mail address 2',
            },
        },
        email: {
            title: 'email title',
            text: 'email text',
            cta1: 'email cta 1',
            cta2: 'email cta 2',
            gtmTag1: 'email gtmTag1',
            gtmTag2: 'email gtmTag2',
            inputField: true,
            placeholder: 'email placeholder',
        },
    },
    nJDialog: {
        isShow: false,
    },
    isARSWithStateNY: false,
    isActiveARSAuto: false,
    units: [{ ymm: 'xyz', vin: 'v123', link: 'url' }],
};
const idCardsConfigurationModelRenewal = {
    agentOfRecordId: '41RD34',
    address: null,
    cardLink: {
        small: 'smallLink',
        large: 'largeLink',
        encrypted: 'encryptedLink',
    },
    dialogData: {
        width: '448px',
        fax: {
            cta1: '',
            cta2: '',
            gtmTag1: '',
            gtmTag2: '',
            errors: {
                maxLength: '',
                minLength: '',
                pattern: '',
                requred: '',
            },
            inputField: true,
            placeholder: '',
            text: '',
            title: '',
        },
        mail: {
            address: {
                address1: '',
                address2: '',
            },
            cta1: '',
            cta2: '',
            gtmTag1: '',
            gtmTag2: '',
            text: '',
            title: '',
        },
        email: {
            cta1: '',
            cta2: '',
            gtmTag1: '',
            gtmTag2: '',
            errors: {
                pattern: '',
                requred: '',
            },
            inputField: true,
            placeholder: '',
            text: '',
            title: '',
        },
    },
    nJDialog: {
        isShow: false,
    },
    effectiveDate: '10/28/2020',
    expirationDate: '',
    isAutoPolicy: true,
    isHomePolicy: false,
    lineOfBusiness: 'AUTO',
    policyType: 'AUTO',
    policyContractNumber: '',
    proofOfCoverageSubTitle: '',
    showFaxIdCard: true,
    showMailIdCard: true,
    showEmailIdCard: true,
    renewalEffectiveDate: 'date for renewal effective',
    renewalExpiryDate: 'date for renewal expiration',
    renewalFlag: true,
    renewalIDCards: {
        small: 'renewal_smallLink',
        large: 'renewal_largeLink',
        encrypted: null,
    },
    shouldRenderEvidenceOfInsurance: true,
    subjectOfInsurance: [],
    title: 'Auto ID Cards',
};
const idCardsConfigurationModelNoImages = {
    agentOfRecordId: '41RD34',
    isAutoPolicy: true,
    isHomePolicy: false,
    shouldRenderEvidenceOfInsurance: true,
    address: {
        address1: '101 Love st.',
        address2: 'Los Angeles 900210, CA',
    },
    policyContractNumber: '0123456789',
    lineOfBusiness: 'PLA',
    policyType: 'AUTO',
    effectiveDate: '04-10-2020',
    expirationDate: '04-10-2021',
    subjectOfInsurance: [
        {
            id: '123',
            ymm: 'Tesla Model3 2020',
            vin: '123456789',
            evidenceOfInsuranceLink: 'evidenceOfInsuranceLink',
            renewalEvidenceOfInsuranceLink: '',
        },
        {
            id: '456',
            ymm: 'Tesla ModelX 2021',
            vin: '987654321',
            evidenceOfInsuranceLink: 'evidenceOfInsuranceLink2',
            renewalEvidenceOfInsuranceLink: '',
        },
    ],
    cardLink: {
        small: null,
        large: null,
        encrypted: null,
    },
    renewalFlag: false,
    renewalIDCards: null,
    renewalEffectiveDate: null,
    renewalExpiryDate: null,
    title: 'Auto Id Cards',
    proofOfCoverageSubTitle: 'Current',
    dialogData: {
        width: '420',
        fax: {
            title: 'fax title',
            text: 'fax text',
            cta1: 'fax cta 1',
            cta2: 'fax cta 2',
            gtmTag1: 'fax gtmTag1',
            gtmTag2: 'fax gtmTag2',
            inputField: true,
            placeholder: 'fax placeholder',
        },
        mail: {
            title: 'mail title',
            text: 'mail text',
            cta1: 'mail cta 1',
            cta2: 'mail cta 2',
            gtmTag1: 'mail gtmTag1',
            gtmTag2: 'mail gtmTag2',
            address: {
                address1: 'mail address 1',
                address2: 'mail address 2',
            },
        },
        email: {
            title: 'email title',
            text: 'email text',
            cta1: 'email cta 1',
            cta2: 'email cta 2',
            gtmTag1: 'email gtmTag1',
            gtmTag2: 'email gtmTag2',
            inputField: true,
            placeholder: 'email placeholder',
        },
    },
    nJDialog: {
        isShow: false,
    },
};
const easternExpansion = {
    hasExpansionState: true,
    hasExpansionStateOnly: false,
    expansionStates: 'Kentucky',
    expansionContactNumber: '1-877-388-6628',
};
const futureIdCards = {
    effectiveDate: '2025-06-26',
    smallIDCard:
        'smallIDCard?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
    encryptedDocumentId:
        'encryptedDocumentId?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
    largeIDCard:
        'largeIDCard?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
    vehicleIdList: ['2203295018', '2204195060'],
    unitsHeader: ID_CARD_CONST.typeOfUnit.vehicles,
    subjectOfInsurance: [
        {
            id: '2203295018',
            vin: '1N6AF0LY3CN199814',
            ymm: '2009 honda odyssey van  ex',
            evidenceOfInsuranceLink:
                'https://csstu.farmers.com/customerselfservice-api/evidenceOfInsurance/encryptedLink?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
            renewalEvidenceOfInsuranceLink:
                'https://csstu.farmers.com/customerselfservice-api/evidenceOfInsurance/renewalEncryptedLink?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
        },
        {
            id: '2204195060',
            vin: 'WDBRF40J75A752770',
            ymm: '2009 honda odyssey van  ex',
            evidenceOfInsuranceLink:
                'https://csstu.farmers.com/customerselfservice-api/evidenceOfInsurance/encryptedLink?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
            renewalEvidenceOfInsuranceLink:
                'https://csstu.farmers.com/customerselfservice-api/evidenceOfInsurance/renewalEncryptedLink?Authorization=oktaToken&usertype=undefined&authorizationtype=okta&frmsregion=TEST_ENV&frmsbrand=Farmers',
        },
    ],
};
