
create-client.component.html
<form #clientForm="ngForm" (ngSubmit)="onSubmit()" class="client-form">
  <div class="form-row">
    <div class="form-group">
      <label for="employeeName">Employee Name</label>
      <input type="text" id="employeeName" name="employeeName" class="form-control" [(ngModel)]="clientObj.employeeName" 
        required #employeeName="ngModel">
      <span class="error" *ngIf="employeeName.invalid && employeeName.touched">Employee Name is required</span>
    </div>

    <div class="form-group">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" class="form-control" [(ngModel)]="clientObj.email" 
        required email #email="ngModel">
      <span class="error" *ngIf="email.invalid && email.touched">Enter a valid email</span>
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="phone">Phone Number</label>
      <input type="tel" id="phone" name="phone" class="form-control" [(ngModel)]="clientObj.phoneNumber" 
        required pattern="^\d{10}$" #phone="ngModel">
      <span class="error" *ngIf="phone.invalid && phone.touched">Enter a valid 10-digit phone number</span>
    </div>

    <div class="form-group">
      <label for="department">Department</label>
      <select id="department" name="department" class="form-control" [(ngModel)]="clientObj.department" required #department="ngModel">
        <option value="" disabled selected>Select Department</option>
        <option value="Business">Business</option>
        <option value="Development">Development</option>
      </select>
      <span class="error" *ngIf="department.invalid && department.touched">Department is required</span>
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="role">Role</label>
      <select id="role" name="role" class="form-control" [(ngModel)]="clientObj.role" required #role="ngModel">
        <option value="" disabled selected>Select Role</option>
        <option value="Trainer">Trainer</option>
        <option value="Developer">Developer</option>
      </select>
      <span class="error" *ngIf="role.invalid && role.touched">Role is required</span>
    </div>

    <div class="form-group">
      <label for="startDate">Start Date</label>
      <input type="date" id="startDate" name="startDate" class="form-control" [(ngModel)]="clientObj.dateOfJoining" required #startDate="ngModel">
      <span class="error" *ngIf="startDate.invalid && startDate.touched">Start date is required</span>
    </div>
  </div>

  <div class="form-buttons">
    <button type="button" (click)="goBack()" class="back-button">Back</button>
    <button type="submit" [disabled]="clientForm.invalid" class="submit-button">Create Client ID</button>
  </div>
</form>
create-client.component.ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-create-client',
  templateUrl: './create-client.component.html',
  styleUrls: ['./create-client.component.css']
})
export class CreateClientComponent {
  clientObj = {
    employeeName: '',
    email: '',
    phoneNumber: '',
    department: '',
    role: '',
    dateOfJoining: ''
  };

  constructor(private http: HttpClient) {}

  onSubmit() {
    this.http.post('http://localhost:9081/clients/register', this.clientObj).subscribe(response => {
      alert('Client ID Created Successfully!');
    }, error => {
      alert('Error creating client ID');
    });
  }

  goBack() {
    window.history.back();
  }
}




create-client.component.css

.client-form {
  max-width: 600px;
  margin: auto;
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

.form-row {
  display: flex;
  justify-content: space-between;
}

.form-group {
  width: 48%;
  margin-bottom: 15px;
}

label {
  font-weight: bold;
}

input, select {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #003366;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #002244;
}

.error {
  color: red;
  font-size: 12px;
}


app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { CreateClientComponent } from './create-client/create-client.component';

@NgModule({
  declarations: [
    AppComponent,
    CreateClientComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }





















<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Client ID Creation</title>
  <link rel="stylesheet" href="client_id.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">
</head>
<body>
  <header class="main-header">
    <div class="header-content">
      <a href="../Admin-Dashboard/Admin-Dash.html">
        <div class="logo">
          <img src="../Assets/logo.jpg" alt="Cognizant Logo">
        </div>
      </a>
      <h1 class="cognizant-heading">COGNIZANT</h1>
    </div>
  </header>

  <main class="container">
    <h2>Client ID Generation</h2>
    <form id="clientForm">
      <div class="form-row">
        <div class="form-group">
          <label for="employeeName">Employee Name</label>
          <input type="text"  placeholder="Employee Name" id="employeeName" name="employeeName" required>
          <span class="error" id="nameError"></span>
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email"  placeholder="Email" id="email" name="email" required>
          <span class="error" id="emailError"></span>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="phone">Phone Number</label>
          <input type="tel"  placeholder="Phone Number" id="phone" name="phone" required>
          <span class="error" id="phoneError"></span>
        </div>
        <div class="form-group">
          <label for="department">Department</label>
          <select id="department" name="department" required>
            <option value="" disabled selected>Select Department</option>
            <option value="Business">Business</option>
            <option value="Development">Development</option>
          </select>
          <span class="error" id="departmentError"></span>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="role">Role</label>
          <select id="role" placeholder="Role" name="role" required>
            <option value="" disabled selected>Select Role</option>
          </select>
          <span class="error" id="roleError"></span>
        </div>
        <div class="form-group">
          <label for="startDate">Start Date</label>
          <input type="date" placeholder="Start Date" id="startDate" name="startDate" required>
          <span class="error" id="dateError"></span>
        </div>
      </div>

      <div class="form-buttons">
        <button type="button" id="backButton" class="back-button">Back</button>
        <button type="submit">Create Client ID</button>
      </div>
    </form>
    <div id="confirmation" class="confirmation"></div>
  </main>

  <div id="popup" class="popup">
    <div class="popup-content">
      <span class="close">&times;</span>
      <p id="popupMessage"></p>
    </div>
  </div>

  <footer class="main-footer">
    <p>&copy; 2024 My Application. All rights reserved.</p>
    <nav>
      <ul>
        <li><a href="terms.html">Terms of Service</a></li>
        <li><a href="privacy.html">Privacy Policy</a></li>
      </ul>
    </nav>
  </footer>







 C:\angular\resource-management\src\app\pages\create-client> 



app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule, Routes } from '@angular/router';

import { AppComponent } from './app.component';
import { CreateClientComponent } from './components/create-client/create-client.component';

const routes: Routes = [
  { path: 'create-client', component: CreateClientComponent },
  { path: '', redirectTo: '/create-client', pathMatch: 'full' }
];

@NgModule({
  declarations: [AppComponent, CreateClientComponent],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
    RouterModule.forRoot(routes)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }



create-client.component.ts
import { Component } from '@angular/core';
import { ClientService } from '../../services/client.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-create-client',
  templateUrl: './create-client.component.html',
  styleUrls: ['./create-client.component.css']
})
export class CreateClientComponent {
  clientObj: any = {
    employeeName: '',
    employeeGender: 'Female',
    dateOfJoining: '',
    role: '',
    phoneNumber: '',
    email: '',
    status: 'ACTIVE'
  };

  constructor(private clientService: ClientService, private router: Router) {}

  createClient() {
    if (!this.clientObj.employeeName || !this.clientObj.email) {
      alert('Name and Email are required!');
      return;
    }

    this.clientService.registerClient(this.clientObj).subscribe(
      (response) => {
        alert('Client registered successfully!');
        this.router.navigateByUrl('/create-client');
      },
      (error) => {
        console.error('Error:', error);
        alert('Failed to register client. Please try again.');
      }
    );
  }
}




create-client.component.html
<h2>Create Client</h2>
<form (ngSubmit)="createClient()">
  <label>Name:</label>
  <input type="text" [(ngModel)]="clientObj.employeeName" name="employeeName" required />

  <label>Gender:</label>
  <select [(ngModel)]="clientObj.employeeGender" name="employeeGender">
    <option value="Male">Male</option>
    <option value="Female">Female</option>
  </select>

  <label>Date of Joining:</label>
  <input type="date" [(ngModel)]="clientObj.dateOfJoining" name="dateOfJoining" required />

  <label>Role:</label>
  <input type="text" [(ngModel)]="clientObj.role" name="role" required />

  <label>Phone Number:</label>
  <input type="text" [(ngModel)]="clientObj.phoneNumber" name="phoneNumber" required />

  <label>Email:</label>
  <input type="email" [(ngModel)]="clientObj.email" name="email" required />

  <label>Status:</label>
  <input type="text" [(ngModel)]="clientObj.status" name="status" readonly />

  <button type="submit">Register</button>
</form>
 create-client.component.css
form {
  display: flex;
  flex-direction: column;
  max-width: 400px;
  margin: auto;
}

label {
  margin-top: 10px;
}

input, select {
  padding: 8px;
  margin-top: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  margin-top: 15px;
  padding: 10px;
  background-color: blue;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: darkblue;
}
client.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ClientService {
  private apiUrl = 'http://localhost:9081/clients/register';

  constructor(private http: HttpClient) {}

  registerClient(clientData: any): Observable<any> {
    return this.http.post(this.apiUrl, clientData);
  }
}


















Post: http://localhost:9081/clients/register
{
    "employeeName": "Aruna",
    "employeeGender": "Female",
    "dateOfJoining": "2023-02-01",
    "role": "Trainer",
    "phoneNumber": "9834567890",
    "email": "arunapatil2002@gmail.com",
    "status": "ACTIVE"
}









login() {
  // Log original values for debugging
  console.log('Before Trim - Username:', this.loginObj.username);
  console.log('Before Trim - Password:', this.loginObj.password);

  // Trim spaces
  this.loginObj.username = this.loginObj.username.trim();
  this.loginObj.password = this.loginObj.password.trim();

  // Log trimmed values for debugging
  console.log('After Trim - Username:', this.loginObj.username);
  console.log('After Trim - Password:', this.loginObj.password);

  if (!this.loginObj.username || !this.loginObj.password) {
    alert('Username and Password are required!');
    return;
  }

  this.userService.onLogin(this.loginObj).subscribe(
    (res: any) => {
      if (res && res.token) {
        localStorage.setItem('userApp', JSON.stringify(res));
        this.router.navigateByUrl('/user-list');
      } else {
        alert('Invalid credentials. Please try again.');
      }
    },
    (error) => {
      console.error('Login Error:', error);
      if (error.status === 403) {
        alert('Access Denied! Invalid credentials.');
      } else {
        alert('Login failed. Please check your credentials or try again later.');
      }
    }
  );
}





















import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
  loginObj: any = {
    username: '',
    password: ''
  };

  userService = inject(UserService);
  router = inject(Router);

  login() {
    // Trim whitespace from username and password
    this.loginObj.username = this.loginObj.username.trim();
    this.loginObj.password = this.loginObj.password.trim();

    console.log('Login Attempt:', this.loginObj); // Debugging purpose

    if (!this.loginObj.username || !this.loginObj.password) {
      alert('Username and Password are required!');
      return;
    }

    this.userService.onLogin(this.loginObj).subscribe(
      (res: any) => {
        if (res && res.token) {
          localStorage.setItem('userApp', JSON.stringify(res));
          this.router.navigateByUrl('/user-list');
        } else {
          alert('Invalid credentials. Please try again.');
        }
      },
      (error) => {
        console.error('Login Error:', error);
        if (error.status === 403) {
          alert('Access Denied! Invalid credentials.');
        } else {
          alert('Login failed. Please check your credentials or try again later.');
        }
      }
    );
  }
}


























import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';
import { HttpHeaders } from '@angular/common/http';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
  loginObj: any = {
    username: '',
    password: ''
  };

  userService = inject(UserService);
  router = inject(Router);

  login() {
    if (!this.loginObj.username || !this.loginObj.password) {
      alert('Username and Password are required!');
      return;
    }

    this.userService.onLogin(this.loginObj).subscribe(
      (res: any) => {
        if (res && res.token) {
          localStorage.setItem('userApp', JSON.stringify(res));
          this.router.navigateByUrl('/user-list');
        } else {
          alert('Invalid credentials. Please try again.');
        }
      },
      (error) => {
        console.error('Login Error:', error);
        if (error.status === 403) {
          alert('Access Denied! Invalid credentials.');
        } else {
          alert('Login failed. Please check your credentials or try again later.');
        }
      }
    );
  }
}
