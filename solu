
 C:\angular\resource-management\src\app\pages\create-client> 



app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule, Routes } from '@angular/router';

import { AppComponent } from './app.component';
import { CreateClientComponent } from './components/create-client/create-client.component';

const routes: Routes = [
  { path: 'create-client', component: CreateClientComponent },
  { path: '', redirectTo: '/create-client', pathMatch: 'full' }
];

@NgModule({
  declarations: [AppComponent, CreateClientComponent],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
    RouterModule.forRoot(routes)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }



create-client.component.ts
import { Component } from '@angular/core';
import { ClientService } from '../../services/client.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-create-client',
  templateUrl: './create-client.component.html',
  styleUrls: ['./create-client.component.css']
})
export class CreateClientComponent {
  clientObj: any = {
    employeeName: '',
    employeeGender: 'Female',
    dateOfJoining: '',
    role: '',
    phoneNumber: '',
    email: '',
    status: 'ACTIVE'
  };

  constructor(private clientService: ClientService, private router: Router) {}

  createClient() {
    if (!this.clientObj.employeeName || !this.clientObj.email) {
      alert('Name and Email are required!');
      return;
    }

    this.clientService.registerClient(this.clientObj).subscribe(
      (response) => {
        alert('Client registered successfully!');
        this.router.navigateByUrl('/create-client');
      },
      (error) => {
        console.error('Error:', error);
        alert('Failed to register client. Please try again.');
      }
    );
  }
}




create-client.component.html
<h2>Create Client</h2>
<form (ngSubmit)="createClient()">
  <label>Name:</label>
  <input type="text" [(ngModel)]="clientObj.employeeName" name="employeeName" required />

  <label>Gender:</label>
  <select [(ngModel)]="clientObj.employeeGender" name="employeeGender">
    <option value="Male">Male</option>
    <option value="Female">Female</option>
  </select>

  <label>Date of Joining:</label>
  <input type="date" [(ngModel)]="clientObj.dateOfJoining" name="dateOfJoining" required />

  <label>Role:</label>
  <input type="text" [(ngModel)]="clientObj.role" name="role" required />

  <label>Phone Number:</label>
  <input type="text" [(ngModel)]="clientObj.phoneNumber" name="phoneNumber" required />

  <label>Email:</label>
  <input type="email" [(ngModel)]="clientObj.email" name="email" required />

  <label>Status:</label>
  <input type="text" [(ngModel)]="clientObj.status" name="status" readonly />

  <button type="submit">Register</button>
</form>
 create-client.component.css
form {
  display: flex;
  flex-direction: column;
  max-width: 400px;
  margin: auto;
}

label {
  margin-top: 10px;
}

input, select {
  padding: 8px;
  margin-top: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  margin-top: 15px;
  padding: 10px;
  background-color: blue;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: darkblue;
}
client.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ClientService {
  private apiUrl = 'http://localhost:9081/clients/register';

  constructor(private http: HttpClient) {}

  registerClient(clientData: any): Observable<any> {
    return this.http.post(this.apiUrl, clientData);
  }
}


















Post: http://localhost:9081/clients/register
{
    "employeeName": "Aruna",
    "employeeGender": "Female",
    "dateOfJoining": "2023-02-01",
    "role": "Trainer",
    "phoneNumber": "9834567890",
    "email": "arunapatil2002@gmail.com",
    "status": "ACTIVE"
}









login() {
  // Log original values for debugging
  console.log('Before Trim - Username:', this.loginObj.username);
  console.log('Before Trim - Password:', this.loginObj.password);

  // Trim spaces
  this.loginObj.username = this.loginObj.username.trim();
  this.loginObj.password = this.loginObj.password.trim();

  // Log trimmed values for debugging
  console.log('After Trim - Username:', this.loginObj.username);
  console.log('After Trim - Password:', this.loginObj.password);

  if (!this.loginObj.username || !this.loginObj.password) {
    alert('Username and Password are required!');
    return;
  }

  this.userService.onLogin(this.loginObj).subscribe(
    (res: any) => {
      if (res && res.token) {
        localStorage.setItem('userApp', JSON.stringify(res));
        this.router.navigateByUrl('/user-list');
      } else {
        alert('Invalid credentials. Please try again.');
      }
    },
    (error) => {
      console.error('Login Error:', error);
      if (error.status === 403) {
        alert('Access Denied! Invalid credentials.');
      } else {
        alert('Login failed. Please check your credentials or try again later.');
      }
    }
  );
}





















import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
  loginObj: any = {
    username: '',
    password: ''
  };

  userService = inject(UserService);
  router = inject(Router);

  login() {
    // Trim whitespace from username and password
    this.loginObj.username = this.loginObj.username.trim();
    this.loginObj.password = this.loginObj.password.trim();

    console.log('Login Attempt:', this.loginObj); // Debugging purpose

    if (!this.loginObj.username || !this.loginObj.password) {
      alert('Username and Password are required!');
      return;
    }

    this.userService.onLogin(this.loginObj).subscribe(
      (res: any) => {
        if (res && res.token) {
          localStorage.setItem('userApp', JSON.stringify(res));
          this.router.navigateByUrl('/user-list');
        } else {
          alert('Invalid credentials. Please try again.');
        }
      },
      (error) => {
        console.error('Login Error:', error);
        if (error.status === 403) {
          alert('Access Denied! Invalid credentials.');
        } else {
          alert('Login failed. Please check your credentials or try again later.');
        }
      }
    );
  }
}


























import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';
import { HttpHeaders } from '@angular/common/http';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
  loginObj: any = {
    username: '',
    password: ''
  };

  userService = inject(UserService);
  router = inject(Router);

  login() {
    if (!this.loginObj.username || !this.loginObj.password) {
      alert('Username and Password are required!');
      return;
    }

    this.userService.onLogin(this.loginObj).subscribe(
      (res: any) => {
        if (res && res.token) {
          localStorage.setItem('userApp', JSON.stringify(res));
          this.router.navigateByUrl('/user-list');
        } else {
          alert('Invalid credentials. Please try again.');
        }
      },
      (error) => {
        console.error('Login Error:', error);
        if (error.status === 403) {
          alert('Access Denied! Invalid credentials.');
        } else {
          alert('Login failed. Please check your credentials or try again later.');
        }
      }
    );
  }
}
