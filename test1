Proof-coverage.component.ts
import { Component, Input, OnChanges, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
 
import { ProofOfCoverageDialogComponent } from './proof-of-coverage-dialog/proof-of-coverage-dialog.component';
import { environment } from '@src/environments/environment';
import { IdCardService } from '@src/app/core/services/id-card/id-card.service';
import { StateEligibilityService } from '@src/app/core/services/state-eligibility/state-eligibility.service';
import {
  IdCardsConfigurationModel,
  RenewalIDCardModel,
  SubjectOfInsuranceConfigurationModel,
} from '@src/app/core/interfaces/id-card.interface';
import { DialogTypes, EXPANSION_STATES, ID_CARD_CONST } from '@src/app/core/constants/id-cards.constants';
import { ScreenSizeDetectionService } from '@src/app/shared/screen-size-detection/screen-size-detection.service';
import { MaintenanceFlagService } from '@src/app/core/services/maintenance-flag/maintenance-flag.service';
import { maintenanceFlagsConstants } from '@src/app/core/constants/maintenance.constants';
import { CSS_CONST } from '@src/app/core/constants/css.constants';
import { PolicySummaryService } from '@src/app/core/services/policy-summary/policy-summary.service';
import { TuiSpinnerService, TuiTrackerService } from 'ng-tractor-ui';
import { finalize, Subscription } from 'rxjs';
import { FeatureFlagsService } from '@src/app/core/services/featureFlags/feature-flags.service';
import { featureFlagConstants } from '@src/app/core/constants/feature-flag.constants';
import { MixpanelService } from '@src/app/core/services/mixpanel/mixpanel.service';
import { eventNames } from '@src/app/core/constants/mixpanel-constants';
import { GLOBAL_CONST } from '@src/app/core/constants/core-css.constants';
import { ISegmentTrackingModel } from 'ng-tractor-ui/tracker/tracker';
import { segEventNames, segmentEntrySource, segmentParams } from '@src/app/core/constants/segment-constants';
import { MakePaymentService } from '@src/app/core/services/make-payment.service';
import { LiveChatService } from '@src/app/core/services/live-chat/live-chat.service';
 
@Component({
  selector: 'app-proof-of-coverage',
  templateUrl: './proof-of-coverage.component.html',
  styleUrls: ['./proof-of-coverage.component.scss'],
  encapsulation: ViewEncapsulation.None,
})
export class ProofOfCoverageComponent implements OnInit, OnChanges, OnDestroy {
  @Input() data: IdCardsConfigurationModel;
  @Input() renewal: boolean;
  private readonly FL = 'FL';
  private readonly APPLE_DEVICES = ['iPhone', 'iPad', 'iPod'];
  private readonly iosFirefox = 'FxiOS';
  subtitle: string;
  effectiveDate: string;
  expirationDate: string;
  shouldRenderEvidenceOfInsurance: boolean;
  smallCardLink: string;
  largeCardLink: string;
  showButtons: boolean;
  showFaxIdCard: boolean;
  showMailIdCard: boolean;
  showEmailIdCard: boolean;
  showAgentMessage: boolean;
  isFloridaPolicy: boolean;
  phone: string;
  isMobileView: boolean;
  isExpansionState = false;
  isIdCardAvailable: boolean;
  shouldDisplayAppleWallet = false;
  shouldDisplayGoogleWallet = false;
  shouldDisplayGoogleWalletForFWSAuto = false;
  shouldDisplayAppleWalletForFWSAuto = false;
  isFWSAuto = false;
  isIosFirefox = false;
  isIosDevice = false;
  isShowExpirationDate = false;
  hasActiveARSOrA360Auto = false;
  hasNoActiveARSAndA360Auto = false;
  isA360FedPolicy = false;
  disableDownloadIdCardsButton: boolean;
  viewOrDownloadIdCardAriaLabel: string;
  GOOGLE_WALLET = ID_CARD_CONST.wallets.googleWallet;
  APPLE_WALLET = ID_CARD_CONST.wallets.appleWallet;
  isAccountIA = environment.isFMLogin;
  allowArsCSSRedirect: boolean;
  displayNonFeatureFlagIdCard: boolean;
  isShowMailIDCard: boolean;
  FAX = DialogTypes.FAX;
  MAIL = DialogTypes.MAIL;
  EMAIL = DialogTypes.EMAIL;
  NJDIALOG = DialogTypes.NJDIALOG;
  fmBwIdCardDocumentText: string;
  fmBwIdCardTuiTrackingId: string;
  idCardTitle: string;
  displayA360IdCardAvailabilities: boolean;
  enableMobileWalletsForRenewalIdCards: boolean;
  isBW = environment.isBWLogin;
 
  readonly RENEWAL = 'Renewal';
  readonly CURRENT = 'Current';
  readonly SMALLTEXT = 'Small';
  readonly LARGETEXT = 'Large';
  readonly DISABLED = 'Disabled';
  readonly NEW_TAB = 'Opens in new tab';
  readonly ANDROID_DEVICE = 'android';
  private readonly ID_CARD_TITLE = 'ID card';
  private readonly ID_CARD_MULTI = 'ID cards';
  private readonly PAPER_SIZE = 'PAPER SIZE';
  private readonly DOWNLOAD_VIEW = 'DOWNLOAD/VIEW';
  isShowPaperSize: boolean;
  enableIdCardFormsBannerFlag: boolean;
  stateEligibilitySubscription$: Subscription;
  private readonly PAGE_EVENT = 'ID card page';
  showAddressSection: boolean;
  private readonly CSS_IDCARDS_PAPER_SIZE_CLICK = 'CSS_IDCARDS_PAPER_SIZE_CLICK';
  private readonly CSS_IDCARDS_DOWNLOAD_VIEW_CLICK = 'CSS_IDCARDS_DOWNLOAD_VIEW_CLICK';
  private readonly CLICKED = 'Clicked';
  private readonly RENEWAL_PROOF_OF_COVERAGE = 'renewal proof of coverage';
  private readonly CURRENT_PROOF_OF_COVERAGE = 'current proof of coverage';
  private readonly PAPER_SIZE_TEXT = 'paper size';
  private readonly DOWNLOAD_VIEW_TEXT = 'download or view';
  coverageTypeAriaLabel: string = '';
  fmBwIdCardDocumentTextAriaLabel: string = '';
  cardType: string = Math.random().toString(36).substring(2);
 
  constructor(
    public dialogService: MatDialog,
    public idCardService: IdCardService,
    public screenSizeDetectionService: ScreenSizeDetectionService,
    private stateEligibilityService: StateEligibilityService,
    private maintenanceFlagService: MaintenanceFlagService,
    private featureFlagService: FeatureFlagsService,
    private policySummaryService: PolicySummaryService,
    private spinner: TuiSpinnerService,
    private analyticsService: MixpanelService,
    private tuiTrackerService: TuiTrackerService,
    private makePaymentService: MakePaymentService,
    private liveChatService: LiveChatService
  ) {}
 
  ngOnInit() {
    this.checkFeatureFlags();
    this.isFloridaPolicy = this.stateEligibilityService.getState(this.data.agentOfRecordId) === this.FL;
    this.isMobileView = this.screenSizeDetectionService.isMobileView();
    this.isIosFirefox = window.navigator.userAgent.indexOf(this.iosFirefox) > -1;
    this.shouldDisplayAppleWallet = this.displayAppleWallet();
    this.shouldDisplayGoogleWallet = this.displayGoogleWallet();
    this.updateDisplayData();
    this.checkIfCurrentPolicyIsExpansion();
    if (this.data?.isForemostPolicy) {
      this.setFmUnits();
    }
    this.analyticsService.setEntrySource(this.PAGE_EVENT);
    this.isFWSAuto = this.data.isActiveARSAuto || this.data.isActiveA360Auto;
    this.shouldDisplayGoogleWalletForFWSAuto = this.shouldDisplayGoogleWallet && this.isFWSAuto;
    this.shouldDisplayAppleWalletForFWSAuto = this.shouldDisplayAppleWallet && this.isFWSAuto;
  }
 
  ngOnChanges() {
    this.checkFeatureFlags();
    this.updateDisplayData();
    this.checkIfCurrentPolicyIsExpansion();
    this.tuiTrackerService.addToState({
      policy_number: this.data?.policyContractNumber.replace(/-/g, ''),
      policy_source: this.data?.policySource,
      description: this.data?.policyType,
      ecn: this.makePaymentService.getEcnForTracking(),
      css_id: this.makePaymentService.getCssIdForTracking(),
    });
  }
 
  updateDisplayData() {
    this.isIdCardAvailable = this.isFloridaPolicy || this.isExpansionState;
    this.showButtons = this.data.cardLink && Object.values(this.data.cardLink).some(link => link);
    this.subtitle = this.renewal
      ? ID_CARD_CONST.proofOfCoverageSubtitle.renewal
      : ID_CARD_CONST.proofOfCoverageSubtitle.current;
    this.effectiveDate = this.renewal ? this.data.renewalEffectiveDate : this.data.effectiveDate;
    this.expirationDate = this.renewal ? this.data.renewalExpiryDate : this.data.expirationDate;
    this.shouldRenderEvidenceOfInsurance = !this.isFloridaPolicy;
    const smallCardLink = this.data.cardLink ? this.data.cardLink?.small : null;
    const largeCardLink = this.data.cardLink ? this.data.cardLink?.large : null;
    this.smallCardLink = this.renewal ? this.data.renewalIDCards?.small : smallCardLink;
    this.largeCardLink = this.renewal ? this.data.renewalIDCards?.large : largeCardLink;
    // No FAX and MAIL available for BW login
    this.showFaxIdCard = this.data.showFaxIdCard && !this.isExpansionState && !this.isBW;
    this.showMailIdCard = this.data.showMailIdCard && !this.isExpansionState && !this.isBW;
    this.showEmailIdCard = this.data.showEmailIdCard;
    this.disableDownloadIdCardsButton = this.data.isFwsArsEnterpriseSearchEnabled;
    this.viewOrDownloadIdCardAriaLabel = this.disableDownloadIdCardsButton ? this.DISABLED : this.NEW_TAB;
    // shows contact agent message if there is not fax and mail buttons is a PLA or GWPC policy
    this.showAgentMessage =
      !(this.data.showFaxIdCard || this.data.showMailIdCard) && !this.data.isForemostPolicy && !this.data.isBWPolicy;
    this.fmBwIdCardDocumentText = this.data.isForemostPolicy ? this.DOWNLOAD_VIEW : this.PAPER_SIZE;
    this.fmBwIdCardDocumentTextAriaLabel = this.data.isForemostPolicy ? this.DOWNLOAD_VIEW_TEXT : this.PAPER_SIZE_TEXT;
    this.coverageTypeAriaLabel = this.renewal ? this.RENEWAL_PROOF_OF_COVERAGE : this.CURRENT_PROOF_OF_COVERAGE;
    const cardTypeValue = this.renewal ? this.RENEWAL : this.CURRENT;
    this.cardType = cardTypeValue + Math.random().toString(36).substring(2);
    this.fmBwIdCardTuiTrackingId = this.data.isForemostPolicy
      ? this.CSS_IDCARDS_DOWNLOAD_VIEW_CLICK
      : this.CSS_IDCARDS_PAPER_SIZE_CLICK;
    const hasMultiVehiclePolicy =
      this.data.subjectOfInsurance?.length > 1 ||
      this.data.units?.length > 1 ||
      this.data.selectedPolicy?.['subjectOfInsurance']?.length > 1;
    this.idCardTitle = hasMultiVehiclePolicy ? this.ID_CARD_MULTI : this.ID_CARD_TITLE;
    this.isShowPaperSize = this.data.isBWIDCardAvailable || this.data.isForemostPolicy || this.data.isFWSPolicy;
    this.phone = CSS_CONST.customerServiceNumber;
    this.isShowMailIDCard = this.data.isActiveARSAuto && !this.data.isForemostPolicy && !this.data.isBWPolicy;
    this.setFWSIDCardDisplayProperties();
    const featureFlagArsID = this.allowArsCSSRedirect && !this.enableIdCardFormsBannerFlag;
    const ars360AutoIdCard = this.data.isActiveA360Auto && !this.enableIdCardFormsBannerFlag;
    this.displayNonFeatureFlagIdCard = !featureFlagArsID || ars360AutoIdCard;
    this.showAddressSection =
      !!this.data?.address?.address1?.toString().trim().length ||
      !!this.data?.address?.address2?.toString().trim().length;
  }
 
  setFWSIDCardDisplayProperties() {
    this.isShowExpirationDate =
      Boolean(this.data.expirationDate) && !this.data.isActiveARSAuto && !this.data.isActiveA360Auto;
    this.hasActiveARSOrA360Auto = this.data.isActiveARSAuto || this.data.isActiveA360Auto;
    this.hasNoActiveARSAndA360Auto = !this.data.isActiveARSAuto && !this.data.isActiveA360Auto;
    this.isA360FedPolicy = this.data.isActiveA360Auto && this.data.isFedPolicy;
  }
 
  displayIdCardClick(cardType: string, event: MouseEvent, disableDownloadIdCardsButton?): void {
    if (disableDownloadIdCardsButton) return;
    const cardUrl = cardType === this.SMALLTEXT ? this.smallCardLink : this.largeCardLink;
    this.displayIDCard(cardUrl, event);
  }
 
  displayIDCard(cardUrl: string, event?: MouseEvent): void {
    if (event) {
      event.preventDefault();
    }
    window.open(cardUrl, '_blank');
  }
 
  evidenceClick(renewalFlag: boolean, vehicle: SubjectOfInsuranceConfigurationModel, event: MouseEvent): void {
    event.preventDefault();
    const cardUrl = renewalFlag ? vehicle.renewalEvidenceOfInsuranceLink : vehicle.evidenceOfInsuranceLink;
    window.open(cardUrl, '_blank');
  }
 
  openDialog(type: DialogTypes, cardType?: string, encryptedDocumentId?: string): void {
    const dialogData: MatDialogConfig = {
      maxWidth: this.data.dialogData.width,
      data: this.data.dialogData[type] || this.data.nJDialog.data,
      width: '92vw',
      maxHeight: '92vh',
      height: 'auto',
    };
    const dialogRef = this.dialogService.open(ProofOfCoverageDialogComponent, dialogData);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const cardTypeVal = cardType;
    if (type !== this.NJDIALOG) {
      dialogRef.afterClosed().subscribe(inputValue => {
        if (inputValue === undefined) {
          return;
        }
        const segmentParams = this.getSegmentParamsForDialogData(type);
        if (!this.isBW && (this.data.isForemostPolicy || this.data.isBWPolicy)) {
          // FM and BW only have large id cards which matches encryptedDocumentId field.
          this.idCardService.sendIdCard(inputValue, type, encryptedDocumentId, segmentParams);
          return;
        }
        const documentId = this.getIdCardsDocumentId(type, this.data, this.renewal);
 
        this.idCardService.sendIdCard(inputValue, type, documentId, segmentParams, this.data);
      });
    } else {
      dialogRef.afterClosed().subscribe(isDownload => {
        if (isDownload) {
          this.displayIDCard(this.data.nJDialog?.data?.idUrl);
        }
      });
    }
  }
 
  getSegmentParamsForDialogData(type: DialogTypes): ISegmentTrackingModel {
    if (!type) {
      return {};
    }
    let action;
    let dialog_name;
    if (type === this.MAIL) {
      action = ID_CARD_CONST.dialogData.mail.trackCta2Text;
      dialog_name = ID_CARD_CONST.dialogData.mail.title;
    } else if (type === this.EMAIL) {
      action = ID_CARD_CONST.dialogData.email.trackCta2Text;
      dialog_name = ID_CARD_CONST.dialogData.email.title;
    } else if (type === this.FAX) {
      action = ID_CARD_CONST.dialogData.fax.trackCta2Text;
      dialog_name = ID_CARD_CONST.dialogData.fax.title;
    } else {
      action = '';
      dialog_name = '';
    }
    return {
      action,
      dialog_name,
      step: this.ID_CARD_MULTI,
      location: this.ID_CARD_TITLE,
      entry_source: segmentEntrySource.idCards,
      policy_number: this.data?.policyContractNumber.replace(/-/g, ''),
      policy_source: this.data?.policySource,
      description: this.data?.policyType,
    };
  }
 
  trackContactClick(phoneNumber: string): void {
    this.idCardService.trackPhoneNumberClick(phoneNumber);
  }
 
  getIdCardsDocumentId(type: DialogTypes, data: IdCardsConfigurationModel, isRenewal: boolean): string {
    // for email id card large id card link should be send in request.
    // encryptedDocumentId matches with small id card link
    if (!data) return '';
    if (type !== this.EMAIL) {
      return isRenewal ? data?.renewalIDCards?.encryptedLargeIdCardDocumentId : data.cardLink.encrypted;
    }
 
    return isRenewal
      ? data?.renewalIDCards?.encryptedLargeIdCardDocumentId
      : data?.cardLink?.encryptedLargeIdCardDocumentId;
  }
 
  displayAppleWallet() {
    const userAgent = window.navigator.userAgent.toLowerCase();
    const lowerCaseAppleDevices = this.APPLE_DEVICES.map(device => device.toLowerCase());
    this.isIosDevice = lowerCaseAppleDevices.map(devices => userAgent.indexOf(devices) > -1).some(e => !!e);
 
    const isDisplayAppleWallet = this.isIosDevice && !this.isIosFirefox;
    return isDisplayAppleWallet;
  }
 
  displayGoogleWallet() {
    const userAgent = window.navigator.userAgent.toLowerCase();
    const isDisplayGoogleWallet = userAgent.indexOf(this.ANDROID_DEVICE) > -1;
    return isDisplayGoogleWallet;
  }
 
  checkFeatureFlags(): void {
    const isIdCardFormsDown = this.maintenanceFlagService.isEnabledFromSession(maintenanceFlagsConstants.idCardForms);
 
    // idCardForms flag check is only applicable to PLA & PC policy sources
    this.enableIdCardFormsBannerFlag =
      isIdCardFormsDown && this.policySummaryService.getGwpcOrPlaPolicyBySource(this.data?.policySource);
 
    const isA360IdCardEmailEnabled = this.featureFlagService.isEnabledFromSession(
      featureFlagConstants.isA360IdCardEmailEnabled
    );
    const isA360IdCardFaxEnabled = this.featureFlagService.isEnabledFromSession(
      featureFlagConstants.isA360IdCardFaxEnabled
    );
    this.enableMobileWalletsForRenewalIdCards = this.featureFlagService.isEnabledFromSession(
      featureFlagConstants.enableMobileWalletsForRenewalIdCards
    );
    const isA360IdCardMailEnabled = this.featureFlagService.isEnabledFromSession(
      featureFlagConstants.isA360IdCardMailEnabled
    );
    this.displayA360IdCardAvailabilities =
      isA360IdCardEmailEnabled || isA360IdCardFaxEnabled || isA360IdCardMailEnabled;
    const featureFlagArsID = this.allowArsCSSRedirect && !this.enableIdCardFormsBannerFlag;
    const ars360AutoIdCard = this.data.isActiveA360Auto && !this.enableIdCardFormsBannerFlag;
    this.displayNonFeatureFlagIdCard = !featureFlagArsID || ars360AutoIdCard;
    if (this.data.isActiveARSAuto) {
      this.checkArsIdStateEligibility();
    }
  }
 
  checkArsIdStateEligibility() {
    const stateCode = this.data.selectedPolicy.state;
    this.stateEligibilitySubscription$ = this.stateEligibilityService
      .isStateEligibleForARSId(stateCode)
      .subscribe(isStateEligible => {
        this.allowArsCSSRedirect = isStateEligible;
        const featureFlagArsID = this.allowArsCSSRedirect && !this.enableIdCardFormsBannerFlag;
        const ars360AutoIdCard = this.data.isActiveA360Auto && !this.enableIdCardFormsBannerFlag;
        this.displayNonFeatureFlagIdCard = !featureFlagArsID || ars360AutoIdCard;
      });
  }
 
  displayWallet(type: string, soiId?: string) {
    let renewalDetails: RenewalIDCardModel;
    this.spinner.show();
    if (this.renewal) {
      renewalDetails = {
        renewalEffectiveDate: this.data?.renewalEffectiveDate,
        renewalExpiryDate: this.data?.renewalExpiryDate,
      };
    }
    const walletType: string =
      type === this.GOOGLE_WALLET ? segmentParams.addToGoogleWallet : segmentParams.addToAppleWallet;
    const trackParams: ISegmentTrackingModel = {
      action: `${walletType} ${this.CLICKED}`,
      step: segmentParams.idCards,
      entry_source: segmentEntrySource.idCards,
      policy_number: this.data?.policyContractNumber.replace(/-/g, ''),
      policy_source: this.data?.policySource,
      description: this.data?.policyType,
    };
    this.idCardService
      .displayWallet(type, soiId, renewalDetails, this.data?.policyContractNumber)
      .pipe(
        finalize(() => {
          this.spinner.hide();
          this.tuiTrackerService.track(segEventNames.iconClicked, trackParams);
        })
      )
      .subscribe(
        response => {
          if (response.passkit) {
            trackParams.successful = true;
            if (type === this.APPLE_WALLET) {
              this.addToAppleWallet(response.passkit);
            } else {
              const url = response.passkit;
              window.open(url, '_blank');
            }
          }
        },
        error => {
          trackParams.successful = false;
          trackParams.failure_reason = error.message;
        }
      );
  }
  addToAppleWallet(base64String: string) {
    const timeMillis = new Date().getTime().toString();
    const dataUrl = `data:application/vnd.apple.pkpass;base64,${base64String}`;
    const clickableElement = document.createElement('a');
    clickableElement.href = dataUrl;
    clickableElement.download = `${timeMillis}-${this.data.policyContractNumber}.pkpass`;
    /* eslint-disable  @typescript-eslint/no-unused-vars */
    const clickHandler = function () {
      setTimeout(() => {
        URL.revokeObjectURL(dataUrl);
        this.removeEventListener('click', clickHandler);
        (this.remove && (this.remove(), 1)) || (this.parentNode && this.parentNode.removeChild(this));
      }, 150);
    };
    clickableElement.click();
  }
 
  setFmUnits(): void {
    const fmUnits = this.data.units?.map(unit => {
      const link = this.renewal ? unit.renewlink : unit.link;
      const encryptedDocumentId = this.renewal ? unit.renewalEncryptedDocumentId : unit.encryptedDocumentId;
      return { ...unit, ...{ link, encryptedDocumentId } };
    });
    this.data = { ...this.data, units: fmUnits };
  }
 
  launchChatWindow(): void {
    this.liveChatService.openPublicLiveChatWindow('Proof of Coverage');
    this.tuiTrackerService.track(eventNames.chatOpen, {
      entrySource: this.analyticsService.getEntrySource(),
      authenticated: false,
    });
    return;
    const liveChatButton = document.querySelector('.helpButtonEnabled.uiButton') as HTMLElement;
    liveChatButton?.click();
    const params = {
      entrySource: this.analyticsService.getEntrySource(),
      authenticated: false,
    };
    this.tuiTrackerService.track(eventNames.chatOpen, params);
  }
 
  checkIfCurrentPolicyIsExpansion() {
    if (this.policySummaryService.isPolicySourceFWS(this.data?.policySource)) {
      this.phone = this.isAccountIA ? CSS_CONST.fwsIACustomerServiceNumber : CSS_CONST.fwscustomerServiceNumber;
      return;
    }
    if (this.policySummaryService.isPolicySourceForemost(this.data?.policySource)) {
      this.phone = CSS_CONST.fmIaOrEaPhoneNumber;
      return;
    }
    const policyState = this.stateEligibilityService.getState(this.data.agentOfRecordId);
    const isInExpansionStateList = EXPANSION_STATES[policyState] ? GLOBAL_CONST.YES : GLOBAL_CONST.NO;
    this.isExpansionState = isInExpansionStateList === GLOBAL_CONST.YES;
    this.phone = this.isExpansionState ? CSS_CONST.expansionContactNumber : CSS_CONST.customerServiceNumber;
  }
 
  ngOnDestroy(): void {
    if (this.stateEligibilitySubscription$) {
      this.stateEligibilitySubscription$.unsubscribe();
    }
  }
}


Proof-coverage.component.spec.ts
import { ComponentFixture, fakeAsync, TestBed } from '@angular/core/testing';
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { RouterTestingModule } from '@angular/router/testing';

import { MatDialog } from '@angular/material/dialog';

import { runAdaTests } from '@src/app/core/services/util/ADA.util';
import { ProofOfCoverageComponent } from './proof-of-coverage.component';
import { IdCardService } from '@src/app/core/services/id-card/id-card.service';
import { StateEligibilityService } from '@src/app/core/services/state-eligibility/state-eligibility.service';
import { ScreenSizeDetectionService } from '@src/app/shared/screen-size-detection/screen-size-detection.service';
import { DialogTypes, ID_CARD_CONST } from '@src/app/core/constants/id-cards.constants';
import { Observable, of, Subscription, throwError } from 'rxjs';
import { ProofOfCoverageDialogComponent } from './proof-of-coverage-dialog/proof-of-coverage-dialog.component';
import { SubjectOfInsuranceConfigurationModel } from '@src/app/core/interfaces/id-card.interface';
import { MaintenanceFlagService } from '@src/app/core/services/maintenance-flag/maintenance-flag.service';
import { PolicySummaryService } from '@src/app/core/services/policy-summary/policy-summary.service';
import { CSS_CONST } from '@src/app/core/constants/css.constants';
import { TuiSpinnerService, TuiTrackerService } from 'ng-tractor-ui';
import { FeatureFlagsService } from '@src/app/core/services/featureFlags/feature-flags.service';
import { featureFlagConstants } from '@src/app/core/constants/feature-flag.constants';
import { MixpanelService } from '@src/app/core/services/mixpanel/mixpanel.service';
import { MakePaymentService } from '@src/app/core/services/make-payment.service';
import { segmentEntrySource, segmentParams } from '@src/app/core/constants/segment-constants';
import { LiveChatService } from '@src/app/core/services/live-chat/live-chat.service';

describe('ProofOfCoverageComponent', () => {
  let component: ProofOfCoverageComponent;
  let fixture: ComponentFixture<ProofOfCoverageComponent>;
  const liveChatServiceStub: jasmine.SpyObj<LiveChatService> = jasmine.createSpyObj('LiveChatService', [
    'openPublicLiveChatWindow',
  ]);
  const idCardServiceSpy = jasmine.createSpyObj('IdCardService', [
    'trackPhoneNumberClick',
    'sendIdCard',
    'trackIdCardEvents',
    'displayWallet',
  ]);
  const matDialogSpy = jasmine.createSpyObj('matDialogSpy', ['open']);
  const stateEligibilityServiceSpy = jasmine.createSpyObj('StateEligibilityService', [
    'getState',
    'isStateEligibleForARSId',
  ]);
  const maintenanceFlagServiceSpy = jasmine.createSpyObj('MaintenanceFlagService', ['isEnabledFromSession']);
  const policySummaryServiceSpy = jasmine.createSpyObj('PolicySummaryService', [
    'isPolicySourceForemost',
    'getGwpcOrPlaPolicyBySource',
    'isPolicySourceFWS',
  ]);
  const screenSizeServiceSpy = jasmine.createSpyObj<ScreenSizeDetectionService>('ScreenSizeDetectionService', [
    'isMobileView',
  ]);
  const spinnerServiceSpy = jasmine.createSpyObj('TuiSpinnerService', ['show', 'hide']);
  const featureFlagServiceSpy = jasmine.createSpyObj('FeatureFlagService', ['isEnabled', 'isEnabledFromSession']);
  const analyticsServiceSpy = jasmine.createSpyObj('MixpanelService', ['getEntrySource', 'setEntrySource']);
  const tuiTrackerServiceSpy = jasmine.createSpyObj('TuiTrackerService', ['track', 'addToState']);
  const makePaymentServiceSpy = jasmine.createSpyObj('MakePaymentService', [
    'getEcnForTracking',
    'getCssIdForTracking',
  ]);
  let element: HTMLElement;
  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProofOfCoverageComponent],
      imports: [RouterTestingModule],
      schemas: [CUSTOM_ELEMENTS_SCHEMA],
      providers: [
        { provide: IdCardService, useValue: idCardServiceSpy },
        { provide: MatDialog, useValue: matDialogSpy },
        { provide: StateEligibilityService, useValue: stateEligibilityServiceSpy },
        { provide: ScreenSizeDetectionService, useValue: screenSizeServiceSpy },
        { provide: MaintenanceFlagService, useValue: maintenanceFlagServiceSpy },
        { provide: PolicySummaryService, useValue: policySummaryServiceSpy },
        { provide: TuiSpinnerService, useValue: spinnerServiceSpy },
        { provide: FeatureFlagsService, useValue: featureFlagServiceSpy },
        { provide: MixpanelService, useValue: analyticsServiceSpy },
        { provide: TuiTrackerService, useValue: tuiTrackerServiceSpy },
        { provide: MakePaymentService, useValue: makePaymentServiceSpy },
        { provide: LiveChatService, useValue: liveChatServiceStub },
      ],
    });
  });

  beforeEach(async () => {
    fixture = TestBed.createComponent(ProofOfCoverageComponent);
    component = fixture.componentInstance;
    element = fixture.nativeElement;
    component.data = idCardsConfigurationModel;
    component.renewal = false;
    stateEligibilityServiceSpy.getState.and.returnValue('FL');
    screenSizeServiceSpy.isMobileView.and.returnValue(false);
    stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(false));
    featureFlagServiceSpy.isEnabled.withArgs(featureFlagConstants.isA360IdCardEmailEnabled).and.returnValue(false);
    featureFlagServiceSpy.isEnabled.withArgs(featureFlagConstants.isA360IdCardFaxEnabled).and.returnValue(false);
    featureFlagServiceSpy.isEnabled
      .withArgs(featureFlagConstants.enableMobileWalletsForRenewalIdCards)
      .and.returnValue(false);
    featureFlagServiceSpy.isEnabled.withArgs(featureFlagConstants.isA360IdCardMailEnabled).and.returnValue(false);
    fixture.detectChanges();
    await fixture.whenStable();
  });

  let testNumber = 1;
  afterEach(done => {
    runAdaTests(fixture, 'ProofOfCoverageComponent', testNumber, done);
    testNumber++;
    fixture.destroy();
  });

  describe('#ngOnInit', () => {
    it('should set flags required on init', () => {
      spyOnProperty(window.navigator, 'userAgent', 'get').and.returnValue('Android');
      spyOn(component, 'displayAppleWallet').and.returnValue(false);
      spyOn(component, 'displayGoogleWallet').and.returnValue(false);
      spyOn(component, 'updateDisplayData');
      spyOn(component, 'checkFeatureFlags');
      spyOn(component, 'checkIfCurrentPolicyIsExpansion');

      component.ngOnInit();

      expect(component.isFloridaPolicy).toBeTruthy();
      expect(component.isMobileView).toBeFalsy();
      expect(component.isIosFirefox).toBeFalsy();
      expect(component.updateDisplayData).toHaveBeenCalled();
      expect(component.checkFeatureFlags).toHaveBeenCalled();
      expect(component.checkIfCurrentPolicyIsExpansion).toHaveBeenCalled();
    });

    it('should call setFmUnits if isForemostPolicy is true', () => {
      // Arrange
      component.data.isForemostPolicy = true;
      spyOn(component, 'setFmUnits');

      // Act
      component.ngOnInit();

      // Assert
      expect(component.setFmUnits).toHaveBeenCalled();
    });

    it('should set setEntrySource', () => {
      component.ngOnInit();

      expect(analyticsServiceSpy.setEntrySource).toHaveBeenCalledWith('ID card page');
    });

    it('should set isFWSAuto as true for ARS', () => {
      component.data.isActiveARSAuto = true;
      component.data.isActiveA360Auto = false;

      component.ngOnInit();

      expect(component.isFWSAuto).toBeTruthy();
    });

    it('should set isFWSAuto as true for A360', () => {
      component.data.isActiveARSAuto = false;
      component.data.isActiveA360Auto = true;

      component.ngOnInit();

      expect(component.isFWSAuto).toBeTruthy();
    });

    it('should set isFWSAuto as false', () => {
      component.data.isActiveARSAuto = false;
      component.data.isActiveA360Auto = false;

      component.ngOnInit();

      expect(component.isFWSAuto).toBeFalsy();
    });

    it('should set shouldDisplayGoogleWalletForFWSAuto as true', () => {
      component.data.isActiveARSAuto = true;
      component.data.isActiveA360Auto = true;
      component.isFWSAuto = true;
      component.shouldDisplayGoogleWallet = true;
      spyOn(component, 'displayGoogleWallet').and.returnValue(true);

      component.ngOnInit();

      expect(component.shouldDisplayGoogleWalletForFWSAuto).toBeTruthy();
    });

    it('should set false for shouldDisplayGoogleWalletForFWSAuto when not a fws auto ', () => {
      component.data.isActiveARSAuto = false;
      component.data.isActiveA360Auto = false;
      component.isFWSAuto = false;
      component.shouldDisplayGoogleWallet = true;
      spyOn(component, 'displayGoogleWallet').and.returnValue(true);

      component.ngOnInit();

      expect(component.shouldDisplayGoogleWalletForFWSAuto).toBeFalsy();
    });

    it('should set false for shouldDisplayGoogleWalletForFWSAuto when not eligble for google wallet', () => {
      component.isFWSAuto = true;
      component.shouldDisplayGoogleWallet = false;
      spyOn(component, 'displayGoogleWallet').and.returnValue(false);

      component.ngOnInit();

      expect(component.shouldDisplayGoogleWalletForFWSAuto).toBeFalsy();
    });

    it('should set shouldDisplayAppleWalletForFWSAuto as true', () => {
      component.data.isActiveARSAuto = true;
      component.data.isActiveA360Auto = true;
      component.isFWSAuto = true;
      component.shouldDisplayAppleWallet = true;
      spyOn(component, 'displayAppleWallet').and.returnValue(true);

      component.ngOnInit();

      expect(component.shouldDisplayAppleWalletForFWSAuto).toBeTruthy();
    });

    it('should set false for shouldDisplayAppleWalletForFWSAuto when not a fws auto ', () => {
      component.data.isActiveARSAuto = false;
      component.data.isActiveA360Auto = false;
      component.isFWSAuto = false;
      component.shouldDisplayAppleWallet = true;
      spyOn(component, 'displayAppleWallet').and.returnValue(true);

      component.ngOnInit();

      expect(component.shouldDisplayAppleWalletForFWSAuto).toBeFalsy();
    });

    it('should set false for shouldDisplayAppleWalletForFWSAuto when not eligble for Apple wallet', () => {
      component.isFWSAuto = true;
      component.shouldDisplayAppleWallet = false;
      spyOn(component, 'displayAppleWallet').and.returnValue(false);

      component.ngOnInit();

      expect(component.shouldDisplayAppleWalletForFWSAuto).toBeFalsy();
    });
  });

  describe('#updateDisplayData', () => {
    beforeEach(() => {
      component.allowArsCSSRedirect = false;
      component.showAddressSection = true;
    });
    it('should set showButtons to false if there are no links', () => {
      component.data = { ...idCardsConfigurationModelNoImages, isActiveA360Auto: true };
      component.data.isFwsArsEnterpriseSearchEnabled = true;
      component.allowArsCSSRedirect = true;
      component.data.cardLink = null;
      const expectedTitle = 'ID cards';
      spyOn(component, 'setFWSIDCardDisplayProperties');

      component.updateDisplayData();

      expect(component.setFWSIDCardDisplayProperties).toHaveBeenCalled();
      expect(component.disableDownloadIdCardsButton).toBeTruthy();
      expect(component.viewOrDownloadIdCardAriaLabel).toBe('Disabled');
      expect(component.idCardTitle).toBe(expectedTitle);
      expect(component.showAddressSection).toBeTruthy();
    });

    it('should set showAddressSection to false if there are no address1 or address2 in address object', () => {
      component.data = {
        ...idCardsConfigurationModelNoImages,
        isActiveA360Auto: true,
        address: { address1: null, address2: '' },
      };
      component.data.isFwsArsEnterpriseSearchEnabled = true;
      component.allowArsCSSRedirect = true;
      component.data.cardLink = null;
      spyOn(component, 'setFWSIDCardDisplayProperties');

      component.updateDisplayData();

      expect(component.showAddressSection).toBeFalsy();
    });

    it('should set idCardTitle to id card if subjectOfInsurance/units length < 1', () => {
      component.data = {
        ...idCardsConfigurationModel,
        subjectOfInsurance: [],
        selectedPolicy: { subjectOfInsurance: [] } as any,
      };
      component.data.isFwsArsEnterpriseSearchEnabled = true;
      const expectedTitle = 'ID card';

      component.updateDisplayData();

      expect(component.idCardTitle).toBe(expectedTitle);
      expect(component.showButtons).toBeTruthy();
    });

    it('should set idCardTitle to id card if units length > 1', () => {
      component.data = {
        ...idCardsConfigurationModelNoImages,
        subjectOfInsurance: [],
        units: [
          { ymm: 'xyz', vin: 'v123', link: 'url' },
          { ymm: 'abc', vin: 'v143', link: 'url' },
        ],
      };
      component.data.isFwsArsEnterpriseSearchEnabled = true;
      const expectedTitle = 'ID cards';

      component.updateDisplayData();

      expect(component.idCardTitle).toBe(expectedTitle);
    });
    it('should set idCardTitle to id card if selectedpolicy soi length > 1', () => {
      component.data = {
        ...idCardsConfigurationModelNoImages,
        subjectOfInsurance: [],
        units: [],
        selectedPolicy: {
          policyNumber: '12345',
          policyContractNumber: 'A12345',
          lineOfBusiness: 'Auto',
          subjectOfInsurance: [
            {
              vehicleYear: '2000',
              vehicleModel: 'Tesla ModelX 2020',
              vehicleMake: 'abc',
            },
            {
              vehicleYear: '2001',
              vehicleModel: 'Ford ModelX 2021',
              vehicleMake: 'abc',
            },
          ],
        },
      } as any;
      component.data.isFwsArsEnterpriseSearchEnabled = true;
      const expectedTitle = 'ID cards';

      component.updateDisplayData();

      expect(component.idCardTitle).toBe(expectedTitle);
    });

    it('should set disableDownloadIdCardsButton to false when fws ars is not under maintenance', () => {
      component.data = idCardsConfigurationModelNoImages;
      component.data.isFwsArsEnterpriseSearchEnabled = false;
      spyOn(component, 'setFWSIDCardDisplayProperties');

      component.updateDisplayData();

      expect(component.setFWSIDCardDisplayProperties).toHaveBeenCalled();
      expect(component.disableDownloadIdCardsButton).toBe(false);
      expect(component.viewOrDownloadIdCardAriaLabel).toBe('Opens in new tab');
    });

    it('should set shouldRenderEvidenceOfInsurance to false if it is a florida policy', () => {
      component.data = idCardsConfigurationModelNoImages;

      component.updateDisplayData();

      expect(component.shouldRenderEvidenceOfInsurance).toBe(false);
    });

    it('should set shouldRenderEvidenceOfInsurance to true if it is not a florida policy', () => {
      stateEligibilityServiceSpy.getState.and.returnValue('NY');
      component.isFloridaPolicy = false;
      component.data = idCardsConfigurationModelNoImages;
      component.data.cardLink = {
        small: 'smallLink',
        large: 'largeLink',
        encrypted: 'encryptedLink',
      };

      component.updateDisplayData();

      expect(component.shouldRenderEvidenceOfInsurance).toBe(true);
    });

    it('should set showAgentMessage to false if policy is not PLA or GWPC and set showAddressSection true if ut has address ', () => {
      component.data = { ...idCardsConfigurationModelNoImages, address: { address1: 'Texas', address2: null } };
      component.data.isBWPolicy = true;

      component.updateDisplayData();

      expect(component.showAgentMessage).toBe(false);
      expect(component.showAddressSection).toBeTruthy();
    });

    it('should set fmBwIdCardDocumentText to PAPER SIZE, if it is not a foremost policy', () => {
      component.data = idCardsConfigurationModelNoImages;
      component.data.isBWPolicy = true;
      component.data.isForemostPolicy = false;

      component.updateDisplayData();

      expect(component.fmBwIdCardDocumentText).toEqual('PAPER SIZE');
      expect(component.fmBwIdCardTuiTrackingId).toEqual('CSS_IDCARDS_PAPER_SIZE_CLICK');
      expect(component.fmBwIdCardDocumentTextAriaLabel).toEqual('paper size');
    });

    it('should set fmBwIdCardDocumentText to DOWNLOAD/VIEW, if it is a foremost policy', () => {
      component.data = idCardsConfigurationModelNoImages;
      component.data.isBWPolicy = false;
      component.data.isForemostPolicy = true;

      component.updateDisplayData();

      expect(component.fmBwIdCardDocumentText).toEqual('DOWNLOAD/VIEW');
      expect(component.fmBwIdCardTuiTrackingId).toEqual('CSS_IDCARDS_DOWNLOAD_VIEW_CLICK');
      expect(component.fmBwIdCardDocumentTextAriaLabel).toEqual('download or view');
      expect(component.coverageTypeAriaLabel).toEqual('current proof of coverage');
      expect(component.cardType).toContain('Current');
    });

    it('should form the right data if renewal is passed', () => {
      component.data = idCardsConfigurationModelRenewal;
      component.renewal = true;
      component.updateDisplayData();
      expect(component.subtitle).toBe('Renewal');
      expect(component.showButtons).toBe(true);
      expect(component.effectiveDate).toBe('date for renewal effective');
      expect(component.expirationDate).toBe('date for renewal expiration');
      expect(component.shouldRenderEvidenceOfInsurance).toBe(false);
      expect(component.smallCardLink).toBe('renewal_smallLink');
      expect(component.largeCardLink).toBe('renewal_largeLink');
      expect(component.showFaxIdCard).toBe(true);
      expect(component.showMailIdCard).toBe(true);
      expect(component.showAgentMessage).toBe(false);
      expect(component.coverageTypeAriaLabel).toEqual('renewal proof of coverage');
      expect(component.cardType).toContain('Renewal');
    });

    it('should not show fax, mail options if expansion policy', () => {
      component.isExpansionState = true;
      component.data = idCardsConfigurationModelRenewal;

      component.ngOnChanges();

      expect(component.showFaxIdCard).toBe(false);
      expect(component.showMailIdCard).toBe(false);
      expect(component.showEmailIdCard).toBe(true);
    });

    it('should not show fax, mail options if isBW login is true', () => {
      component.isExpansionState = false;
      component.isBW = true;
      component.data = idCardsConfigurationModelRenewal;

      component.ngOnChanges();

      expect(component.showFaxIdCard).toBe(false);
      expect(component.showMailIdCard).toBe(false);
      expect(component.showEmailIdCard).toBe(true);
    });

    it('should set id card availability boolean to true if florida state policy', () => {
      component.data = idCardsConfigurationModelRenewal;
      component.isFloridaPolicy = true;

      component.updateDisplayData();

      expect(component.isIdCardAvailable).toBe(true);
    });

    it('should set id card availability boolean to true if expansion state policy', () => {
      component.data = idCardsConfigurationModelRenewal;
      component.isExpansionState = true;

      component.updateDisplayData();
      expect(component.isIdCardAvailable).toBe(true);
    });

    it('should set true for isShowPaperSize when isBWIDCardAvailable is true', () => {
      component.data.isBWIDCardAvailable = true;

      component.updateDisplayData();
      expect(component.isShowPaperSize).toBe(true);
    });

    it('should set true for isShowPaperSize when policy is FM', () => {
      component.data.isBWIDCardAvailable = false;
      component.data.isForemostPolicy = true;

      component.updateDisplayData();
      expect(component.isShowPaperSize).toBe(true);
    });

    it('should set true for isShowPaperSize when policy is FWS', () => {
      component.data.isBWIDCardAvailable = false;
      component.data.isForemostPolicy = false;
      component.data.isFWSPolicy = true;

      component.updateDisplayData();
      expect(component.isShowPaperSize).toBe(true);
    });

    it('should set false for isShowPaperSize when policy is is not a FWS or BW', () => {
      component.data.isBWIDCardAvailable = false;
      component.data.isForemostPolicy = false;
      component.data.isFWSPolicy = false;

      component.updateDisplayData();
      expect(component.isShowPaperSize).toBe(false);
    });

    it('should set true for isShowMailIDCard when policy is active ARS auto and not a FM and BW', () => {
      component.data.isActiveARSAuto = true;
      component.data.isForemostPolicy = false;
      component.data.isBWPolicy = false;

      component.updateDisplayData();
      expect(component.isShowMailIDCard).toBe(true);
    });

    it('should set false for isShowMailIDCard when policy is not a active ARS auto and not a FM and BW', () => {
      component.data.isActiveARSAuto = false;
      component.data.isForemostPolicy = false;
      component.data.isBWPolicy = false;

      component.updateDisplayData();
      expect(component.isShowMailIDCard).toBe(false);
    });

    it('should set false for isShowMailIDCard when policy is active ARS auto and FM and BW', () => {
      component.data.isActiveARSAuto = true;
      component.data.isForemostPolicy = true;
      component.data.isBWPolicy = true;

      component.updateDisplayData();
      expect(component.isShowMailIDCard).toBe(false);
    });

    it('should set phone number for non FM policy', () => {
      policySummaryServiceSpy.isPolicySourceForemost.and.returnValue(false);

      component.updateDisplayData();
      expect(component.phone).toBe(CSS_CONST.customerServiceNumber);
    });

    it('should call checkIfCurrentPolicyIsExpansion()', () => {
      spyOn(component, 'checkIfCurrentPolicyIsExpansion');
      spyOn(component, 'checkFeatureFlags');

      component.ngOnChanges();
      expect(component.checkIfCurrentPolicyIsExpansion).toHaveBeenCalled();
      expect(component.checkFeatureFlags).toHaveBeenCalled();
    });

    it('should call segment add to state', () => {
      makePaymentServiceSpy.getEcnForTracking.and.returnValue('Ecn123');
      makePaymentServiceSpy.getCssIdForTracking.and.returnValue('Css123');
      component.data.policyContractNumber = '123-456-123';
      component.data.policySource = 'FWS-ARS';
      component.data.policyType = 'AUTO';

      component.ngOnChanges();

      expect(tuiTrackerServiceSpy.addToState).toHaveBeenCalledWith({
        policy_number: '123456123',
        policy_source: 'FWS-ARS',
        description: 'AUTO',
        ecn: 'Ecn123',
        css_id: 'Css123',
      });
    });
  });

  describe('#setFWSIDCardDisplayProperties', () => {
    it('should set hasActiveARSOrA360Auto true', () => {
      component.data = {
        ...component.data,
        expirationDate: '12/12/2020',
        isActiveA360Auto: true,
        isActiveARSAuto: false,
        isFedPolicy: false,
      };

      component.setFWSIDCardDisplayProperties();

      expect(component.isShowExpirationDate).toBe(false);
      expect(component.hasActiveARSOrA360Auto).toBe(true);
      expect(component.hasNoActiveARSAndA360Auto).toBe(false);
      expect(component.isA360FedPolicy).toBe(false);
    });
    it('should set hasNoActiveARSAndA360Auto true', () => {
      component.data = {
        ...component.data,
        expirationDate: '',
        isActiveA360Auto: false,
        isActiveARSAuto: false,
        isFedPolicy: false,
      };

      component.setFWSIDCardDisplayProperties();

      expect(component.isShowExpirationDate).toBe(false);
      expect(component.hasActiveARSOrA360Auto).toBe(false);
      expect(component.hasNoActiveARSAndA360Auto).toBe(true);
      expect(component.isA360FedPolicy).toBe(false);
    });
    it('should set isA360FedPolicy true', () => {
      component.data = {
        ...component.data,
        expirationDate: '',
        isActiveA360Auto: true,
        isActiveARSAuto: false,
        isFedPolicy: true,
      };

      component.setFWSIDCardDisplayProperties();

      expect(component.isA360FedPolicy).toBe(true);
    });
  });

  describe('#getIdCardsDocumentId', () => {
    it('should return document id for mail for current id card', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        cardLink: {
          small: 'smallLink',
          large: 'largeLink',
          encrypted: 'encrypted link',
        },
        renewalIDCards: {
          small: 'renewal_smallLink',
          large: 'renewal_largeLink',
          encrypted: null,
        },
      };
      const documentId = component.getIdCardsDocumentId(DialogTypes.MAIL, idCardsConfigMockData, false);

      expect(documentId).toEqual('encrypted link');
    });

    it('should return document id for mail for renewal id card', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        cardLink: {
          small: 'smallLink',
          large: 'largeLink',
          encrypted: 'encrypted link',
        },
        renewalIDCards: {
          small: 'renewal_smallLink',
          large: 'renewal_largeLink',
          encrypted: null,
          encryptedLargeIdCardDocumentId: 'encrypted_LargeDocument_Id',
        },
      };
      const documentId = component.getIdCardsDocumentId(DialogTypes.MAIL, idCardsConfigMockData, true);

      expect(documentId).toEqual('encrypted_LargeDocument_Id');
    });

    it('should return document id for Email current policy', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        cardLink: {
          small: 'smallLink',
          large: 'largeLink',
          encrypted: 'encrypted link',
          encryptedLargeIdCardDocumentId: 'current encryptedLargeIdCardDocumentId',
        },
        renewalIDCards: {
          small: 'renewal_smallLink',
          large: 'renewal_largeLink',
          encrypted: null,
          encryptedLargeIdCardDocumentId: 'renewal encryptedLargeIdCardDocumentId',
        },
      };
      const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, idCardsConfigMockData, false);

      expect(documentId).toEqual('current encryptedLargeIdCardDocumentId');
    });

    it('should return document id for Email renewal policy', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        cardLink: {
          small: 'smallLink',
          large: 'largeLink',
          encrypted: 'encrypted link',
          encryptedLargeIdCardDocumentId: 'current encryptedLargeIdCardDocumentId',
        },
        renewalIDCards: {
          small: 'renewal_smallLink',
          large: 'renewal_largeLink',
          encrypted: null,
          encryptedLargeIdCardDocumentId: 'renewal encryptedLargeIdCardDocumentId',
        },
      };
      const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, idCardsConfigMockData, true);

      expect(documentId).toEqual('renewal encryptedLargeIdCardDocumentId');
    });

    it('should handle empty data scenario', () => {
      const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, {} as any, true);

      expect(documentId).toEqual(undefined);
    });

    it('should handle null scenario', () => {
      const documentId = component.getIdCardsDocumentId(DialogTypes.EMAIL, null, true);

      expect(documentId).toEqual('');
    });
  });

  describe('#displayAppleWallet', () => {
    it('should set displayAppleWallet false for non ios devices', () => {
      spyOnProperty(window.navigator, 'userAgent', 'get').and.returnValue('Android');
      expect(component.displayAppleWallet()).toBeFalsy();
    });
    it('should set displayAppleWallet false for devices supporting apple wallet', () => {
      spyOnProperty(window.navigator, 'userAgent', 'get').and.returnValue('iPhone');
      expect(component.displayAppleWallet()).toBeTruthy();
    });
  });

  describe('#displayGoogleWallet', () => {
    it('should set displayGoogleWallet value for devices supporting google wallet', () => {
      spyOnProperty(window.navigator, 'userAgent', 'get').and.returnValue('Android');
      expect(component.displayGoogleWallet()).toBeTruthy();
    });
  });

  describe('#displayIdCardClick', () => {
    it('DisplayID card event should track mixpaneland open the document', () => {
      spyOn(window, 'open').and.callThrough();
      component.data.policySource = 'fm';

      component.displayIdCardClick('Small', {
        preventDefault: () => {
          return;
        },
      } as MouseEvent);

      expect(window.open).toHaveBeenCalled();
    });

    it('DisplayID card event should track mixpaneland and open the document with policytype as ARS for ARS auto', () => {
      component.data.isFWSPolicy = true;
      component.data.lineOfBusiness = 'AUTO';
      spyOn(window, 'open').and.callThrough();
      component.displayIdCardClick('Small', {
        preventDefault: () => {
          return;
        },
      } as MouseEvent);

      expect(window.open).toHaveBeenCalled();
    });

    it('displayID card event should track mixpaneland and open the document with policytype as ARS for ARS auto if disableDownloadIdCardsButton === false', () => {
      component.disableDownloadIdCardsButton = false;
      component.data.isFWSPolicy = true;
      component.data.lineOfBusiness = 'AUTO';
      spyOn(window, 'open').and.callThrough();

      component.displayIdCardClick('Small', {
        preventDefault: () => {
          return;
        },
      } as MouseEvent);

      expect(window.open).toHaveBeenCalled();
    });

    it('should go through full method if disableDownloadIdCardsButton is false', () => {
      const event = new MouseEvent('click');
      component.data.isFWSPolicy = true;
      component.data.lineOfBusiness = 'AUTO';

      spyOn(event, 'preventDefault');
      spyOn(component, 'displayIDCard');

      component.displayIdCardClick('Large', event, false);

      expect(component.displayIDCard).toHaveBeenCalled();
    });

    it('should return immediately if disabledDownloadIdCardsButton is true', () => {
      component.data.isFWSPolicy = true;
      component.data.lineOfBusiness = 'AUTO';
      spyOn(component, 'displayIDCard');

      component.displayIdCardClick(
        'Large',
        {
          preventDefault: () => {
            return;
          },
        } as MouseEvent,
        true
      );

      expect(component.displayIDCard).not.toHaveBeenCalled();
    });
  });

  describe('#openDialog', () => {
    beforeEach(() => {
      component.data = { ...idCardsConfigurationModel };
      idCardServiceSpy.sendIdCard.calls.reset();
    });
    it('should call dialogService with the right data for fax', () => {
      const dialogData = {
        maxWidth: component.data.dialogData.width,
        data: component.data.dialogData.fax,
        width: '92vw',
        maxHeight: '92vh',
        height: 'auto',
      };
      const matDialogRef = { afterClosed: () => new Observable() };
      matDialogSpy.open.and.returnValue(matDialogRef);
      // Act
      component.openDialog(DialogTypes.FAX);
      // Assert
      expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
    });

    it('should call dialogService with the right data for mail', () => {
      // Arrange
      const dialogData = {
        maxWidth: component.data.dialogData.width,
        data: component.data.dialogData.mail,
        width: '92vw',
        maxHeight: '92vh',
        height: 'auto',
      };
      const matDialogRef = { afterClosed: () => new Observable() };
      matDialogSpy.open.and.returnValue(matDialogRef);

      component.openDialog(DialogTypes.MAIL);

      expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
    });

    it('should call dialogService with the right data for email', () => {
      const dialogData = {
        maxWidth: component.data.dialogData.width,
        data: component.data.dialogData.email,
        width: '92vw',
        maxHeight: '92vh',
        height: 'auto',
      };
      const matDialogRef = { afterClosed: () => new Observable() };
      matDialogSpy.open.and.returnValue(matDialogRef);

      component.openDialog(DialogTypes.EMAIL);

      expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
    });

    it('should call dialogService with the right data for nJDialog', () => {
      const dialogData = {
        maxWidth: component.data.dialogData.width,
        data: component.data.nJDialog.data,
        width: '92vw',
        maxHeight: '92vh',
        height: 'auto',
      };
      const matDialogRef = { afterClosed: () => of(true) };
      matDialogSpy.open.and.returnValue(matDialogRef);

      component.openDialog(DialogTypes.NJDIALOG);

      expect(matDialogSpy.open).toHaveBeenCalledWith(ProofOfCoverageDialogComponent, dialogData);
    });

    it('should send email id card request', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        isBWPolicy: false,
        isForemostPolicy: false,
        policyContractNumber: '0234565',
        policySource: 'PLA',
        policyType: 'Auto',
      };
      component.data = idCardsConfigMockData;
      component.renewal = true;
      spyOn(component, 'getIdCardsDocumentId').and.returnValue('encryptedLargeIdCardDocumentId');
      const matDialogRef = { afterClosed: () => of('') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      component.openDialog(DialogTypes.EMAIL);
      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
        '',
        DialogTypes.EMAIL,
        'encryptedLargeIdCardDocumentId',
        {
          action: 'Send Email',
          dialog_name: 'Email my ID card',
          step: 'ID cards',
          location: 'ID card',
          entry_source: 'PreLoginIdCards',
          policy_number: '0234565',
          policy_source: 'PLA',
          description: 'Auto',
        },
        component.data
      );
      expect(component.getIdCardsDocumentId).toHaveBeenCalledWith(DialogTypes.EMAIL, idCardsConfigMockData, true);
    });

    it('should not call sendIdCard service method if input value is undefined', () => {
      const matDialogRef = { afterClosed: () => of(undefined) };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      component.openDialog(DialogTypes.FAX);

      expect(idCardServiceSpy.sendIdCard).not.toHaveBeenCalled();
    });

    it('should call sendIdCard service method with id card link for FM policies', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        isBWPolicy: false,
        isForemostPolicy: true,
        policyContractNumber: '0234565',
        policySource: 'fm',
      };
      component.data = idCardsConfigMockData;
      const matDialogRef = { afterClosed: () => of('test@1234.com') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      spyOn(component, 'getSegmentParamsForDialogData').and.returnValue({ action: '' });

      component.openDialog(DialogTypes.EMAIL, '', 'test');

      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith('test@1234.com', DialogTypes.EMAIL, 'test', {
        action: '',
      });
    });

    it('should call sendIdCard service method with id card link for Foremost policies', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        isBWPolicy: false,
        isForemostPolicy: true,
        policyContractNumber: '0234565',
        policySource: 'Foremost',
      };
      component.data = idCardsConfigMockData;
      const matDialogRef = { afterClosed: () => of('test@1234.com') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      spyOn(component, 'getSegmentParamsForDialogData').and.returnValue({ action: '' });

      component.openDialog(DialogTypes.EMAIL, '', 'test');

      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith('test@1234.com', DialogTypes.EMAIL, 'test', {
        action: '',
      });
    });

    it('should call sendIdCard service method with id card link for BW policies', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        isBWPolicy: true,
        isForemostPolicy: false,
        policyContractNumber: '0234565',
        policySource: 'bw',
      };
      component.data = idCardsConfigMockData;
      const matDialogRef = { afterClosed: () => of('test@1234.com') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      spyOn(component, 'getSegmentParamsForDialogData').and.returnValue({ action: '' });

      component.openDialog(DialogTypes.EMAIL, '', 'test');

      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith('test@1234.com', DialogTypes.EMAIL, 'test', {
        action: '',
      });
    });

    it('should call sendIdCard service method with id card link for FWS-A360 policies', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        lineOfBusiness: 'Auto',
        isActiveA360Auto: true,
        isActiveARSAuto: false,
        isFWSPolicy: true,
        isForemostPolicy: false,
        policyContractNumber: '12345',
        policySource: 'FWS-A360',
      };
      component.data = idCardsConfigMockData;
      component.data.isForemostPolicy = false;
      component.data.isBWPolicy = false;
      spyOn(component, 'getIdCardsDocumentId').and.returnValue('test');

      const matDialogRef = { afterClosed: () => of('test@1234.com') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      spyOn(component, 'getSegmentParamsForDialogData').and.returnValue({ action: '' });

      component.openDialog(DialogTypes.EMAIL, '', 'test');

      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
        'test@1234.com',
        DialogTypes.EMAIL,
        'test',
        { action: '' },
        component.data
      );
    });

    it('should call sendIdCard service method with id card link for FWS-ARS policies', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        lineOfBusiness: 'Auto',
        isActiveA360Auto: false,
        isActiveARSAuto: true,
        isFWSPolicy: true,
        isForemostPolicy: false,
        policyContractNumber: '12345',
        policySource: 'FWS-ARS',
      };
      component.data = idCardsConfigMockData;
      component.data.isForemostPolicy = false;
      component.data.isBWPolicy = false;
      const matDialogRef = { afterClosed: () => of('test@1234.com') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      spyOn(component, 'getIdCardsDocumentId').and.returnValue('test');
      spyOn(component, 'getSegmentParamsForDialogData').and.returnValue({ action: '' });

      component.openDialog(DialogTypes.EMAIL, '', 'test');

      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
        'test@1234.com',
        DialogTypes.EMAIL,
        'test',
        { action: '' },
        component.data
      );
    });

    it('should call sendIdCard service method with id card link for BW Login', () => {
      const idCardsConfigMockData = {
        ...idCardsConfigurationModel,
        lineOfBusiness: 'Auto',
        isActiveA360Auto: false,
        isActiveARSAuto: true,
        isFWSPolicy: false,
        isForemostPolicy: false,
        policyContractNumber: '12345',
        policySource: 'FWS-ARS',
      };
      component.data = idCardsConfigMockData;
      component.data.isForemostPolicy = false;
      component.data.isBWPolicy = false;
      component.isBW = true;
      const matDialogRef = { afterClosed: () => of('test@1234.com') };
      matDialogSpy.open.and.returnValue(matDialogRef);
      idCardServiceSpy.sendIdCard.calls.reset();
      spyOn(component, 'getIdCardsDocumentId').and.returnValue('test_bw_id');
      spyOn(component, 'getSegmentParamsForDialogData').and.returnValue({ action: '' });

      component.openDialog(DialogTypes.EMAIL, '', 'test');

      expect(idCardServiceSpy.sendIdCard).toHaveBeenCalledWith(
        'test@1234.com',
        DialogTypes.EMAIL,
        'test_bw_id',
        { action: '' },
        component.data
      );
    });
  });

  describe('#evidenceClick', () => {
    it('should open link from evidence urls when renewal', () => {
      spyOn(window, 'open').and.callThrough();
      const renewalFlag = true;
      const vehicleObj: SubjectOfInsuranceConfigurationModel = {
        id: 'test',
        ymm: 'test',
        vin: 'test',
        renewalEvidenceOfInsuranceLink: 'https://exmpale.com/testUrl-renewal',
        evidenceOfInsuranceLink: 'https://exmpale.com/testUrl',
      };
      component.evidenceClick(renewalFlag, vehicleObj, {
        preventDefault: () => {
          return;
        },
      } as MouseEvent);

      expect(window.open).toHaveBeenCalled();
    });

    it('should open link from eveidence urls ', () => {
      spyOn(window, 'open').and.callThrough();
      const renewalFlag = false;
      const vehicleObj: SubjectOfInsuranceConfigurationModel = {
        id: 'test',
        ymm: 'test',
        vin: 'test',
        renewalEvidenceOfInsuranceLink: 'https://exmpale.com/testUrl-renewal',
        evidenceOfInsuranceLink: 'https://exmpale.com/testUrl',
      };
      component.evidenceClick(renewalFlag, vehicleObj, {
        preventDefault: () => {
          return;
        },
      } as MouseEvent);

      expect(window.open).toHaveBeenCalled();
    });
  });

  describe('#displayIDCard', () => {
    const testurl = 'https://example.com/url';
    it('should not call event.preventDefault when no event is present', () => {
      const event = new Event('click');
      spyOn(event, 'preventDefault');

      component.displayIDCard(testurl);
      expect(event.preventDefault).not.toHaveBeenCalled();
    });

    it('should call event.preventDefault event is present', () => {
      const event = new MouseEvent('click');
      spyOn(event, 'preventDefault');

      component.displayIDCard(testurl, event);

      expect(event.preventDefault).toHaveBeenCalled();
    });

    it('should call window.open with card url', () => {
      const event = new MouseEvent('click');
      spyOn(event, 'preventDefault');
      spyOn(window, 'open').and.callThrough();
      fixture.detectChanges();

      component.displayIDCard('https://exmpale.com/url', event);

      expect(event.preventDefault).toHaveBeenCalled();
      expect(window.open).toHaveBeenCalledWith('https://exmpale.com/url', '_blank');
    });
  });

  describe('#checkFeatureFlags', () => {
    let checkArsIdStateEligibilitySpy;
    beforeEach(() => {
      component.data = { ...idCardsConfigurationModel };
      component.allowArsCSSRedirect = false;
      component.enableIdCardFormsBannerFlag = false;
      checkArsIdStateEligibilitySpy = spyOn(component, 'checkArsIdStateEligibility');
      checkArsIdStateEligibilitySpy.calls.reset();
    });
    it('should set enableIdCardFormsBannerFlag to true when idCardForms and given policy is PLA/PC', () => {
      maintenanceFlagServiceSpy.isEnabledFromSession.and.returnValue(true);
      component.data = { ...idCardsConfigurationModel, policySource: 'PLA' };
      policySummaryServiceSpy.getGwpcOrPlaPolicyBySource.and.returnValue(true);

      component.checkFeatureFlags();

      expect(component.enableIdCardFormsBannerFlag).toBeTruthy();
      expect(policySummaryServiceSpy.getGwpcOrPlaPolicyBySource).toHaveBeenCalledWith('PLA');
    });

    it('should retrun false when idCardForms flag is not enabled and given policy is PLA/PC', () => {
      maintenanceFlagServiceSpy.isEnabledFromSession.and.returnValue(false);
      component.data = { ...idCardsConfigurationModel, policySource: 'PLA' };
      policySummaryServiceSpy.getGwpcOrPlaPolicyBySource.and.returnValue(true);

      component.checkFeatureFlags();

      expect(component.enableIdCardFormsBannerFlag).toEqual(false);
    });

    it('should retrun false when idCardForms flag is enabled and given policy is not PLA/PC', () => {
      maintenanceFlagServiceSpy.isEnabledFromSession.and.returnValue(true);
      component.data = { ...idCardsConfigurationModel, policySource: 'FWS-ARS' };
      policySummaryServiceSpy.getGwpcOrPlaPolicyBySource.and.returnValue(false);

      component.checkFeatureFlags();

      expect(component.enableIdCardFormsBannerFlag).toEqual(false);
      expect(policySummaryServiceSpy.getGwpcOrPlaPolicyBySource).toHaveBeenCalledWith('FWS-ARS');
    });

    it('should set flags and form rendering values', () => {
      maintenanceFlagServiceSpy.isEnabledFromSession.and.returnValue(true);
      featureFlagServiceSpy.isEnabledFromSession.and.returnValue(true);
      component.data = { ...idCardsConfigurationModel, isActiveA360Auto: true, isActiveARSAuto: false };

      component.checkFeatureFlags();

      expect(component.displayA360IdCardAvailabilities).toEqual(true);
      expect(checkArsIdStateEligibilitySpy).not.toHaveBeenCalled();
    });

    it('should call checkArsIdStateEligibility if isActiveARSAuto', () => {
      maintenanceFlagServiceSpy.isEnabledFromSession.and.returnValue(true);
      featureFlagServiceSpy.isEnabledFromSession.and.returnValue(true);
      component.data = { ...idCardsConfigurationModel, isActiveARSAuto: true };

      component.checkFeatureFlags();

      expect(component.checkArsIdStateEligibility).toHaveBeenCalled();
    });
  });

  describe('checkArsIdStateEligibility', () => {
    beforeEach(() => {
      component.data = {
        ...idCardsConfigurationModel,
        isActiveA360Auto: false,
        selectedPolicy: { state: 'TX' },
      } as any;
      component.enableIdCardFormsBannerFlag = false;
    });

    it('should set allowArsCSSRedirect and displayNonFeatureFlagIdCard correctly when eligible and not active A360', () => {
      stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(true));

      component.checkArsIdStateEligibility();

      expect(stateEligibilityServiceSpy.isStateEligibleForARSId).toHaveBeenCalledWith('TX');
      expect(component.allowArsCSSRedirect).toBeTruthy();
      expect(component.displayNonFeatureFlagIdCard).toBeFalsy();
    });

    it('should set displayNonFeatureFlagIdCard to true if not eligible', () => {
      stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(false));

      component.checkArsIdStateEligibility();

      expect(component.allowArsCSSRedirect).toBeFalsy();
      expect(component.displayNonFeatureFlagIdCard).toBeTruthy();
    });

    it('should set displayNonFeatureFlagIdCard to true if isActiveA360Auto is true', () => {
      component.data.isActiveA360Auto = true;
      stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(true));

      component.checkArsIdStateEligibility();

      expect(component.allowArsCSSRedirect).toBeTruthy();
      expect(component.displayNonFeatureFlagIdCard).toBeTruthy();
    });

    it('should handle enableIdCardFormsBannerFlag = true', () => {
      component.enableIdCardFormsBannerFlag = true;
      component.data.isActiveA360Auto = true;
      stateEligibilityServiceSpy.isStateEligibleForARSId.and.returnValue(of(true));

      component.checkArsIdStateEligibility();

      expect(component.allowArsCSSRedirect).toBeTruthy();
      expect(component.displayNonFeatureFlagIdCard).toBeTruthy();
    });
  });

  describe('#displayWallet', () => {
    beforeEach(() => {
      const sampleValue = 'base64string';
      fixture = TestBed.createComponent(ProofOfCoverageComponent);
      component = fixture.componentInstance;
      component.data = idCardsConfigurationModel;
      idCardServiceSpy.displayWallet.and.returnValue(of({ passkit: sampleValue }));
      tuiTrackerServiceSpy.track.calls.reset();
    });

    it('should call apple wallet for current id card ', () => {
      spyOn(component, 'addToAppleWallet');
      component.renewal = false;
      component.displayWallet(ID_CARD_CONST.wallets.appleWallet);

      expect(spinnerServiceSpy.show).toHaveBeenCalled();
      expect(component.addToAppleWallet).toHaveBeenCalled();
      expect(spinnerServiceSpy.hide).toHaveBeenCalled();
    });

    it('should call apple wallet for renewal id card ', () => {
      spyOn(component, 'addToAppleWallet');
      component.renewal = true;
      component.data.policyContractNumber = '123';
      component.data.policySource = 'fm';
      const sampleValue = 'base64string';
      const renewalDetails = { renewalEffectiveDate: '03/01/2025', renewalExpiryDate: '09/01/2025' };
      idCardServiceSpy.displayWallet
        .withArgs(ID_CARD_CONST.wallets.appleWallet, '123456', renewalDetails, '123')
        .and.returnValue(of({ passkit: sampleValue }));
      component.displayWallet(ID_CARD_CONST.wallets.appleWallet);

      expect(spinnerServiceSpy.show).toHaveBeenCalled();
      expect(component.addToAppleWallet).toHaveBeenCalled();
      expect(spinnerServiceSpy.hide).toHaveBeenCalled();
      expect(tuiTrackerServiceSpy.track).toHaveBeenCalledWith('Icon Clicked', {
        action: 'Add To Apple Wallet Clicked',
        step: segmentParams.idCards,
        entry_source: segmentEntrySource.idCards,
        policy_number: '123',
        policy_source: 'fm',
        description: 'AUTO',
        successful: true,
      });
    });

    it('should call google wallet', () => {
      spyOn(window, 'open');
      const expectedUrl = 'base64string';
      component.data.policyContractNumber = '123';
      component.data.policySource = 'fm';

      component.displayWallet(ID_CARD_CONST.wallets.googleWallet);

      expect(window.open).toHaveBeenCalledWith(expectedUrl, '_blank');
      expect(tuiTrackerServiceSpy.track).toHaveBeenCalledWith('Icon Clicked', {
        action: 'Add To Google Wallet Clicked',
        step: segmentParams.idCards,
        entry_source: segmentEntrySource.idCards,
        policy_number: '123',
        policy_source: 'fm',
        description: 'AUTO',
        successful: true,
      });
    });

    it('should track segment when service failed', () => {
      component.data.policyContractNumber = '123';
      component.data.policySource = 'fm';
      idCardServiceSpy.displayWallet.and.returnValue(throwError({ message: 'failure' }));

      component.displayWallet(ID_CARD_CONST.wallets.googleWallet);

      expect(tuiTrackerServiceSpy.track).toHaveBeenCalledWith('Icon Clicked', {
        action: 'Add To Google Wallet Clicked',
        step: segmentParams.idCards,
        entry_source: segmentEntrySource.idCards,
        policy_number: '123',
        policy_source: 'fm',
        description: 'AUTO',
        successful: false,
        failure_reason: 'failure',
      });
    });
  });

  describe('#addToAppleWallet', () => {
    beforeEach(() => {
      fixture = TestBed.createComponent(ProofOfCoverageComponent);
      component = fixture.componentInstance;
      component.data = idCardsConfigurationModel;
    });

    it('should trigger click event', () => {
      const dummyElement = document.createElement('a');
      const base64STring = 'base64String';
      spyOn(document, 'createElement').and.returnValue(dummyElement);
      spyOn(dummyElement, 'click');

      component.addToAppleWallet(base64STring);

      expect(dummyElement.click).toHaveBeenCalled();
    });
  });

  describe('#ngOnDestroy', () => {
    it('should unsubscribe getMfaDataSubscription', () => {
      component.stateEligibilitySubscription$ = new Subscription();
      spyOn(component.stateEligibilitySubscription$, 'unsubscribe');

      component.ngOnDestroy();

      expect(component.stateEligibilitySubscription$.unsubscribe).toHaveBeenCalled();
    });
  });

  describe('#setFmUnits', () => {
    beforeEach(() => {
      component.data.units = [
        {
          ymm: 'xyz',
          vin: 'v123',
          link: 'url',
          renewlink: 'renewalink',
          encryptedDocumentId: 'encryptedDocumentId',
          renewalEncryptedDocumentId: 'renewalEncryptedDocumentId',
        },
      ];
    });

    it('should set fm units when renewal flag is false', () => {
      component.renewal = false;

      component.setFmUnits();

      expect(component.data.units).toEqual([
        {
          ymm: 'xyz',
          vin: 'v123',
          link: 'url',
          encryptedDocumentId: 'encryptedDocumentId',
          renewlink: 'renewalink',
          renewalEncryptedDocumentId: 'renewalEncryptedDocumentId',
        },
      ]);
    });

    it('should set fm units when renewal flag is true', () => {
      component.renewal = true;

      component.setFmUnits();

      expect(component.data.units).toEqual([
        {
          ymm: 'xyz',
          vin: 'v123',
          link: 'renewalink',
          encryptedDocumentId: 'renewalEncryptedDocumentId',
          renewlink: 'renewalink',
          renewalEncryptedDocumentId: 'renewalEncryptedDocumentId',
        },
      ]);
    });
  });

  describe('#launchChatWindow', () => {
    beforeEach(() => {
      tuiTrackerServiceSpy.track.calls.reset();
    });
    it('should open chat window on launch chat button click', () => {
      element.innerHTML = `
        <div class="helpButtonEnabled uiButton"></div>`;

      component.launchChatWindow();

      const chatWindow = document.querySelector('.featureBody.embeddedServiceSidebarFeature');
      expect(chatWindow).toBeDefined();
    });

    it('should not call click if button not found', () => {
      element.innerHTML = `
        <div class="button"></div>`;
      spyOn(element, 'click');

      component.launchChatWindow();

      expect(element.click).not.toHaveBeenCalled();
    });

    it('should track segment event when chat link is clicked', () => {
      const params = {
        entrySource: 'forgotusername',
        authenticated: false,
      };
      analyticsServiceSpy.getEntrySource.and.returnValue('forgotusername');

      component.launchChatWindow();

      expect(tuiTrackerServiceSpy.track).toHaveBeenCalledWith('Chat Opened', params);
    });
  });

  describe('#checkIfCurrentPolicyIsExpansion', () => {
    beforeEach(() => {
      component.isAccountIA = false;
      component.data = idCardsConfigurationModel;
      policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);
      policySummaryServiceSpy.isPolicySourceForemost.and.returnValue(false);
    });
    it('should set phone number as 1-855-878-3157 if not expansion only data', fakeAsync(() => {
      stateEligibilityServiceSpy.getState.and.returnValue('OK');
      policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);

      component.checkIfCurrentPolicyIsExpansion();

      expect(component.phone).toEqual('1-855-878-3157');
      expect(component.isExpansionState).toBeFalsy();
    }));

    it('should set phone number as 1-877-388-6628 if expansion only data', fakeAsync(() => {
      stateEligibilityServiceSpy.getState.and.returnValue('NC');
      policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(false);

      component.checkIfCurrentPolicyIsExpansion();

      expect(component.phone).toEqual('1-877-388-6628');
      expect(component.isExpansionState).toBeTruthy();
    }));

    it('should set phone number as 1-800-422-4272 for EA fws customers', fakeAsync(() => {
      policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(true);

      component.checkIfCurrentPolicyIsExpansion();

      expect(policySummaryServiceSpy.isPolicySourceFWS).toHaveBeenCalled();
      expect(component.phone).toEqual('1-800-422-4272');
    }));

    it('should set phone number as 1-800-527-3905 for Foremost Fm customers', fakeAsync(() => {
      policySummaryServiceSpy.isPolicySourceForemost.and.returnValue(true);

      component.checkIfCurrentPolicyIsExpansion();

      expect(policySummaryServiceSpy.isPolicySourceForemost).toHaveBeenCalled();
      expect(component.phone).toEqual('1-800-527-3905');
    }));

    it('should set phone number as 800-422-4272 for IA fws customers', fakeAsync(() => {
      component.isAccountIA = true;
      policySummaryServiceSpy.isPolicySourceFWS.and.returnValue(true);

      component.checkIfCurrentPolicyIsExpansion();

      expect(policySummaryServiceSpy.isPolicySourceFWS).toHaveBeenCalled();
      expect(component.phone).toEqual('800-422-4272');
    }));
  });

  describe('#getSegmentParamsForDialogData', () => {
    beforeEach(() => {
      component.data.policyContractNumber = '123-456-123';
      component.data.policySource = 'FWS-ARS';
      component.data.policyType = 'AUTO';
    });

    it('should retrun segment params for mail', () => {
      const result = component.getSegmentParamsForDialogData(DialogTypes.MAIL);

      expect(result).toEqual({
        action: 'Send Mail',
        dialog_name: 'Mail my ID card',
        step: 'ID cards',
        location: 'ID card',
        entry_source: segmentEntrySource.idCards,
        policy_number: '123456123',
        policy_source: 'FWS-ARS',
        description: 'AUTO',
      });
    });

    it('should retrun segment params for email', () => {
      const result = component.getSegmentParamsForDialogData(DialogTypes.EMAIL);

      expect(result).toEqual({
        action: 'Send Email',
        dialog_name: 'Email my ID card',
        step: 'ID cards',
        location: 'ID card',
        entry_source: segmentEntrySource.idCards,
        policy_number: '123456123',
        policy_source: 'FWS-ARS',
        description: 'AUTO',
      });
    });

    it('should retrun segment params for fax', () => {
      const result = component.getSegmentParamsForDialogData(DialogTypes.FAX);

      expect(result).toEqual({
        action: 'Send Fax',
        dialog_name: 'Fax my ID card',
        step: 'ID cards',
        location: 'ID card',
        entry_source: segmentEntrySource.idCards,
        policy_number: '123456123',
        policy_source: 'FWS-ARS',
        description: 'AUTO',
      });
    });

    it('should retrun segment params when type is not matched', () => {
      const result = component.getSegmentParamsForDialogData(DialogTypes.NJDIALOG);

      expect(result).toEqual({
        action: '',
        dialog_name: '',
        step: 'ID cards',
        location: 'ID card',
        entry_source: segmentEntrySource.idCards,
        policy_number: '123456123',
        policy_source: 'FWS-ARS',
        description: 'AUTO',
      });
    });

    it('should retrun segment params when type is not present', () => {
      const result = component.getSegmentParamsForDialogData(null);

      expect(result).toEqual({});
    });
  });

  describe('#trackContactClick', () => {
    it('should track phone number', () => {
      component.trackContactClick('123');

      expect(idCardServiceSpy.trackPhoneNumberClick).toHaveBeenCalledWith('123');
    });
  });
});

const idCardsConfigurationModel = {
  agentOfRecordId: '41RD34',
  isAutoPolicy: true,
  isHomePolicy: false,
  shouldRenderEvidenceOfInsurance: true,
  address: {
    address1: '101 Love st.',
    address2: 'Los Angeles 900210, CA',
  },
  policyContractNumber: '0123456789',
  lineOfBusiness: 'PLA',
  policyType: 'AUTO',
  policySource: 'PTA',
  effectiveDate: '04-10-2020',
  expirationDate: '04-10-2021',
  selectedPolicy: {
    policyNumber: '12345',
    policyContractNumber: 'A12345',
    lineOfBusiness: 'Auto',
    state: 'TX',
    subjectOfInsurance: [
      {
        vehicleYear: '2000',
        vehicleModel: 'Tesla ModelX 2020',
        vehicleMake: 'abc',
      },
      {
        vehicleYear: '2001',
        vehicleModel: 'Ford ModelX 2021',
        vehicleMake: 'abc',
      },
    ],
  } as any,
  subjectOfInsurance: [
    {
      id: '123',
      ymm: 'Tesla Model3 2020',
      vin: '123456789',
      evidenceOfInsuranceLink: 'evidenceOfInsuranceLink',
      renewalEvidenceOfInsuranceLink: '',
    },
    {
      id: '456',
      ymm: 'Tesla ModelX 2021',
      vin: '987654321',
      evidenceOfInsuranceLink: 'evidenceOfInsuranceLink2',
      renewalEvidenceOfInsuranceLink: '',
    },
  ],
  cardLink: {
    small: 'small link',
    large: 'large link',
    encrypted: 'encrypted link',
    encryptedLargeIdCardDocumentId: 'encryptedLargeIdCardDocumentId',
  },
  showFaxIdCard: true,
  showMailIdCard: true,
  showEmailIdCard: true,
  renewalFlag: false,
  renewalIDCards: null,
  renewalEffectiveDate: null,
  renewalExpiryDate: null,
  title: 'Auto Id Cards',
  proofOfCoverageSubTitle: 'Current',
  dialogData: {
    width: '420',
    fax: {
      title: 'fax title',
      text: 'fax text',
      cta1: 'fax cta 1',
      cta2: 'fax cta 2',
      gtmTag1: 'fax gtmTag1',
      gtmTag2: 'fax gtmTag2',
      inputField: true,
      placeholder: 'fax placeholder',
    },
    mail: {
      title: 'mail title',
      text: 'mail text',
      cta1: 'mail cta 1',
      cta2: 'mail cta 2',
      gtmTag1: 'mail gtmTag1',
      gtmTag2: 'mail gtmTag2',
      address: {
        address1: 'mail address 1',
        address2: 'mail address 2',
      },
    },
    email: {
      title: 'email title',
      text: 'email text',
      cta1: 'email cta 1',
      cta2: 'email cta 2',
      gtmTag1: 'email gtmTag1',
      gtmTag2: 'email gtmTag2',
      inputField: true,
      placeholder: 'email placeholder',
    },
  },
  nJDialog: {
    isShow: false,
  },
  isARSWithStateNY: false,
  isActiveARSAuto: false,
  units: [{ ymm: 'xyz', vin: 'v123', link: 'url' }],
};
const idCardsConfigurationModelRenewal = {
  agentOfRecordId: '41RD34',
  address: null,
  cardLink: {
    small: 'smallLink',
    large: 'largeLink',
    encrypted: 'encryptedLink',
  },
  dialogData: {
    width: '448px',
    fax: {
      cta1: '',
      cta2: '',
      gtmTag1: '',
      gtmTag2: '',
      errors: {
        maxLength: '',
        minLength: '',
        pattern: '',
        requred: '',
      },
      inputField: true,
      placeholder: '',
      text: '',
      title: '',
    },
    mail: {
      address: {
        address1: '',
        address2: '',
      },
      cta1: '',
      cta2: '',
      gtmTag1: '',
      gtmTag2: '',
      text: '',
      title: '',
    },
    email: {
      cta1: '',
      cta2: '',
      gtmTag1: '',
      gtmTag2: '',
      errors: {
        pattern: '',
        requred: '',
      },
      inputField: true,
      placeholder: '',
      text: '',
      title: '',
    },
  },
  nJDialog: {
    isShow: false,
  },
  effectiveDate: '10/28/2020',
  expirationDate: '',
  isAutoPolicy: true,
  isHomePolicy: false,
  lineOfBusiness: 'AUTO',
  policyType: 'AUTO',
  policyContractNumber: '',
  proofOfCoverageSubTitle: '',
  showFaxIdCard: true,
  showMailIdCard: true,
  showEmailIdCard: true,
  renewalEffectiveDate: 'date for renewal effective',
  renewalExpiryDate: 'date for renewal expiration',
  renewalFlag: true,
  renewalIDCards: {
    small: 'renewal_smallLink',
    large: 'renewal_largeLink',
    encrypted: null,
  },
  shouldRenderEvidenceOfInsurance: true,
  subjectOfInsurance: [],
  title: 'Auto ID Cards',
};
const idCardsConfigurationModelNoImages = {
  agentOfRecordId: '41RD34',
  isAutoPolicy: true,
  isHomePolicy: false,
  shouldRenderEvidenceOfInsurance: true,
  address: {
    address1: '101 Love st.',
    address2: 'Los Angeles 900210, CA',
  },
  policyContractNumber: '0123456789',
  lineOfBusiness: 'PLA',
  policyType: 'AUTO',
  effectiveDate: '04-10-2020',
  expirationDate: '04-10-2021',
  subjectOfInsurance: [
    {
      id: '123',
      ymm: 'Tesla Model3 2020',
      vin: '123456789',
      evidenceOfInsuranceLink: 'evidenceOfInsuranceLink',
      renewalEvidenceOfInsuranceLink: '',
    },
    {
      id: '456',
      ymm: 'Tesla ModelX 2021',
      vin: '987654321',
      evidenceOfInsuranceLink: 'evidenceOfInsuranceLink2',
      renewalEvidenceOfInsuranceLink: '',
    },
  ],
  cardLink: {
    small: null,
    large: null,
    encrypted: null,
  },
  renewalFlag: false,
  renewalIDCards: null,
  renewalEffectiveDate: null,
  renewalExpiryDate: null,
  title: 'Auto Id Cards',
  proofOfCoverageSubTitle: 'Current',
  dialogData: {
    width: '420',
    fax: {
      title: 'fax title',
      text: 'fax text',
      cta1: 'fax cta 1',
      cta2: 'fax cta 2',
      gtmTag1: 'fax gtmTag1',
      gtmTag2: 'fax gtmTag2',
      inputField: true,
      placeholder: 'fax placeholder',
    },
    mail: {
      title: 'mail title',
      text: 'mail text',
      cta1: 'mail cta 1',
      cta2: 'mail cta 2',
      gtmTag1: 'mail gtmTag1',
      gtmTag2: 'mail gtmTag2',
      address: {
        address1: 'mail address 1',
        address2: 'mail address 2',
      },
    },
    email: {
      title: 'email title',
      text: 'email text',
      cta1: 'email cta 1',
      cta2: 'email cta 2',
      gtmTag1: 'email gtmTag1',
      gtmTag2: 'email gtmTag2',
      inputField: true,
      placeholder: 'email placeholder',
    },
  },
  nJDialog: {
    isShow: false,
  },
};


