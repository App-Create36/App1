<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <link rel="stylesheet" href="login.component.css" />

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
</head>

<body>
  <nav>
    <div class="nav-left">
      <a href="login.component.html">
        <div class="logo">
          <img src="../assets/logo.jpg" alt="Logo" class="logo-image" />
        </div>
      </a>
      <div class="welcome-message">Cognizant</div>
    </div>
    <div class="login-options">
      <a href="#" (click)="showLoginForm('admin')">Admin</a>
      <a href="#" (click)="showLoginForm('user')">User</a>
    </div>
  </nav>
  <div id="img-container">
    <img src="assets/background.png" alt="" style="height:510px;" />
  </div>
  <div id="admin-login-card" class="hidden">
    <div class="login-header" style="font-weight:normal;">Admin Login</div>
    <form (submit)="onSubmit($event, 'admin')">
      <input type="text" id="admin-username" name="username" placeholder="Username" required />
      <input type="password" id="admin-password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
      <div class="forgot-password">
        <a href="login.component.html">Back to Home Page?</a>
      </div>
    </form>
  </div>
  <div id="user-login-card" class="hidden">
    <div class="login-header" style="font-weight:normal;">User Login</div>
    <form (submit)="onSubmit($event, 'user')">
      <input type="text" id="user-username" name="username" placeholder="Username" required />
      <input type="password" id="user-password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
      <div class="forgot-password">
        <a href="VerifyUser/verify_user.html">Forgot Password?</a>
      </div>
    </form>
  </div>
  
  <!-- Slideshow container -->
  <div class="slideshow-container">
    <div class="slide fade">
      <img src="assets/slide6.webp" alt="Slide 1" />
    </div>
    <div class="slide fade">
      <img src="assets/slide2.jpg_large" alt="Slide 2" />
    </div>
    <div class="slide fade">
      <img src="assets/slide1.jpg" alt="Slide 3" />
    </div>
    <div class="slide fade">
      <img src="assets/slide6.webp" alt="Slide 4" />
    </div>
  </div>
  
  <footer>
    <div class="footer-logo">
      <img src="assets/footer.png" alt="Footer Logo" />
    </div>
    <p>¬© 2024 All rights reserved</p>
  </footer>
  

  <!-- Include Combined Setup Script to Initialize User Data -->
  <script src="js/combined-setup.js"></script>
  <script src="login.component.ts"></script>
</body>

</html>





import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-login',
  standalone: false,
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {

  ngOnInit(): void {
    this.initializeUsers();
    this.togglePasswordVisibility();
    this.showSlides();
  }

  initializeUsers(): void {
    const usersJson = localStorage.getItem('users');
    let existingUsers = usersJson ? JSON.parse(usersJson) : [];
    let newUsers = [
      { username: 'admin', password: 'admin123', role: 'admin' },
      { username: 'user1', password: null, role: 'user', clientId: 'user1', tempPassword: 'temp1234' },
      { username: 'user2', password: null, role: 'user', clientId: 'user2', tempPassword: 'temp5678' }
    ];
    newUsers.forEach(newUser => {
      if (!existingUsers.find((user: any) => user.clientId === newUser.clientId)) {
        existingUsers.push(newUser);
      }
    });

    localStorage.setItem('users', JSON.stringify(existingUsers));
    console.log('Users stored in local storage:', existingUsers);
  }

  showLoginForm(userType: string): void {
    const adminLoginCard = document.getElementById('admin-login-card');
    const userLoginCard = document.getElementById('user-login-card');
    const slideshowContainer = document.querySelector('.slideshow-container');

    if (userType === 'admin') {
      adminLoginCard?.classList.remove('hidden');
      userLoginCard?.classList.add('hidden');
    } else if (userType === 'user') {
      userLoginCard?.classList.remove('hidden');
      adminLoginCard?.classList.add('hidden');
    }

    slideshowContainer?.classList.add('hidden');
  }

  onSubmit(event: Event, userType: string): void {
    event.preventDefault(); // Prevent form submission
    const form = event.target as HTMLFormElement;
    const username = (form.querySelector('input[name="username"]') as HTMLInputElement).value;
    const password = (form.querySelector('input[name="password"]') as HTMLInputElement).value;

    if (this.validateUser(userType, username, password)) {
      localStorage.setItem(`${userType}Username`, username);
      localStorage.setItem(`${userType}Password`, password);

      if (userType === 'user' && password === username) {
        window.location.href = '../VerifyUser/verify_user.html';
      } else {
        this.showPopup(`${userType.charAt(0).toUpperCase() + userType.slice(1)} login successful!`, () => {
          this.redirectToDashboard(userType);
        });
      }
    } else {
      this.showError('Invalid username or password.');
    }
  }

  validateUser(userType: string, username: string, password: string): boolean {
    const usersJson = localStorage.getItem('users');
    const users = usersJson ? JSON.parse(usersJson) : [];

    if (userType === 'admin') {
      return username === 'admin' && password === 'admin123';
    }

    const user = users.find((user: any) =>
      user.role === 'user' && (
        (user.clientId === username || user.username === username) &&
        (user.password === password || user.tempPassword === password || user.clientId === password)
      )
    );

    if (user && user.tempPassword === password) {
      user.password = password;
      user.tempPassword = null;

      const updatedUsers = users.map((u: any) =>
        u.clientId === user.clientId ? user : u
      );
      localStorage.setItem('users', JSON.stringify(updatedUsers));
    }

    return !!user;
  }

  redirectToDashboard(userType: string): void {
    if (userType === 'admin') {
      window.location.href = '../Admin-Dashboard/Admin-Dash.html';
    } else if (userType === 'user') {
      window.location.href = '../UserDashboard/User-Dashboard.html';
    }
  }

  showError(message: string): void {
    const errorElement = document.createElement('div');
    errorElement.classList.add('error-message');
    errorElement.innerText = message;
    document.body.appendChild(errorElement);
    setTimeout(() => {
      errorElement.remove();
    }, 1000);
  }

  showPopup(message: string, callback?: () => void): void {
    const popupElement = document.createElement('div');
    popupElement.classList.add('popup-message');
    popupElement.innerText = message;
    document.body.appendChild(popupElement);
    setTimeout(() => {
      popupElement.remove();
      if (callback) callback();
    }, 1000);
  }

  togglePasswordVisibility(): void {
    const passwordInputs = document.querySelectorAll('input[type="password"]');
    passwordInputs.forEach(input => {
      const toggleIcon = input.nextElementSibling as HTMLElement;
      toggleIcon?.addEventListener('click', () => {
        const inputElement = input as HTMLInputElement;
        if (inputElement.type === 'password') {
          inputElement.type = 'text';
          toggleIcon.innerText = 'üôà';
        } else {
          inputElement.type = 'password';
          toggleIcon.innerText = 'üëÅ';
        }
      });
    });
  }

  showSlides(): void {
    let slideIndex = 0;
    const slides = document.getElementsByClassName("slide") as HTMLCollectionOf<HTMLElement>;
    const showSlides = () => {
      for (let i = 0; i < slides.length; i++) {
        slides[i].style.display = "none";
      }
      slideIndex++;
      if (slideIndex > slides.length) { slideIndex = 1 }
      slides[slideIndex - 1].style.display = "block";
      setTimeout(showSlides, 3000);
    };
    showSlides();
  }
}















body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: url('../../../../Assets/background.png') no-repeat center center fixed;
    background-size: cover;
    overflow: hidden;
    border-radius: 0;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    background-color: #000000;
    color: white;
}

.nav-left {
    display: flex;
    align-items: center;
}

.logo-image {
    height: 50px;
    /* Adjust this height as necessary */
    margin-right: 10px;
}

#img-container img {
    width: 100%;
    height: 85vh;
    object-fit: cover;
}

.logo {
    font-size: 1.8em;
    margin-right: 10px;
}

.welcome-message {
    font-size: 2.0em;
}

.login-options a {
    margin-left: 10px;
    margin-right: 40px;
    padding: 5px 10px;
    color: white;
    text-decoration: none;
    display: inline-block;
    border: 0.5px solid white;
    /* Added white border */
    border-radius: 5px;
    /* Minimal border radius */
}

.login-options a:hover {
    background-color: #777;
}

.hidden {
    display: none;
}

#admin-login-card,
#user-login-card {
    width: 280px;
    height: 300px;
    padding: 50px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 1000;
}

#admin-login-card input,
#user-login-card input {
    width: 40vh;
    padding: 10px;
    margin-top: 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

#admin-login-card button,
#user-login-card button {
    width: 44vh;
    padding: 10px;
    background-color: #333;
    color: white;
    border: none;
    margin-top: 20px;
    border-radius: 4px;
    cursor: pointer;
}

#admin-login-card button:hover,
#user-login-card button:hover {
    background-color: #555;
}

.forgot-password {
    margin-top: 20px;
}

footer {
    background-color: rgba(7, 27, 52, 0.8);
    color: white;
    text-align: center;
    padding: 10px 0;
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 6.3vh;
    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

footer .footer-logo {
    display: flex;
    align-items: center;
    margin-left: 20px;
    width: 110px;

}

footer .footer-logo img {
    height: 45px;
    padding: 5px;
}

footer p {
    margin: 0;
    flex-grow: 1;
    text-align: center;
    padding-right: 10%;
}

.slideshow-container {
    position: fixed;
    top: 52%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80%;
    max-width: 800px;
    overflow: hidden;
    border-radius: 10px;
    z-index: 500;
}

.slide {
    display: none;
    animation: fade 1.5s;
}

img {
    width: 100%;
    border-radius: 10px;
}

.text {
    color: #f2f2f2;
    font-size: 1.5rem;
    padding: 8px 12px;
    position: absolute;
    bottom: 8px;
    width: 100%;
    text-align: center;
}

@keyframes fade {
    from {
        opacity: .4
    }

    to {
        opacity: 1
    }
}

















import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateUserComponent } from './pages/create-user/create-user.component';

const routes: Routes = [
  {
    path:'',
    redirectTo: 'login',
    pathMatch:'full'
  },
  {
    path:'login',
    component:LoginComponent
  },
  {
    path:'',
    component:LayoutComponent,
    children:[
      {
        path:'user-list',
        component:UserListComponent
      },
      {
        path:'createUser',
        component:CreateUserComponent
      }
    ]
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }





import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateUserComponent } from './pages/create-user/create-user.component';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    LayoutComponent,
    UserListComponent,
    CreateUserComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }








<router-outlet />





<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>FirstApp</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>
