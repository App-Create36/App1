layout
  
  
  
  <head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body style="height:1500px">

<nav class="navbar navbar-inverse navbar-fixed-top">
<div class="container-fluid">
  <div class="navbar-header">
    <a class="navbar-brand" href="#">WebSiteName</a>
  </div>
  <ul class="nav navbar-nav">
    <li class="active"><a href="#">Home</a></li>
    <li><a href="#">Page 1</a></li>
    <li><a href="#">Page 2</a></li>
    <li><a href="#">Page 3</a></li>
  </ul>
</div>
</nav>

  <router-outlet></router-outlet>



  
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LayoutComponent } from './layout.component';

describe('LayoutComponent', () => {
  let component: LayoutComponent;
  let fixture: ComponentFixture<LayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-layout',
  standalone: true,
  imports:[RouterOutlet],
  templateUrl: './layout.component.html',
  styleUrl: './layout.component.css'
})
export class LayoutComponent {

}


        login


        
body {
    font-family: 'Roboto', sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #2c3e50;
}

.form-container {
    background-color: #34495e;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    max-width: 400px;
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    text-align: center;
    animation: slideIn 0.8s ease-in-out, borderLight 2s infinite alternate;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes borderLight {
    from {
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    }
    to {
        box-shadow: 0 0 20px rgba(122, 206, 167, 0.856);
    }
}

.form-container h2 {
    color: #ecf0f1;
    margin-bottom: 20px;
}

.login-form input, .signup-form input {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    box-sizing: border-box;
    border: none;
    border-radius: 4px;
    outline: none;
}

.login-form input[type="submit"] {
    background-color: #2ecc71;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-form input[type="submit"]:hover {
    background-color: #27ae60;
}

.login-form input[type="text"],
.login-form input[type="password"] {
    background-color: #ecf0f1;
    color: #333;
}

.login-form input[type="text"]:focus,
.login-form input[type="password"]:focus {
    background-color: #d5dbdb;
}


/* COMMON CSS */

.signup-link a,
.login-link a {
    color: #9294ee;
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s ease;
}

.signup-link a:hover,
.login-link a:hover {
    color: #2980b9;
}

.signup-link p,
.login-link p {
    color: #7f8c8d;
    margin-top: 12px;
    font-size: 16px;
}


/* SIGNUP PAGE CSS */

.signup-form input[type="submit"] {
    background-color: #e74c3c;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.signup-form input[type="submit"]:hover {
    background-color: #c0392b;
}

.signup-form input[type="text"],
.signup-form input[type="password"] {
    background-color: #cbd1d3;
    color: #333;
}

.signup-form input[type="text"]:focus,
.signup-form input[type="password"]:focus {
    background-color: #9eb1b1;
}
<p>login works!</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Form</title>
    <link rel="stylesheet" href="login.component.css">
</head>
<body>
    <div class="form-container">
        <h2>LOGIN</h2>
        <form class="login-form">
            <input type="text" name="email" [(ngModel)]="loginObj.email" placeholder="email" required>
            <input type="password" name="password" [(ngModel)]="loginObj.password" placeholder="Password" required>
            <input type="submit" (click)="login()" value="Login">
             <!-- <button (click)="login()"  class="button login_submit">
                <span>Log in now</span>
             </button> -->
        </form>
        <div class="signup-link">
            <p>Don't have an account? <a href="login.component.html">Sign Up</a></p>
        </div>
    </div>
</body>

</html>

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import {Router} from '@angular/router';
@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
   loginObj:any={
    "email":"",
    "password":""
   }
   userService=inject(UserService)
   router=inject(Router)

   login() {
    debugger;
    this.userService.onLogin(this.loginObj).subscribe(
      (res: any) => {
        debugger;
        if (res) { // ✅ If response is not null, consider login successful
          localStorage.setItem('userApp', JSON.stringify(res));
          this.router.navigateByUrl("user-list"); // ✅ Redirect to user-list
        } else {
          alert("Invalid credentials. Please try again."); // ✅ Show error message
        }
      },
      (error) => {
        debugger;
        alert("Login failed. Please check your credentials or try again later.");
        console.error("Login Error:", error);
      }
    );
  }
}




user-list




  <div class="row">
    <div class="col-12">
       <table class="table table-bordered" *ngIf="List.length > 0; else noData">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Employee Name</th>
                    <th>Gender</th>
                    <th>Date of Joining</th>
                    <th>Role</th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let item of List; let i = index">
                     <td>{{ i + 1 }}</td>
                     <td>{{ item.employeeName }}</td>
                     <td>{{ item.employeeGender }}</td>
                     <td>{{ item.dateOfJoining }}</td>
                     <td>{{ item.role }}</td>
                     <td>{{ item.phoneNumber }}</td>
                     <td>{{ item.email }}</td>
                     <td>{{ item.status }}</td>
                </tr>
            </tbody>
       </table>
       <ng-template #noData>
            <p class="text-center text-danger">No data available</p>
       </ng-template>
    </div>
</div>

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserListComponent } from './user-list.component';

describe('UserListComponent', () => {
  let component: UserListComponent;
  let fixture: ComponentFixture<UserListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component, inject, OnInit } from '@angular/core';
import { UserService } from '../../service/user.service';

@Component({
  selector: 'app-user-list',
  standalone: false,
  templateUrl: './user-list.component.html',
  styleUrl: './user-list.component.css'
})
export class UserListComponent implements OnInit{
     
    userService=inject(UserService);
    List:any[]=[];
    ngOnInit(): void {
      this.loadClient()
    }
    loadClient(){
      this.userService.getClient().subscribe({
        next: (res: any) => {
            if (Array.isArray(res)) {
                this.List = res; // Directly assign response if it's an array
            } else if (res?.data) {
                this.List = res.data; // If the response is wrapped in an object
            } else {
                console.error('Unexpected response format:', res);
            }
        },
        error: (err) => {
            console.error('Error fetching clients:', err);
        }
    });
}
    
}




service


import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';

// @Injectable({
//   providedIn: 'root'
// })
// export class UserService {

//   constructor(private http:HttpClient) { }

//   onLogin(obj:any){
//     return this.http.post("http://localhost:9096/auth/login",obj)
//   }
//   getClient(){
//     return this.http.get("http://localhost:9081/clients/all")
//   }
// }
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  private loginUrl = "http://localhost:9096/auth/login";
  private clientsUrl = "http://localhost:9081/clients/all";

  constructor(private http: HttpClient) { }

  onLogin(obj: any): Observable<any> {
    return this.http.post(this.loginUrl, obj);
  }

  getClient(): Observable<any> {
    return this.http.get(this.clientsUrl);
  }
}


app-routing.module
  import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateClientComponent } from './pages/create-client/create-client.component';

export const routes: Routes = [
  {
    path:'',
    redirectTo:'login',
    pathMatch:'full'
  },
  {
    path:'login',
    component:LoginComponent
  },
  {
    path:'',
    component:LayoutComponent,
    children:[
      {
        path:'user-list',
        component:UserListComponent
      },
      {
        path:'createUser',
        component:CreateClientComponent
      }
    ]
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
app.component.html
  
<router-outlet />


app.component.spec.ts
  import { TestBed } from '@angular/core/testing';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterModule.forRoot([])
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'resource-management'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('resource-management');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, resource-management');
  });
});



app.component.ts
  import { Component } from '@angular/core';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  standalone: false,
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'resource-management';
}







