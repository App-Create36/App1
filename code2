3.> VDI-SERVICE:
---------------------------
1.>Allocate VDI:-

http://localhost:9082/vdis/allocate post
{
    "clientId": "CID-0004",  // Assume this client ID does not exist
    "projectName": "Project A",
    "vdiType": "Type A",
    "softwareStack": "{\"software\": [\"Example Software\"]}",
    "allocationDate": "2023-04-01T10:00:00",
    "status": "ACTIVE"
}
2.> GET ALL VDI Allocations
http://localhost:9082/vdis/all get
3.> GET VDI By allocation ID
http://localhost:9082/vdis/1 - get - allocation id

























---

### 1. **Check Console for Errors**
- Open **Developer Tools** (F12) in your browser.
- Go to the **Console** tab and check for any errors.
- Also, check the **Network** tab to see if requests are being sent to the backend.

---

### 2. **Verify CORS Issues**
If your backend (Spring Boot) is running on `http://localhost:9083` and Angular is running on `http://localhost:4200`, the browser might block requests due to **CORS (Cross-Origin Resource Sharing)**.

#### **Solution (Enable CORS in Spring Boot)**
Add this in your Spring Boot application's `WebConfig`:

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig {

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/api/**")
                        .allowedOrigins("http://localhost:4200")
                        .allowedMethods("GET", "POST", "PUT", "DELETE")
                        .allowCredentials(true);
            }
        };
    }
}
```

---

### 3. **Ensure HttpClientModule is Imported**
In `app.module.ts` or if using **standalone components**, ensure `HttpClientModule` is included:

```typescript
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [
    HttpClientModule
  ]
})
export class AppModule { }
```

If using **standalone components**, modify `KtSessionComponent`:

```typescript
import { HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-kt-session',
  standalone: true,
  templateUrl: './kt-session.component.html',
  styleUrls: ['./kt-session.component.css'],
  imports: [FormsModule, CommonModule, HttpClientModule]
})
export class KtSessionComponent {
```

---

### 4. **Check if Backend API is Running**
- Open **Postman** or **cURL** and try making a direct request to:
  ```
  GET http://localhost:9083/api/kt-sessions
  ```
- If the request fails, the backend might not be running or the endpoint is incorrect.

---

### 5. **Fix Subscribe Method**
Your `subscribe` method might not be catching errors properly. Try this:

```typescript
submitKtSession() {
  this.http.post(this.apiUrl, this.ktSession).subscribe({
    next: response => {
      alert('KT session scheduled');
      this.ktSessionDetails = response;
    },
    error: error => {
      alert('Error scheduling KT session: ' + error.message);
      console.error(error);
    }
  });
}
```

---

### 6. **Debug the API Calls**
Modify `getKtSessionById()` to check if the response is correct:

```typescript
getKtSessionById() {
  const sessionId = prompt('Enter Session ID:');
  if (sessionId) {
    this.http.get(`${this.apiUrl}/${sessionId}`).subscribe({
      next: response => {
        console.log('Session data:', response);
        this.ktSessionDetails = response;
      },
      error: error => {
        alert('Session not found: ' + error.message);
        console.error(error);
      }
    });
  }
}
```

---

### **Final Checks**
1. **Confirm Backend is Running:** `http://localhost:9083/api/kt-sessions`
2. **Check CORS Issues (Add CORS Config)**
3. **Verify `HttpClientModule` is imported**
4. **Use `subscribe({ next, error })` format**
5. **Use Console Logs to Debug**

Try these fixes and let me know what errors you still get. ðŸš€
































<div class="row">
    <div class="col-12">
       <table class="table table-borderd">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>employeeName</th>
                    <th>employeeGender</th>
                    <th>dateOfJoining</th>
                    <th>role</th>
                    <th>phoneNumber</th>
                    <th>email</th>
                    <th>status</th>
                </tr>
            </thead>
            <tbody>
                @for(item of List; track $index){
                    <tr>
                         <td>{{$index+1}}</td>
                         <td>{{item.employeeName}}</td>
                         <td>{{item.employeeGender}}</td>
                         <td>{{item.dateOfJoining}}</td>
                         <td>{{item.role}}</td>
                         <td>{{item.phoneNumber}}</td>
                         <td>{{item.email}}</td>
                         <td>{{item.status}}</td>
                    </tr>
                }
            </tbody>
       </table>
    </div>
</div>
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserListComponent } from './user-list.component';

describe('UserListComponent', () => {
  let component: UserListComponent;
  let fixture: ComponentFixture<UserListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component, inject, OnInit } from '@angular/core';
import { UserService } from '../../service/user.service';

@Component({
  selector: 'app-user-list',
  standalone: false,
  templateUrl: './user-list.component.html',
  styleUrl: './user-list.component.css'
})
export class UserListComponent implements OnInit{
     
    userService=inject(UserService);
    List:any[]=[];
    ngOnInit(): void {
      this.loadClient()
    }
    loadClient(){
     this.userService.getClient().subscribe((res:any)=>{
      this.List=res.data;
     })
    }
}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  constructor(private http:HttpClient) { }

  onLogin(obj:any){
    return this.http.post("http://localhost:9096/auth/login",obj)
  }
  getClient(){
    return this.http.get("http://localhost:9081/clients/all")
  }
}
import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



























login() {
  debugger;
  this.userService.onLogin(this.loginObj).subscribe(
    (res: any) => {
      debugger;
      if (res) { // âœ… If response is not null, consider login successful
        localStorage.setItem('userApp', JSON.stringify(res));
        this.router.navigateByUrl("user-list"); // âœ… Redirect to user-list
      } else {
        alert("Invalid credentials. Please try again."); // âœ… Show error message
      }
    },
    (error) => {
      debugger;
      alert("Login failed. Please check your credentials or try again later.");
      console.error("Login Error:", error);
    }
  );
}






<p>login works!</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Form</title>
    <link rel="stylesheet" href="login.component.css">
</head>
<body>
    <div class="form-container">
        <h2>LOGIN</h2>
        <form class="login-form">
            <input type="text" name="email" [(ngModel)]="loginObj.email" placeholder="email" required>
            <input type="password" name="password" [(ngModel)]="loginObj.password" placeholder="Password" required>
            <input type="submit" (click)="login()" value="Login">
             <!-- <button (click)="login()"  class="button login_submit">
                <span>Log in now</span>
             </button> -->
        </form>
        <div class="signup-link">
            <p>Don't have an account? <a href="login.component.html">Sign Up</a></p>
        </div>
    </div>
</body>
</html>




login(){
    debugger;
    this.userService.onLogin(this.loginObj).subscribe((res:any)=>{
      debugger;
      if(res.result){
         localStorage.setItem('userApp',JSON.stringify(res.data));
          this.router.navigateByUrl("user-list");
      }
      else{
        alert(res.message)
      }
    })
   }
HttpErrorResponse
error
: 
ProgressEvent {isTrusted: true, lengthComputable: false, loaded: 0, total: 0, type: 'error', â€¦}
headers
: 
_HttpHeaders {headers: Map(0), normalizedNames: Map(0), lazyInit: undefined, lazyUpdate: null}
message
: 
"Http failure response for http://localhost:9096/auth/login: 0 Unknown Error"
name
: 
"HttpErrorResponse"
ok
: 
false
status
: 
0
statusText
: 
"Unknown Error"
type
: 
undefined
url
: 
"http://localhost:9096/auth/login"
[[Prototype]]
: 
HttpResponseBase


<p>login works!</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Form</title>
    <link rel="stylesheet" href="login.component.css">
</head>
<body>
    <div class="form-container">
        <h2>LOGIN</h2>
        <form class="login-form">
            <input type="text" name="email" [(ngModel)]="loginObj.email" placeholder="email" required>
            <input type="password" name="password" [(ngModel)]="loginObj.password" placeholder="Password" required>
            <input type="submit" value="Login">
        </form>
        <div class="signup-link">
            <p>Don't have an account? <a href="login.component.html">Sign Up</a></p>
        </div>
    </div>
</body>
</html>


import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import {Router} from '@angular/router';
@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
   loginObj:any={
    "email":"",
    "password":""
   }
   userService=inject(UserService)
   router=inject(Router)

   login(){
    debugger;
    this.userService.onLogin(this.loginObj).subscribe((res:any)=>{
      debugger;
      if(res.result){
         localStorage.setItem('userApp',JSON.stringify(res.data));
          this.router.navigateByUrl("user-list");
      }
      else{
        alert(res.message)
      }
    })
   }
}



body {
    font-family: 'Roboto', sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #2c3e50;
}

.form-container {
    background-color: #34495e;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    max-width: 400px;
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    text-align: center;
    animation: slideIn 0.8s ease-in-out, borderLight 2s infinite alternate;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes borderLight {
    from {
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    }
    to {
        box-shadow: 0 0 20px rgba(122, 206, 167, 0.856);
    }
}

.form-container h2 {
    color: #ecf0f1;
    margin-bottom: 20px;
}

.login-form input, .signup-form input {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    box-sizing: border-box;
    border: none;
    border-radius: 4px;
    outline: none;
}

.login-form input[type="submit"] {
    background-color: #2ecc71;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-form input[type="submit"]:hover {
    background-color: #27ae60;
}

.login-form input[type="text"],
.login-form input[type="password"] {
    background-color: #ecf0f1;
    color: #333;
}

.login-form input[type="text"]:focus,
.login-form input[type="password"]:focus {
    background-color: #d5dbdb;
}


/* COMMON CSS */

.signup-link a,
.login-link a {
    color: #9294ee;
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s ease;
}

.signup-link a:hover,
.login-link a:hover {
    color: #2980b9;
}

.signup-link p,
.login-link p {
    color: #7f8c8d;
    margin-top: 12px;
    font-size: 16px;
}


/* SIGNUP PAGE CSS */

.signup-form input[type="submit"] {
    background-color: #e74c3c;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.signup-form input[type="submit"]:hover {
    background-color: #c0392b;
}

.signup-form input[type="text"],
.signup-form input[type="password"] {
    background-color: #cbd1d3;
    color: #333;
}

.signup-form input[type="text"]:focus,
.signup-form input[type="password"]:focus {
    background-color: #9eb1b1;
}



import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateClientComponent } from './pages/create-client/create-client.component';

export const routes: Routes = [
  {
    path:'',
    redirectTo:'login',
    pathMatch:'full'
  },
  {
    path:'login',
    component:LoginComponent
  },
  {
    path:'',
    component:LayoutComponent,
    children:[
      {
        path:'user-list',
        component:UserListComponent
      },
      {
        path:'createUser',
        component:CreateClientComponent
      }
    ]
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateClientComponent } from './pages/create-client/create-client.component';
import { provideHttpClient} from '@angular/common/http';
@NgModule({
  declarations: [
    AppComponent,
   
    LayoutComponent,
    UserListComponent,
    CreateClientComponent
  ],
  imports: [
    BrowserModule,
    LoginComponent,
    AppRoutingModule,
    
  ],
  providers: [
    provideHttpClient()
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  constructor(private http:HttpClient) { }

  onLogin(obj:any){
    return this.http.post("http://localhost:9096/auth/login",obj)
  }
}











import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
   loginObj:any={
    "email":"",
    "password":""
   }
}

















import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});












body {
    font-family: 'Roboto', sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #2c3e50;
}

.form-container {
    background-color: #34495e;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    max-width: 400px;
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    text-align: center;
    animation: slideIn 0.8s ease-in-out, borderLight 2s infinite alternate;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes borderLight {
    from {
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    }
    to {
        box-shadow: 0 0 20px rgba(122, 206, 167, 0.856);
    }
}

.form-container h2 {
    color: #ecf0f1;
    margin-bottom: 20px;
}

.login-form input, .signup-form input {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    box-sizing: border-box;
    border: none;
    border-radius: 4px;
    outline: none;
}

.login-form input[type="submit"] {
    background-color: #2ecc71;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-form input[type="submit"]:hover {
    background-color: #27ae60;
}

.login-form input[type="text"],
.login-form input[type="password"] {
    background-color: #ecf0f1;
    color: #333;
}

.login-form input[type="text"]:focus,
.login-form input[type="password"]:focus {
    background-color: #d5dbdb;
}


/* COMMON CSS */

.signup-link a,
.login-link a {
    color: #9294ee;
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s ease;
}

.signup-link a:hover,
.login-link a:hover {
    color: #2980b9;
}

.signup-link p,
.login-link p {
    color: #7f8c8d;
    margin-top: 12px;
    font-size: 16px;
}


/* SIGNUP PAGE CSS */

.signup-form input[type="submit"] {
    background-color: #e74c3c;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.signup-form input[type="submit"]:hover {
    background-color: #c0392b;
}

.signup-form input[type="text"],
.signup-form input[type="password"] {
    background-color: #cbd1d3;
    color: #333;
}

.signup-form input[type="text"]:focus,
.signup-form input[type="password"]:focus {
    background-color: #9eb1b1;
}
