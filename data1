app.module.ts
// import { NgModule } from '@angular/core';
// import { BrowserModule } from '@angular/platform-browser';

// import { AppRoutingModule } from './app-routing.module';
// import { AppComponent } from './app.component';
// import { LoginComponent } from './pages/login/login.component';
// import { LayoutComponent } from './pages/layout/layout.component';
// import { UserListComponent } from './pages/user-list/user-list.component';
// import { CreateClientComponent } from './pages/create-client/create-client.component';
// import { HttpClient, provideHttpClient} from '@angular/common/http';
// @NgModule({
//   declarations: [
//     AppComponent,
   
   
//     UserListComponent,
//     CreateClientComponent
//   ],
//   imports: [
//     BrowserModule,
//     LoginComponent,
//     AppRoutingModule,
    
//   ],
//   providers: [
//     provideHttpClient()
//   ],
//   bootstrap: [AppComponent]
// })
// export class AppModule { }




import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
//import { HttpClientModule } from '@angular/common/http';
import { RouterModule, Routes } from '@angular/router';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateClientComponent } from './pages/create-client/create-client.component';
import { HttpClient, provideHttpClient} from '@angular/common/http';
import { VdiComponent } from './pages/vdi/vdi.component';
import { KtSessionComponent } from './pages/kt-session/kt-session.component';



const routes: Routes = [
  { path: 'create-client', component: CreateClientComponent },
  { path: '', redirectTo: '/create-client', pathMatch: 'full' }
];

@NgModule({
  declarations: [
    AppComponent,
   
   
    UserListComponent,
    CreateClientComponent,
    KtSessionComponent,
    
  ],
  imports: [
    BrowserModule,
    LoginComponent,
    AppRoutingModule,
    FormsModule,
    VdiComponent,
    RouterModule.forRoot(routes)
    
  ],
  providers: [
    provideHttpClient()
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

app.component.ts
import { Component } from '@angular/core';


@Component({
  selector: 'app-root',
  standalone: false,
  templateUrl: './app.component.html',
  
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'resource-management';
}
app.comonent.spec.ts
import { TestBed } from '@angular/core/testing';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterModule.forRoot([])
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'resource-management'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('resource-management');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, resource-management');
  });
});
app.component.html

<router-outlet />
app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';
import { LayoutComponent } from './pages/layout/layout.component';
import { UserListComponent } from './pages/user-list/user-list.component';
import { CreateClientComponent } from './pages/create-client/create-client.component';
import { VdiComponent } from './pages/vdi/vdi.component';

export const routes: Routes = [
  {
    path:'',
    redirectTo:'login',
    pathMatch:'full'
  },
  {
    path:'login',
    component:LoginComponent
  },
  {
    path:'',
    component:LayoutComponent,
    children:[
      {
        path:'user-list',
        component:UserListComponent
      },
      {
        path:'createUser',
        component:CreateClientComponent
      },
      {
        path:'vdi',
        component:VdiComponent
      }
    ]
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
user.service.ts
// // import { HttpClient } from '@angular/common/http';
// // import { Injectable } from '@angular/core';

// // @Injectable({
// //   providedIn: 'root'
// // })
// // export class UserService {

// //   constructor(private http:HttpClient) { }

// //   onLogin(obj:any){
// //     return this.http.post("http://localhost:9096/auth/login",obj)
// //   }
// //   getClient(){
// //     return this.http.get("http://localhost:9081/clients/all")
// //   }
// // // }
// // import { HttpClient } from '@angular/common/http';
// // import { Injectable } from '@angular/core';
// // import { Observable } from 'rxjs';

// // @Injectable({
// //   providedIn: 'root'
// // })
// // export class UserService {

// //   private loginUrl = "http://localhost:9096/auth/login";
// //   private clientsUrl = "http://localhost:9081/clients/all";

// //   constructor(private http: HttpClient) { }

// //   onLogin(obj: any): Observable<any> {
// //     return this.http.post(this.loginUrl, obj);
// //   }

// //   getClient(): Observable<any> {
// //     return this.http.get(this.clientsUrl);
// //   }
// // }


// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';
// import { Observable } from 'rxjs';

// @Injectable({
//   providedIn: 'root'
// })
// export class UserService {

//   private loginUrl = "http://localhost:9096/api/auth/login";
//   private clientsUrl = "http://localhost:9081/clients/all";

//   constructor(private http: HttpClient) { }

//   onLogin(obj: any): Observable<any> {
//     return this.http.post(this.loginUrl, obj);
//   }

//   getClient(): Observable<any[]> {
//     return this.http.get<any[]>(this.clientsUrl);
//   }
// }
// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';

// @Injectable({
//   providedIn: 'root'
// })
// export class UserService {

//   constructor(private http:HttpClient) { }

//   onLogin(obj:any){
//     return this.http.post("http://localhost:9096/auth/login",obj)
//   }
//   getClient(){
//     return this.http.get("http://localhost:9081/clients/all")
//   }
// // }
// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';
// import { Observable } from 'rxjs';

// @Injectable({
//   providedIn: 'root'
// })
// export class UserService {

//   private loginUrl = "http://localhost:9096/auth/login";
//   private clientsUrl = "http://localhost:9081/clients/all";

//   constructor(private http: HttpClient) { }

//   onLogin(obj: any): Observable<any> {
//     return this.http.post(this.loginUrl, obj);
//   }

//   getClient(): Observable<any> {
//     return this.http.get(this.clientsUrl);
//   }
// }


import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  private loginUrl = "http://localhost:9096/api/auth/login";
  private clientsUrl = "http://localhost:9081/clients/all";
  private apiUrl = 'http://localhost:9081/clients/register';
  constructor(private http: HttpClient) { }

  onLogin(obj: any): Observable<any> {
    return this.http.post(this.loginUrl, obj);
  }

  getClient(): Observable<any[]> {
    return this.http.get<any[]>(this.clientsUrl);
  }
  registerClient(clientData: any): Observable<any> {
    return this.http.post(this.apiUrl, clientData);
  }
}
user.service.spec.ts
import { TestBed } from '@angular/core/testing';

import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';

// @Injectable({
//   providedIn: 'root'
// })
// export class UserService {

//   constructor(private http:HttpClient) { }

//   onLogin(obj:any){
//     return this.http.post("http://localhost:9096/auth/login",obj)
//   }
//   getClient(){
//     return this.http.get("http://localhost:9081/clients/all")
//   }
// // }
// import { HttpClient } from '@angular/common/http';
// import { Injectable } from '@angular/core';
// import { Observable } from 'rxjs';

// @Injectable({
//   providedIn: 'root'
// })
// export class UserService {

//   private loginUrl = "http://localhost:9096/auth/login";
//   private clientsUrl = "http://localhost:9081/clients/all";

//   constructor(private http: HttpClient) { }

//   onLogin(obj: any): Observable<any> {
//     return this.http.post(this.loginUrl, obj);
//   }

//   getClient(): Observable<any> {
//     return this.http.get(this.clientsUrl);
//   }
// }
vdi.component.ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-vdi',
  standalone:true,
  imports:[FormsModule,CommonModule],
  templateUrl: './vdi.component.html',
  styleUrls: ['./vdi.component.css']
})
export class VdiComponent {
  vdiObj = {
    clientId: '',
    projectName: '',
    vdiType: '',
    softwareStack: '',
    allocationDate: '',
    status: ''
  };

  softwareInput = ''; 
  // responseMessage = '';
  responseMessage : string= '';




  vdiList: any[]=[];



  constructor(private http: HttpClient) {}



  ngOnInit(): void {
    this.getVdiResources();
  }





  allocateVDI() {
    // this.vdiObj.softwareStack = JSON.stringify({ software: [this.softwareInput] });

    this.http.post('http://localhost:9082/vdis/allocate', this.vdiObj).subscribe(
      (res) => {
        this.responseMessage = 'VDI allocated successfully!';


        this.getVdiResources(); 


        
      },
      error => {
        this.responseMessage = 'Error allocating VDI!';
      }
    );
  }










  getVdiResources(): void {
    this.http.get<any[]>('http://localhost:9082/vdis/all').subscribe(
      (data) => {
        this.vdiList = data;
      },
      (error) => {
        console.error('Error fetching VDI resources', error);
      }
    );
  }
}

vdi.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VdiComponent } from './vdi.component';

describe('VdiComponent', () => {
  let component: VdiComponent;
  let fixture: ComponentFixture<VdiComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [VdiComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(VdiComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
vdi.component.html
<p>vdi works!</p>
<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body style="height:1500px">

<nav class="navbar navbar-inverse navbar-fixed-top">
<div class="container-fluid">
  <div class="navbar-header">
    <a class="navbar-brand" href="#">WebSiteName</a>
  </div>
  <ul class="nav navbar-nav">
    <li class="active"><a href="#">Home</a></li>
    <li><a href="http://localhost:9082/vdis/allocate">VDI allocate</a></li>
    <li><a href="http://localhost:9082/vdis/all" (click)="getVdiResources()" >Get VDI Resources</a></li>
    <li><a href="http://localhost:9082/vdis/1">Get VDI Resources by id</a></li>
    <li><a href="#">VDI Deallocate</a></li>

  </ul>
</div>
</nav>



<div class="container">
    <h2>VDI Allocation Form</h2>




<form #vdiForm="ngForm" (ngSubmit)="allocateVDI()" class="vdi-form">
    <div class="form-group">
      <label for="clientId">Client ID</label>
      <input type="text" id="clientId" name="clientId" class="form-control" [(ngModel)]="vdiObj.clientId"
        required #clientId="ngModel">
      <span class="error" *ngIf="clientId.invalid && clientId.touched">Client ID is required</span>
    </div>
  
    <div class="form-group">
      <label for="projectName">Project Name</label>
      <input type="text" id="projectName" name="projectName" class="form-control" [(ngModel)]="vdiObj.projectName"
        required #projectName="ngModel">
      <span class="error" *ngIf="projectName.invalid && projectName.touched">Project Name is required</span>
    </div>
  
    <div class="form-group">
      <label for="vdiType">VDI Type</label>
      <select id="vdiType" name="vdiType" class="form-control" [(ngModel)]="vdiObj.vdiType" required #vdiType="ngModel">
        <option value="" disabled selected>Select VDI Type</option>
        <option value="Type A">Type A</option>
        <option value="Type B">Type B</option>
      </select>
      <span class="error" *ngIf="vdiType.invalid && vdiType.touched">VDI Type is required</span>
    </div>
  
    <div class="form-group">
      <label for="softwareStack">Software Stack</label>
      <input type="text" id="softwareStack" name="softwareStack" class="form-control" [(ngModel)]="softwareInput"
        required #softwareStack="ngModel">
      <span class="error" *ngIf="softwareStack.invalid && softwareStack.touched">Software Stack is required</span>
    </div>
  
    <div class="form-group">
      <label for="allocationDate">Allocation Date</label>
      <input type="datetime-local" id="allocationDate" name="allocationDate" class="form-control"
        [(ngModel)]="vdiObj.allocationDate" required #allocationDate="ngModel">
      <span class="error" *ngIf="allocationDate.invalid && allocationDate.touched">Allocation Date is required</span>
    </div>
  
    <div class="form-group">
      <label for="status">Status</label>
      <select id="status" name="status" class="form-control" [(ngModel)]="vdiObj.status" required #status="ngModel">
        <option value="" disabled selected>Select Status</option>
        <option value="ACTIVE">ACTIVE</option>
        <option value="INACTIVE">INACTIVE</option>
      </select>
      <span class="error" *ngIf="status.invalid && status.touched">Status is required</span>
    </div>
  
    <div class= "form-buttons">
      <button type="submit" [disabled]="vdiForm.invalid" class="submit-button">Allocate VDI</button>
    </div>
  </form>
  <div *ngIf="responseMessage" class="response-message">{{ responseMessage }}</div>



















  <h2>VDI Resources</h2>
  <table class="table table-bordered"*ngIf="vdiList.length > 0">
    <thead>
      <tr>
        <th>Allocation ID</th>
        <th>Client ID</th>
        <th>Project Name</th>
        <th>VDI Type</th>
        <th>Software Stack</th>
        <th>Allocation Date</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let vdi of vdiList">
        <td>{{ vdi.allocationId }}</td>
        <td>{{ vdi.clientId }}</td>
        <td>{{ vdi.projectName }}</td>
        <td>{{ vdi.vdiType }}</td>
        <td>{{ vdi.softwareStack }}</td>
        <td>{{ vdi.allocationDate | date:'short' }}</td>
        <td>{{ vdi.status }}</td>
      </tr>
    </tbody>
  </table>
  <div  *ngIf="vdiList.length === 0">No VDI resources available.</div>
</div>
vdi.component.css
.vdi-form {
    max-width: 600px;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  label {
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
  }
  
  input, select {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  button {
    width: 100%;
    padding: 10px;
    background-color: #003366;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #002244;
  }
  
  .error {
    color: red;
    font-size: 12px;
  }
  
  .response-message {
    text-align: center;
    font-weight: bold;
    margin-top: 15px;
  }
  
  
  
  
  
  
  
  
  user-list.component.ts
// import { Component, inject, OnInit } from '@angular/core';
// import { UserService } from '../../service/user.service';

// @Component({
//   selector: 'app-user-list',
//   standalone: false,
//   templateUrl: './user-list.component.html',
//   styleUrl: './user-list.component.css'
// })
// export class UserListComponent implements OnInit{
     
//     userService=inject(UserService);
//     List:any[]=[];
//     ngOnInit(): void {
//       console.log("UserListComponent Loaded!")
//       this.loadClient()
//     }
//     loadClient(){
//       this.userService.getClient().subscribe({
//         next: (res: any) => {
//             if (Array.isArray(res)) {
//                 this.List = res; // Directly assign response if it's an array
//             } else if (res?.data) {
//                 this.List = res.data; // If the response is wrapped in an object
//             } else {
//                 console.error('Unexpected response format:', res);
//             }
//         },
//         error: (err) => {
//             console.error('Error fetching clients:', err);
//         }
//     });
// }
    
// }
import { Component, OnInit } from '@angular/core';
import { UserService } from '../../service/user.service';

@Component({
  selector: 'app-user-list',
  standalone:false,
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent implements OnInit {
  users: any[] = [];  // Store fetched users
  errorMessage: string = ''; // Store error messages
  isLoading: boolean = true; // Show loading state

  constructor(private userService: UserService) {}

  ngOnInit(): void {
    this.getUsers();
  }

  getUsers(): void {
    this.userService.getClient().subscribe({
      next: (response) => {
        this.users = response; // Ensure this matches the backend response
        this.isLoading = false;
      },
      error: (error) => {
        console.error('Error fetching users:', error);
        this.errorMessage = 'Unable to fetch user data. Please try again later.';
        this.isLoading = false;
      }
    });
  }
}
user-list.componet.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserListComponent } from './user-list.component';

describe('UserListComponent', () => {
  let component: UserListComponent;
  let fixture: ComponentFixture<UserListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [UserListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
user-list.componet.html
<!-- <div class="row">
    <div class="col-12">
       <table class="table table-bordered" *ngIf="List.length > 0; else noData">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Employee Name</th>
                    <th>Gender</th>
                    <th>Date of Joining</th>
                    <th>Role</th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let item of List; let i = index">
                     <td>{{ i + 1 }}</td>
                     <td>{{ item.employeeName }}</td>
                     <td>{{ item.employeeGender }}</td>
                     <td>{{ item.dateOfJoining }}</td>
                     <td>{{ item.role }}</td>
                     <td>{{ item.phoneNumber }}</td>
                     <td>{{ item.email }}</td>
                     <td>{{ item.status }}</td>
                </tr>
            </tbody>
       </table>
       <ng-template #noData>
            <p class="text-center text-danger">No data available</p>
       </ng-template>
    </div>
</div>







 -->
<!-- 
 <div class="container mt-4">
    <h2>User List</h2>
  
     Loading Indicator -->
    <!-- <div *ngIf="isLoading" class="alert alert-info">Loading users...</div>
  
     Error Message -->
   <!--  <div *ngIf="errorMessage" class="alert alert-danger">{{ errorMessage }}</div>
  
    Table Display -->
    <!-- <table *ngIf="users.length >= 0" class="table table-bordered table-striped">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Email</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody> 
        <tr *ngFor="let user of users">
          <td>{{ user.id }}</td>
          <td>{{ user.name }}</td>
          <td>{{ user.email }}</td>
          <td>
            <button class="btn btn-primary btn-sm">Edit</button>
            <button class="btn btn-danger btn-sm">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>
  
     Message if No Users Available -->
    <!-- <div *ngIf="!isLoading && users.length === 0" class="alert alert-warning">
      No users available.
    </div>
  </div>
  
   --> 



   <div class="row">
    <div class="col-12">
        <h2>User List</h2>
        <!-- Loading State -->
        <div *ngIf="isLoading" class="text-center text-primary">
            <p>Loading data, please wait...</p>
        </div>

        <!-- Error Message -->
        <div *ngIf="errorMessage" class="text-center text-danger">
            <p>{{ errorMessage }}</p>
        </div>

        <!-- Employee Table -->
        <table class="table table-bordered" *ngIf="!isLoading && users.length > 0; else noData">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Employee Name</th>
                    <th>Gender</th>
                    <th>Date of Joining</th>
                    <th>Role</th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let item of users; let i = index">
                    <td>{{ i + 1 }}</td>
                    <td>{{ item.employeeName }}</td>
                    <td>{{ item.employeeGender }}</td>
                    <td>{{ item.dateOfJoining  }}</td> <!-- Format date -->
                    <td>{{ item.role }}</td>
                    <td>{{ item.phoneNumber }}</td>
                    <td>{{ item.email }}</td>
                    <td>{{ item.status }}</td>
                </tr>
            </tbody>
        </table>

        <!-- No Data Message -->
        <ng-template #noData>
            <p class="text-center text-warning">No data available</p>
        </ng-template>
    </div>
</div>
login.comonent.ts
import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent {
  loginObj: any = {
    username: '',
    password: ''
  };

  userService = inject(UserService);
  router = inject(Router);

  login() {
    // Log original values for debugging
    console.log('Before Trim - Username:', this.loginObj.username);
    console.log('Before Trim - Password:', this.loginObj.password);
  
    // Trim spaces
    this.loginObj.username = this.loginObj.username.trim();
    this.loginObj.password = this.loginObj.password.trim();
  
    // Log trimmed values for debugging
    console.log('After Trim - Username:', this.loginObj.username);
    console.log('After Trim - Password:', this.loginObj.password);
  
    if (!this.loginObj.username || !this.loginObj.password) {
      alert('Username and Password are required!');
      return;
    }
  
    this.userService.onLogin(this.loginObj).subscribe(
      (res: any) => {
        if (res && res.token) {
          localStorage.setItem('userApp', JSON.stringify(res));
          this.router.navigateByUrl('/user-list');
        } else {
          alert('Invalid credentials. Please try again.');
        }
      },
      (error) => {
        console.error('Login Error:', error);
        if (error.status === 403) {
          alert('Access Denied! Invalid credentials.');
        } else {
          alert('Login failed. Please check your credentials or try again later.');
        }
      }
    );
  }
}


login.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
login.component.html
<p>login works!</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Form</title>
    <link rel="stylesheet" href="login.component.css">
</head>
<body>
    <div class="form-container">
        <h2>LOGIN</h2>
        <form class="login-form">
            <input type="text" name="username" [(ngModel)]="loginObj.username" placeholder="email" required>
            <input type="password" name="password" [(ngModel)]="loginObj.password" placeholder="Password" required>
            <input type="submit" (click)="login()" value="Login">
             <!-- <button (click)="login()"  class="button login_submit">
                <span>Log in now</span>
             </button> -->
        </form>
        <div class="signup-link">
            <p>Don't have an account? <a href="login.component.html">Sign Up</a></p>
        </div>
    </div>
</body>

</html>

login.component.css
body {
    font-family: 'Roboto', sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #2c3e50;
}

.form-container {
    background-color: #34495e;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    max-width: 400px;
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    text-align: center;
    animation: slideIn 0.8s ease-in-out, borderLight 2s infinite alternate;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes borderLight {
    from {
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    }
    to {
        box-shadow: 0 0 20px rgba(122, 206, 167, 0.856);
    }
}

.form-container h2 {
    color: #ecf0f1;
    margin-bottom: 20px;
}

.login-form input, .signup-form input {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    box-sizing: border-box;
    border: none;
    border-radius: 4px;
    outline: none;
}

.login-form input[type="submit"] {
    background-color: #2ecc71;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-form input[type="submit"]:hover {
    background-color: #27ae60;
}

.login-form input[type="text"],
.login-form input[type="password"] {
    background-color: #ecf0f1;
    color: #333;
}

.login-form input[type="text"]:focus,
.login-form input[type="password"]:focus {
    background-color: #d5dbdb;
}


/* COMMON CSS */

.signup-link a,
.login-link a {
    color: #9294ee;
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s ease;
}

.signup-link a:hover,
.login-link a:hover {
    color: #2980b9;
}

.signup-link p,
.login-link p {
    color: #7f8c8d;
    margin-top: 12px;
    font-size: 16px;
}


/* SIGNUP PAGE CSS */

.signup-form input[type="submit"] {
    background-color: #e74c3c;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.signup-form input[type="submit"]:hover {
    background-color: #c0392b;
}

.signup-form input[type="text"],
.signup-form input[type="password"] {
    background-color: #cbd1d3;
    color: #333;
}

.signup-form input[type="text"]:focus,
.signup-form input[type="password"]:focus {
    background-color: #9eb1b1;
}
layout.component.ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';


@Component({
  selector: 'app-layout',
  standalone: true,
  imports:[RouterOutlet],

  templateUrl: './layout.component.html',
  styleUrl: './layout.component.css'
})
export class LayoutComponent {

}
layout.componet.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LayoutComponent } from './layout.component';

describe('LayoutComponent', () => {
  let component: LayoutComponent;
  let fixture: ComponentFixture<LayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
layout.component.html
<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body style="height:1500px">

<nav class="navbar navbar-inverse navbar-fixed-top">
<div class="container-fluid">
  <div class="navbar-header">
    <a class="navbar-brand" href="#">WebSiteName</a>
  </div>
  <ul class="nav navbar-nav">
    <li class="active"><a href="#">Home</a></li>
    <li><a href="http://localhost:4200/create-client">Create Client Id</a></li>
    <li><a href="http://localhost:4200/vdi">VDI Resources</a></li>
    <li><a href="http://localhost:9083/api/kt-sessions">KT Session</a></li>
  </ul>
</div>
</nav>

  <router-outlet></router-outlet>
create-client.component.ts
import { Component } from '@angular/core';
//import { ClientService} from '../../services/client.service';
import { UserService } from '../../service/user.service';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
@Component({
  selector: 'app-create-client',
  standalone: false,
  templateUrl: './create-client.component.html',
  styleUrl: './create-client.component.css'
})
export class CreateClientComponent {
  clientObj: any = {
    employeeName: '',
    employeeGender: 'Female',
    dateOfJoining: '',
    role: '',
    phoneNumber: '',
    email: '',
    status: 'ACTIVE'
  };
//}

// import { Component } from '@angular/core';
// import { Employee } from './employee';
// import { EmployeeService } from './employee.service';
// import { Router } from '@angular/router';

// @Component({
//   selector: 'app-add-employee',
//   standalone: false,
//   templateUrl: './add-employee.component.html',
//   styleUrl: './add-employee.component.css',
// })
// export class AddEmployeeComponent {
  // constructor(
  //   private userService: UserService, private router: Router) {}
    constructor(private http: HttpClient) {}
  onSubmit() {
    this.http.post('http://localhost:9081/clients/register', this.clientObj).subscribe(response => {
      alert('Client ID Created Successfully!');
    }, error => {
      alert('Error creating client ID');
    });
  }

  goBack() {
    window.history.back();
  }
}
  
  create-client.component.spec.ts
// import { ComponentFixture, TestBed } from '@angular/core/testing';

// import { CreateClientComponent } from './create-client.component';

// describe('CreateClientComponent', () => {
//   let component: CreateClientComponent;
//   let fixture: ComponentFixture<CreateClientComponent>;

//   beforeEach(async () => {
//     await TestBed.configureTestingModule({
//       declarations: [CreateClientComponent]
//     })
//     .compileComponents();

//     fixture = TestBed.createComponent(CreateClientComponent);
//     component = fixture.componentInstance;
//     fixture.detectChanges();
//   });

//   it('should create', () => {
//     expect(component).toBeTruthy();
//   });
// });


import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CreateClientComponent } from './create-client.component';

describe('CreateClientComponent', () => {
  let component: CreateClientComponent;
  let fixture: ComponentFixture<CreateClientComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [CreateClientComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(CreateClientComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

create-client.component.html
<!-- <h2>Create Client</h2>


  <label>Name:</label>
  <input type="text" [(ngModel)]="clientObj.employeeName" name="employeeName" required />

  <label>Gender:</label>
  <select [(ngModel)]="clientObj.employeeGender" name="employeeGender">
    <option value="Male">Male</option>
    <option value="Female">Female</option>
  </select>

  <label>Date of Joining:</label>
  <input type="date" [(ngModel)]="clientObj.dateOfJoining" name="dateOfJoining" required />

  <label>Role:</label>
  <input type="text" [(ngModel)]="clientObj.role" name="role" required />

  <label>Phone Number:</label>
  <input type="text" [(ngModel)]="clientObj.phoneNumber" name="phoneNumber" required />

  <label>Email:</label>
  <input type="email" [(ngModel)]="clientObj.email" name="email" required />

  <label>Status:</label>
  <input type="text" [(ngModel)]="clientObj.status" name="status" readonly />

  <button type="submit">Register</button>
</form> -->


<form #clientForm="ngForm" (ngSubmit)="onSubmit()" class="client-form">
  <div class="form-row">
    <div class="form-group">
      <label for="employeeName">Employee Name</label>
      <input type="text" id="employeeName" name="employeeName" class="form-control" [(ngModel)]="clientObj.employeeName" 
        required #employeeName="ngModel">
      <span class="error" *ngIf="employeeName.invalid && employeeName.touched">Employee Name is required</span>
    </div>

    <div class="form-group">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" class="form-control" [(ngModel)]="clientObj.email" 
        required email #email="ngModel">
      <span class="error" *ngIf="email.invalid && email.touched">Enter a valid email</span>
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="phone">Phone Number</label>
      <input type="tel" id="phone" name="phone" class="form-control" [(ngModel)]="clientObj.phoneNumber" 
        required pattern="^\d{10}$" #phone="ngModel">
      <span class="error" *ngIf="phone.invalid && phone.touched">Enter a valid 10-digit phone number</span>
    </div>

    <div class="form-group">
      <label for="department">Department</label>
      <select id="department" name="department" class="form-control" [(ngModel)]="clientObj.department" required #department="ngModel">
        <option value="" disabled selected>Select Department</option>
        <option value="Business">Business</option>
        <option value="Development">Development</option>
      </select>
      <span class="error" *ngIf="department.invalid && department.touched">Department is required</span>
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="role">Role</label>
      <select id="role" name="role" class="form-control" [(ngModel)]="clientObj.role" required #role="ngModel">
        <option value="" disabled selected>Select Role</option>
        <option value="Trainer">Trainer</option>
        <option value="Developer">Developer</option>
      </select>
      <span class="error" *ngIf="role.invalid && role.touched">Role is required</span>
    </div>

    <div class="form-group">
      <label for="startDate">Start Date</label>
      <input type="date" id="startDate" name="startDate" class="form-control" [(ngModel)]="clientObj.dateOfJoining" required #startDate="ngModel">
      <span class="error" *ngIf="startDate.invalid && startDate.touched">Start date is required</span>
    </div>
  </div>

  <div class="form-buttons">
    <button type="button" (click)="goBack()" class="back-button">Back</button>
    <button type="submit" [disabled]="clientForm.invalid" class="submit-button">Create Client ID</button>
  </div>
</form>
ce=reate-client.componet.css
/* form {
    display: flex;
    flex-direction: column;
    max-width: 400px;
    margin: auto;
  }
  
  label {
    margin-top: 10px;
  }
  
  input, select {
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  button {
    margin-top: 15px;
    padding: 10px;
    background-color: blue;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: darkblue;
  } */



  .client-form {
    max-width: 600px;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .form-row {
    display: flex;
    justify-content: space-between;
  }
  
  .form-group {
    width: 48%;
    margin-bottom: 15px;
  }
  
  label {
    font-weight: bold;
  }
  
  input, select {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  button {
    width: 100%;
    padding: 10px;
    background-color: #003366;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #002244;
  }
  
  .error {
    color: red;
    font-size: 12px;
  }
  
  kt-session.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-kt-session',
  standalone: false,
  templateUrl: './kt-session.component.html',
  styleUrl: './kt-session.component.css'
})
export class KtSessionComponent {

}
kt-session.componet.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { KtSessionComponent } from './kt-session.component';

describe('KtSessionComponent', () => {
  let component: KtSessionComponent;
  let fixture: ComponentFixture<KtSessionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [KtSessionComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(KtSessionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});












